<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Заметки Автоматизатора</title>
    <link>localhost</link>
    <atom:link href="localhost/feed.xml" rel="self" type="application/rss+xml" />
    <description>Заметки Автоматизатора</description>
    <language>en-gb</language>
    <pubDate>Tue, 18 Oct 2016 09:32:36 +0000</pubDate>
    <lastBuildDate>Tue, 18 Oct 2016 09:32:36 +0000</lastBuildDate>

    <item>
      <title>Будьте осторожны с TestNG лисенерами</title>
      <link>localhost/budtie-ostorozhny-s-testng-lisienierami/index.html</link>
      <pubDate>Sat, 8 Oct 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">budtie-ostorozhny-s-testng-lisienierami/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Решил написать такую вот, на мой взгляд, интересную и, наверное, для многих познавательную заметку. Сегодня поговорим о скрытых угрозах, которые несут в себе TestNG лисенеры.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://learn-automation.com/wp-content/uploads/2015/03/testng.jpg&quot; alt=&quot;testng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Среди автоматизаторов, использующих Java, издавна бушует холивар, что же лучше, TestNg или JUnit. Увы, но дальше банальных переписок в Slack чате или разговоров в холле конференций дело не заходит.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Проведя небольшой экспериментальный опрос на прошедшем &lt;a href=&quot;http://automation-remarks.com/qafest-2016-rietrospiektiva/&quot;&gt;QAFest 2016&lt;/a&gt;, я был немного удивлен, что подавляющее большинство на проектах использует именно TestNG. Многим очень нравится TestNG, некоторые считают его намного более удобным, чем, скажем, тот же JUnit. Осмелюсь предположить, что большинство просто никогда не пробовало использовать JUnit чисто из исторических соображений. Пришел на проект, а там уже был TestNg, освоил его - и теперь на любом другом проекте используем то, что нам так привычно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мой &lt;a href=&quot;http://automation-remarks.com/java-video-recorder-1-0-8/&quot;&gt;VideoRecoder&lt;/a&gt; имеет интеграцию и с TestNG. Я реализовал такую интеграцию с помощью лисенеров, так как это самый простой и гибкий способ. НО, как оказалось, эти лисенеры влекут за собой кучу подводных камней, о которых многие, скорее всего, даже не знали.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я опишу всего лишь два случая, которые лично меня очень сильно удивили и имели серьезное влияние на работу Java VideoRecorder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Факт 1: Аннотация @Listener применяет лисенер ко всем классам&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот такая вот подлость номер один. Скажем, вы написали класс и захотели применить к нему какой-то свой лисенер:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Listeners({VideoListener.class})
class MyAwesomeTests{

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну, вроде как отлично, запускаем - все работает, радуемся, пишем в резюме, что мы умеем делать такую классную штуку.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;НО радуемся недолго. Стоит нам написать еще пару-тройку классов с тестами, как мы заметим, что наш лисенер срабатывает и для них, хотя мы их никакими аннотациями не маркали. Вот это подарок!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вроде бы, ничего страшного, ну, применяется - и что?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В случае с рекордером это потенциально могло привести к плохим последствиям. Скажем, у вас есть Test Suite, в котором есть 200-300 тестов. Вы подключаете запись видео и настраиваете его писать все тесты, независимо от того, отмечены они аннотацией &lt;strong&gt;@Video&lt;/strong&gt; или нет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Listeners({VideoListener.class})
public class TestNgVideoExampleTest {

    @BeforeClass
    public void setUp() {
        VideoRecorder.conf().
                .withRecordMode(RecordingMode.All)
                .withVideoSaveMode(VideoSaveMode.All)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Или так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;./gradlew test -Dvideo.mode=ALL -Dvideo.save.mode=ALL&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Запускаете свои тесты и получаете 200-300 видеороликов. Хотя вы рассчитывали записать только один класс, в котором значительно меньшее количество тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Естественно, когда я нашел такой баг в своей библиотеке, то начал думать, как это исправить. Решение оказалось таким: нам нужно написать свой метод проверки аннотации для класса, который в данный момент &quot;прослушивается&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public boolean shouldIntercept(ITestResult result) {
        List&amp;lt;String&amp;gt; listeners = result.getTestContext().getCurrentXmlTest().getSuite().getListeners();
        return listeners.contains(this.getClass().getName()) || shouldIntercept(result.getTestClass().getRealClass(), this.getClass());
    }

public boolean shouldIntercept(Class testClass, Class annotation) {
        Listeners listenersAnnotation = getListenersAnnotation(testClass);
        return listenersAnnotation != null &amp;amp;&amp;amp; asList(listenersAnnotation.value()).contains(annotation);
    }

    private Listeners getListenersAnnotation(Class testClass) {
        Annotation annotation = testClass.getAnnotation(Listeners.class);
        return annotation != null ? (Listeners) annotation :
                testClass.getSuperclass() != null ? getListenersAnnotation(testClass.getSuperclass()) : null;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ну, и затем нужно просто использовать этот метод в методах лисенера:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class VideoListener extends TestNgListener {

    @Override
    public void onTestStart(ITestResult result) {
        if (shouldIntercept(result)) {
            // code here
        }
    }

    .... another methods&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь ваш лисенер будет срабатывать только для тех классов, у которых аннотация &lt;strong&gt;@Listener&lt;/strong&gt; содержит &lt;strong&gt;VideoListener.class&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Стоит отметить, что в случае подключения лисенера через &lt;strong&gt;testng.xml&lt;/strong&gt;, он таки будет применен ко всему сьюту:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;suite name=&quot;Suite&quot; parallel=&quot;false&quot;&amp;gt;
    &amp;lt;listeners&amp;gt;
        &amp;lt;listener class-name=&quot;com.automation.remarks.testng.VideoListener&quot; /&amp;gt;
    &amp;lt;/listeners&amp;gt;

    &amp;lt;test name=&quot;Test&quot;&amp;gt;
        &amp;lt;classes&amp;gt;
            &amp;lt;class name=&quot;com.testng.TestClass&quot; /&amp;gt;
        &amp;lt;/classes&amp;gt;
    &amp;lt;/test&amp;gt;
&amp;lt;/suite&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Это выглядит логично, так как блок &lt;strong&gt;&amp;lt;listeners&amp;gt;&lt;/strong&gt; находится внутри тега &lt;strong&gt;&amp;lt;suite&amp;gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Факт 2: Порядок выполнения лисенеров не гарантируется&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Второй интересный момент, который принес мне много головной боли.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скажем, вам нужно подключить два лисенера. В моем случае - один, который пишет видео, а второй, который аттачит это самое видео к &amp;lt;mark&amp;gt;Allure&amp;lt;/mark&amp;gt; отчету.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ок, берем и пишем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Listeners({VideoListener.class, AllureListener.class})
class TestClass{
 // tests here
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Кажется, все отлично: один пишет видео, другой по окончании теста аттачит его в отчет. Но выяснилось, что в некоторые моменты происходила непонятная фигня: видео записывалось, но не отображалось в отчете.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Оказалось, что это случалось потому, что методы из &lt;strong&gt;AllureListener&lt;/strong&gt; вызывались первее. Ну вообще подарок!!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начав копаться внутри TestNG, я определил, что все лисенеры складываются в Set и потом вызываются. Естественно, что о какой-то очередности речи и быть не может.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как же все-таки гарантировать очередность вызова? Ответ: иметь один лисенер!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class AllureVideoListener extends VideoListener{

    @Override
    public void onTestFailure(ITestResult result) {
        super.onTestFailure(result);
        attachment(VideoRecorder.getLastRecording())
    }

    @Attachment(value = &quot;video&quot;, type = &quot;video/mp4&quot;)
    private byte[] attachment(File video) {
        try {
            return Files.readAllBytes(Paths.get(video.getAbsolutePath()));
        } catch (IOException e) {
            log.warning(&quot;Allure listener exception&quot; + e);
            return new byte[0];
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так. Да, я мог вызывать метод attachment не в лисенере, а, скажем, в after method и тогда бы не натолкнулся на это. Но, если вдруг окажется так, что порядок выполнения лисенеров для вас будет важен, я вас предупредил =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Такая вот история моей битвы с &lt;strong&gt;TestNG&lt;/strong&gt; и его лисенерами. Естественно, что этот кейс может быть слишком узок и вы в своих проектах никогда не натолкнетесь на это. Но это один из тех моментов, когда можно научиться на ошибках других, и весомый пункт в пользу несовершенности TestNg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Субъективное мнение по поводу &lt;strong&gt;TestNG&lt;/strong&gt; vs &lt;strong&gt;JUnit&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично я очень жду &lt;strong&gt;JUnit 5&lt;/strong&gt;, который уже попробовал, но в реальный проект его брать еще рано. Имхо он заткнет TestNG за пояс, нужно лишь немного подождать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Успехов и до новых заметок..&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>QAFest 2016: ретроспектива</title>
      <link>localhost/qafest-2016-rietrospiektiva/index.html</link>
      <pubDate>Sun, 2 Oct 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">qafest-2016-rietrospiektiva/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как и в прошлом &lt;a href=&quot;http://automation-remarks/qafest-retrospective/&quot;&gt;году&lt;/a&gt;, мне посчастливилось посетить это мероприятие в качестве докладчика.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/qa_fest_2016.jpg&quot; alt=&quot;qa fest 2016&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом году организаторы решили немного изменить формат и разбить программу на два дня. Первый - &lt;strong&gt;Junior Day&lt;/strong&gt; - был полностью посвящен молодому поколению, ну и, естественно, Main Day - для более мастеровитой аудитории.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я, как любитель поговорить на публике, выступал и в первый, и во второй день.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу отметить, что идея сделать два разноплановых дня лично мне очень понравилась, так как можно подготовить доклады разных уровней. К тому же, выступление в первый день дает возможность немного привыкнуть к сцене перед основным днем.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мне выпала честь открывать &lt;strong&gt;Junior Day&lt;/strong&gt; и выступить первым. Не буду спойлить, дождетесь видео и посмотрите сами, о чем я рассказывал. Хочу лишь отметить, что выступать первым немного волнительно, поэтому первых минут 10 во время выступления у меня дрожал голос =) Но потом все наладилось и я откатал доклад на вполне достойном уровне.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Из всех выступлений первого дня мне больше всего понравился доклад &lt;strong&gt;Per Thorsheim Website security 101&lt;/strong&gt;. Я не очень глубоко подкован во всех этих сесюрных штучках, поэтому даже доклад на уровне джуниоров для меня был интересен и полезен. Более того, Per уже второй год подряд приезжает с очень интересными докладами, которые позволяют расширить кругозор и задуматься над нашим поведением в глобальной сети.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все остальные доклады были уж слишком джуниорскими, поэтому я в основном находился в холле и общался с организаторами либо же другими участниками.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Второй - &lt;strong&gt;Main Day&lt;/strong&gt; - был намного интереснее и ярче. Собрались все самые маститые докладчики со своими лучшими докладами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я думаю все &lt;strong&gt;700(!)&lt;/strong&gt; участников с нетерпением ждали открытия основного дня конференции. Как обычно все начиналось с утреннего чаепития и общения. В 10:00 я пошел на первый доклад о Groovy. Думаю, постоянным читателям блога не нужно объяснять, почему я выбрал именно его =)
&lt;a href=&quot;http://automation-remarks.com/seleniumcamp-2016-vidieo/&quot;&gt;Groovy рулит&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самым крутым докладом дня я считаю выступление Анастасии Асеевой &lt;strong&gt;&quot;Роль тестирования в Devops&quot;&lt;/strong&gt;. Когда появится видео, вы сможете сами оценить полезность и крутость этого доклада.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ближе к обеду пришел черед моего выступления. Для синьоров я подготовил доклад о Докерах. В целом я рассказывал о библиотеках &lt;strong&gt;testcontainers&lt;/strong&gt; для Java и Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После этого все послушали эфир &lt;strong&gt;Radio QA&lt;/strong&gt; и начали медленно готовиться к афтепати.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Закрытие конференции было достаточно традиционным - с розыгрышами призов и подарков. Естественно, мы не стали расходиться по домам, а еще послушали стендап-комиков и приличное количество времени общались в узком кругу спикеров.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Конференция &lt;strong&gt;QAFest 2016&lt;/strong&gt; закончилась, а впереди целый год для поиска и подготовки новых интересных и полезных докладов для &lt;strong&gt;QAFest 2017&lt;/strong&gt; :D&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Анонс SQA Days 19</title>
      <link>localhost/anons-sqa-days-19/index.html</link>
      <pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">anons-sqa-days-19/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Компания &quot;Лаборатория тестирования&quot; объявила даты проведения Software Quality Assurance Days - крупнейшей в СНГ международной конференции по вопросам качества программного обеспечения. Следующая, девятнадцатая по счету конференция пройдет 20-21 мая в Санкт-Петербурге. Культурная столица примет конференцию уже в четвертый раз.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ожидается, что SQA Days-19 посетят не менее 600 гостей из различных стран ближнего и дальнего зарубежья. Как и на предыдущих SQA Days, здесь будут обсуждаться разнообразные вопросы обеспечения качества: от глобальных тенденций в QA-индустрии до частных, но не менее важных и интересных случаев применения различных методов и инструментов на реальных проектах.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Технический трек конференции традиционно уделит много внимания автоматизированному тестированию: среди заявленных тем - актуальные &quot;фреймворки&quot;, приемы и технологии, а также их практическое использование при разработке и поставке ПО.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Не будут забыты и другие не теряющие актуальности профессиональные области: функциональное тестирование, тестирование безопасности и поиск уязвимостей, а также тестирование пользовательских интерфейсов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Наконец, ожидаются доклады на такие востребованные темы, как управление тестированием, эффективная работа с партнерами и заказчиками, организация работы команд тестировщиков, профессиональное обучение специалистов в области Quality Assurance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пока расписание конференции формируется, организаторы будут рады конструктивным предложениям и, конечно же, новым докладчикам. Предложить собственный доклад на конференцию можно через форму на сайте SQA Days.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Как автоматизатору побороть SSH</title>
      <link>localhost/ssh/index.html</link>
      <pubDate>Sun, 3 Jan 2016 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">ssh/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хоу-хоу, надеюсь все отлично встретили Новый год и теперь ждут Рождества. Я решил не тратить время попусту и в этот короткий промежуток между праздниками написать небольшую заметку. В этот раз напишу о возможных вариантах работы с &lt;strong&gt;SSH&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcSIluTpLycP4jpvVo3Y0WeOulr4QuhdBSp4Yg6r1doJY4IEX0wx0Q&quot; alt=&quot;images?q=tbn:ANd9GcSIluTpLycP4jpvVo3Y0WeOulr4QuhdBSp4Yg6r1doJY4IEX0wx0Q&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я думаю, что люди, работающие с Linux, имеют достаточно хороший опыт работы с ssh. Для тех же, кто не знает и не пробовал, рекомендую почитать про &lt;strong&gt;ssh&lt;/strong&gt;, &lt;strong&gt;putty&lt;/strong&gt;, установить виртуалку с помощью &lt;a href=&quot;http://automation-remarks.com/vagrant/&quot;&gt;Vagrant&lt;/a&gt; и поиграться.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Приступим ближе к делу: зачем оно автоматизаторам и зачем я вообще затронул эту тему? Все очень просто! Если у вас на проекте есть linux сервера, то вам не избежать работы с ssh. У меня был опыт реализации такой задачи, когда нам нужно было закидывать конфигурационные файлы на сервер и смотреть, как себя поведет система после таких изменений. Делать это руками интересно, но только в первый раз =) Я заавтоматизировал этот процесс.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Тогда я был маленьким джуниором и мое решение свелось к использованию библиотеки &lt;strong&gt;Jsch&lt;/strong&gt;. Штука работала, но пришлось нахвататься проблем и опыта. Не буду вдаваться в подробности, просто посмотрите пример реализации &lt;a href=&quot;http://www.jcraft.com/jsch/examples/Shell.java.html&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Гораздо проще пользоваться библиотеками-обертками, к примеру &lt;a href=&quot;http://ssh.jcabi.com/&quot;&gt;Jcabi-ssh&lt;/a&gt;. Здесь и кода меньше и выглядит он поприятнее:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.jcabi.ssh.Shell;
import com.jcabi.ssh.SSH;
Shell shell = new SSH(&quot;example.com&quot;, 22, &quot;username&quot;, &quot;password&quot;);
String stdout = new Shell.Plain(shell).exec(&quot;echo &apos;Hello, world!&apos;&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но все равно как-то выглядит не очень элегантно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Абсолютным победителем для меня является библиотека - &lt;a href=&quot;https://github.com/aestasit/sshoogr&quot;&gt;sshoogr&lt;/a&gt;. По сути - это Groovy DSL для работы с SSH.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Посмотрите, как легко с ней работать:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Grab(&apos;com.aestasit.infrastructure.sshoogr:sshoogr:0.9.18&apos;)
import static com.aestasit.infrastructure.ssh.DefaultSsh.*

remoteSession(&apos;user2:654321@localhost:2222&apos;) {
  exec &apos;rm -rf /tmp/*&apos;
  exec &apos;touch /var/lock/my.pid&apos;
  remoteFile(&apos;/var/my.conf&apos;).text = &quot;enabled=true&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что стало для меня самым приятным, так это работа с файлами. К примеру:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;def file = &quot;/root/home/test.txt&quot;
 def selenium = &quot;selenium-server-standalone-2.48.2.jar&quot;

 //write to file
 remoteFile(file).text = &quot;Hello&quot;

 //read from file
 print remoteFile(file).text

 //copy file to remote host
 scp {
      from { localFile &quot;/root/home/${selenium}&quot;}
      into { remoteFile &quot;/root/remote/${selenium}&quot; }
 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот как можно легко и просто делать вещи. Не нужно париться с тысячей try-catch блоков, просто бери и делай. А самое важное здесь то, что все это является кодом, вы можете писать свои функции и использовать их, вы можете использовать мощь &lt;strong&gt;GString&lt;/strong&gt; для параметризации и многие другие фишки &lt;strong&gt;Groovy&lt;/strong&gt;. Я жалею, что узнал о ней только когда начал разбираться с &lt;strong&gt;Groovy&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P.S&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В бочке меда не без ложки дегтя: у меня почему-то не сработал вариант конфигурации:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;remoteSession {

  host = &apos;localhost&apos;
  username = &apos;user2&apos;
  password = &apos;654321&apos;
  port = 2222

  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Возможно, я что-то недосмотрел, но во всех остальных случаях работает отлично. На этом все! спасибо, что читали. Возможно, эта заметка поможет в будущем решать подобные проблемы проще и эффективнее. Счастливого Рождества всем! Подписывайтесь - в 2016 будем на связи&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Делаем матчеры веселее с Groovy</title>
      <link>localhost/groovy-matcher/index.html</link>
      <pubDate>Tue, 22 Dec 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">groovy-matcher/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Последняя заметка в этом году. Я думаю, что активные читатели давно заметили мою склонность к Groovy. Я уже писал ряд заметок как о Groovy, так и о создании матчеров для Hamcrest. Теперь опишу свою борьбу с написанием такого же матчера только в Groovy style.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://i.ytimg.com/vi/juHgQBB2tLU/hqdefault.jpg&quot; alt=&quot;hqdefault&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Перед началом написания кода и шевеления извилинами, покажу интересный инструмент от Yandex, который позволяет генерировать метчеры для ваших доменных объектов - смотреть &lt;a href=&quot;https://github.com/yandex-qatools/hamcrest-pojo-matcher-generator&quot;&gt;здесь&lt;/a&gt;. Единственный недостаток этой штуки: если у вас нету возможности натыкать аннотаций в объектах, то придется писать самим.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если у вас нету возможности воспользоваться инструментом, описанным выше, велкам кодить матчеры самостоятельно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, сначала напишем наш доменный класс:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@ToString
class Person {
    String name, phone
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После написания метчеров у нас будет такая вот штука:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;Person p = new Person(name: &quot;Ivan&quot;, phone: &quot;0661234567&quot;)

assertThat(p, hasName(&quot;Ivan&quot;))
assertThat(p, withPhone(&quot;0661234567&quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и в случае ошибки ожидаем увидеть сообщение:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Exception in thread &quot;main&quot; java.lang.AssertionError:
Expected: person with phone 1235678
     but: was 0661234567&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начнем реализовывать метод &lt;strong&gt;hasName&lt;/strong&gt;. Стандартная реализация будет выглядеть так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def hasName(String name) {
    new TypeSafeMatcher&amp;lt;Person&amp;gt;() {
        @Override
        protected boolean matchesSafely(Person p) {
            name == p.name
        }

        @Override
        void describeTo(Description description) {
            description.appendText(&quot;a Person with name &quot;).appendValue(name)
        }

        @Override
        protected void describeMismatchSafely(Person person, Description mismatchDescription) {
            mismatchDescription.appendText(&quot;was &quot;).appendValue(person.name)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ничего особо военного, анонимный метод и реализация трех методов - не слишком в стиле Groovy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте же поправим это все. Groovy крут из-за такой его возможности, как metaprogramming. Прибегая к чудесам метапрограммирования, мы можем в классе &lt;strong&gt;Description&lt;/strong&gt; переопределить метод leftShift:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;Description.metaClass.leftShift = { text -&amp;gt;
    delegate.appendText(text.toString())
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь, используя полученный метод &amp;lt;&amp;lt;, напишем наш матчер:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static hasName(String name) {
    [
       matchesSafely: { name == it.name },
       describeTo: { it &amp;lt;&amp;lt; &quot;a person with name&quot; + name },
       describeMismatchSafely: { item, descr -&amp;gt; descr &amp;lt;&amp;lt; &quot;was &quot; + item.name }
    ] as TypeSafeMatcher&amp;lt;Person&amp;gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Оба-на! кода стало в разы меньше и его читаемость улучшилась. Правда ухудшилась степень понимания, особенно если вы не знаете таких слов, как Closure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;От себя хочу добавить, что подход с реализацией интерфейса через Map в случае с тремя методами не очень удачен, вот если бы у нас был один метод, тогда бы было все очень красиво и просто.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте же посмотрим на упрощение реализации с тремя методами. Реализовываем класс GroovyMatcher&amp;lt;T&amp;gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;abstract class GroovyMatcher&amp;lt;T&amp;gt; extends TypeSafeMatcher&amp;lt;T&amp;gt; {
    private Description description = new StringDescription()
    private Description mismatchDescription = new StringDescription()

    @Override
    boolean matchesSafely(T item) {
        match(item, description, mismatchDescription)
    }

    @Override
    void describeTo(Description description) {
        description &amp;lt;&amp;lt; this.description
    }

    @Override
    void describeMismatchSafely(T item, Description mismatchDescription) {
        mismatchDescription &amp;lt;&amp;lt; this.mismatchDescription
    }

    abstract boolean match(T item, Description description, Description mismatchDescription)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все достаточно стандатно, но давайте теперь применим магию Groovy. В написанном нами классе GroovyMatcher нам нужно реализовать всего один абстрактный метод match. Пишем матчер для проверки номера телефона withPhone:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;static withPhone(String actual) {
        { item, description, mismatchDescription -&amp;gt;
            def expected = item.phone
            description &amp;lt;&amp;lt; &quot;person with phone &quot; | actual
            mismatchDescription &amp;lt;&amp;lt; &quot;was &quot; | expected
            actual == expected
        } as GroovyMatcher&amp;lt;Person&amp;gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как вы можете заметить, мы использовали мощь Groovy и реализовали абстрактный метод через closure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Перед подведением итогов и определением, какой-же подход лучше, хочу поделиться собственным опытом написания ExtentionModule.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Дабы не переживать по поводу метапрограммирования, можно написать &lt;strong&gt;ExtentionModule&lt;/strong&gt; для нашего Description класса. Делается это так: пишем сначала класс, в котором реализовываем нужные нам методы:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class MatchersExtention {

    static Description leftShift(Description self, StringDescription desc) {
        self.appendText(desc.toString())
        self
    }

    static Description leftShift(Description desc, String text) {
        desc.appendText(text)
        desc
    }

    static Description or(Description self, String value) {
        self.appendValue(value)
        self
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее, чтобы этот класс начал работать, мы создаем в папке src/main/resources папку META-INF/services, в ней создаем файлик &lt;strong&gt;org.codehaus.groovy.runtime.ExtensionModule&lt;/strong&gt; со следующим содержанием:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;moduleName = matchers-module
moduleVersion = 1.0
extensionClasses = org.example.MatchersExtention&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все, теперь наш класс Description обзавелся поддержкой метода &lt;strong&gt;leftShift(&amp;lt;&amp;lt;)&lt;/strong&gt; и or (&lt;strong&gt;|&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так с использованием силы Groovy вы можете добавить в любой класс всяких-всячин. Даже если это класс из какой-то библиотеки!!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь давайте проанализируем подходы к написанию матчеров на Groovy. Я показал три подхода к написанию матчеров. Но какой из них лучше? Лично у меня все реализовано на данный момент через классический путь с анонимным методом. Но там куча лишнего кода и при наличии парочки таких методов в классе становится реально страшно в него заходить.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Подход c использованием Map, по моему мнению, самый классный. Магия метапрограммирования делает его очень коротким и понятным.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и наконец последний подход с применение closure. Да, этот подход элегантен, нам нужно реализовать только один метод, но зачастую проверки бывают не настолько простыми и реализация этого одного метода может наносить больше вреда чем пользы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом у меня все! Всех с наступающими праздниками и до встреч в Новом 2016 году&amp;#8230;&amp;#8203;уиииии =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.stickbutik.ru/upload/iblock/1f3/1f3417a4cb7b36be3b530db5c95a674b.png&quot; alt=&quot;1f3417a4cb7b36be3b530db5c95a674b&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Введение в нагрузочное тестирование</title>
      <link>localhost/performance-lecture/index.html</link>
      <pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">performance-lecture/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лекция, в которой я рассказываю про основы нагрузочного тестирования. В конце приведены примеры записи скриптов с помощью JMeter и Gatling&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/X5TLt2JvfoA?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Три способа поднять Jenkins CI для ваших автотестов</title>
      <link>localhost/tri-sposoba-podniat-jenkins-ci-dlia-vashikh-avtotiestov/index.html</link>
      <pubDate>Sun, 6 Dec 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">tri-sposoba-podniat-jenkins-ci-dlia-vashikh-avtotiestov/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, в которой я решил поделиться знаниями в организации CI для автотестов. Такая задача возникает практически на каждом проекте, так как автоматизация без CI сервера - это как хлеб без масла. Я уже писал про &lt;a href=&quot;http://automation-remarks.com/travis-ci-na-sluzhbie-u-avtomatizatsii/&quot;&gt;Travis CI&lt;/a&gt;, теперь посмотрим на Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.cloudbees.com/sites/default/files/Jenkins_8.png&quot; alt=&quot;Jenkins 8&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Основным источником информации относительно Jenkins является официальный сайт &lt;a href=&quot;https://jenkins-ci.org/&quot;&gt;jenkins-ci.org&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я покажу три способа запуска Jenkins CI и дам определенные советы и пояснения относительно каждого способа. Для тех же, кто не знаком с CI процессом и Jenkins, советую посмотреть видео.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, начнем с самого простого.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Способ 1: Запустить Jenkins war в консоли&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самый простой и банальный способ - скачать &lt;strong&gt;jenkins.war&lt;/strong&gt; и запустить его, как простое java приложение. Для этого нужно открыть консоль cmd Windows или terminal Unix и набрать команду:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -jar jenkins.war&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После того как выполните данную команду в вашей системе запустится jetty сервер; если в вашей консоли появилась надпись типа &lt;strong&gt;jenkins is fully configured and running&lt;/strong&gt;, значит вы смело можете открывать браузер и по стандартному пути&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;http://localhost:8080&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;у вас появится главная страница &lt;strong&gt;Jenkins&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Комментарий&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Данный способ является самым простым и самым ненадежным. Ни в коем случае не используйте его в production. Если вы закроете консоль, то ваш CI сервер свалится, информация о созданных job и установленные плагины сохранятся, вы сможете зайти на хост и снова запустить сервер таким способом, но вот захотите ли вы это делать часто - это вопрос. Данный способ больше подходит для демонстрационных случаев, либо как временная мера.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Способ 2: Запустить Jenkins на Tomcat&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самый распространенный и надежный способ - настроить Tomcat сервер и запустить Jenkins как стандартное web приложение.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скачиваем Tomcat 7 и распаковываем его в удобное для вас место. Если у вас Windows - это скорее будет корень раздела C. Проще всего сделать TOMCAT_HOME в глобальных переменных, дабы иметь доступ к Tomcat в консоли.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После того, как вы скачали Tomcat, нужно скопировать скачанный jenkins.war по пути:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;${TOMCAT_HOME}/webapps/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем перейти в папку &lt;strong&gt;${TOMCAT_HOME}/bin&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой папке вам нужно найти скрипт под названием &lt;strong&gt;catalina.bat&lt;/strong&gt; либо &lt;strong&gt;catalina.sh&lt;/strong&gt;. Далее нужно запустить этот скрипт. Для Unix это выглядит так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;${TOMCAT_HOME}/bin/catalina.sh start&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После этого вы увидите в консоли вывод типа:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;bin ➤ sh catalina.sh start
Using CATALINA_BASE:   /home/sergey/Downloads/apache-tomcat-7.0.65
Using CATALINA_HOME:   /home/sergey/Downloads/apache-tomcat-7.0.65
Using CATALINA_TMPDIR: /home/sergey/Downloads/apache-tomcat-7.0.65/temp
Using JRE_HOME:        /usr/lib/jvm/java-8-oracle
Using CLASSPATH:       /home/sergey/Downloads/apache-tomcat-7.0.65/bin/bootstrap.jar:/home/sergey/Downloads/apache-tomcat-7.0.65/bin/tomcat-juli.jar
Tomcat started.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь можете смело открывать в браузере&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;http://localhost:8080/jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вы делаете это в первый раз, то, возможно, придется немного подождать перед тем, как Jenkins станет доступен. Обычно это занимает меньше минуты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Комментарий&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как я уже говорил, это самый распространенный способ и самый надежный. Большинство java web приложений работает на Tomcat. К тому же, в случае какого-либо падения вы сможете посмотреть лог файл Tomcat и разобраться, в чем же дело. В своей практике мне приходилось разбираться один раз, да и то Tomcat упал только из-за того, что закончилось место на диске.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Способ 3: Использовать Docker контейнер&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;, ну куда же без него! Сейчас контейнеры набирают огромную популярность. Могу смело заявить, что в какой-то степени - это тренд. Если вы не знакомы с этой технологией, настоятельно рекомендую почитать и посмотреть на этого &quot;зверька&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для запуска докер контейнера у вас на компьютере должен быть предустановлен Docker. Установку смотреть &lt;a href=&quot;https://docs.docker.com/engine/installation/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь можем спокойно запускать наш контейнер.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;docker run -p 8080:8080 jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В результате выполнения этой команды Docker скачает контейнер и запустит его. Внутри контейнера находится Tomcat с предустановленным Jenkins CI. Вот и все, с Docker эта процедура выглядит очень просто.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Комментарий&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Данный способ мало в чем уступает способу с Tomcat, так как внутри контейнера находится такой же Tomcat сервер. Единственный недостаток - это то, что при падении или остановке вашего контейнера вы потеряете всю информацию. Чтобы избежать таких печальных последствий, советую детально почитать &lt;a href=&quot;https://github.com/jenkinsci/docker/blob/master/README.md&quot;&gt;документ&lt;/a&gt; и запускать контейнер такой вот командой:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;docker run -p 8080:8080 -v /your/home:/var/jenkins_home jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Таким образом все содержимое папки jenkins_home будет сохранено на вашей host машине и потери данных не произойдет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом у меня все, подписывайтесь на блог в социальных сетях и через имейл. В следующий раз я покажу как подключать и настраивать слейвы к Jenkins CI. До встреч!..&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>SQA days 18: ретроспектива</title>
      <link>localhost/sqa-days-18-retro/index.html</link>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">sqa-days-18-retro/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мне посчастливилось съездить на &lt;a href=&quot;http://sqadays.com/en/index&quot;&gt;SQA days 18&lt;/a&gt;, которая в этот раз проходила в Москве. Я опишу свой опыт и свои впечатления после посещения данного мероприятия.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://sqadays.com/files/autoupload/58/60/32/hi3eatn425022.png&quot; alt=&quot;hi3eatn425022&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, начну с того, что я совсем не собирался никуда ехать, но потом в один прекрасный день я увидел в facebook анонс SQA days 18, зашел на сайт и тыцнул кнопку &quot;Подать доклад&quot;. После определенных процедур ревью мой доклад был принят, но в запас. Это означало, что я могу поехать на конференцию на правах спикера, но выступать мог бы только в случае форс-мажора или отказа одного из участников основной сетки. Кто-то может подумать, что халява, но я был готов выступать и ехал с полноценным докладом, - так что все честно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу добавить, что это было мое первое посещение SQA days и первый визит в Москву. Мероприятие проходило практически в центре города, в большом и достаточно вместительном конференц-зале &quot;Инфопространство&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Основная программа состояла из двух дней, и содержала около 60 докладов. Я как тру автоматизатор ориентировался больше на доклады с этой тематикой. Так как на официальном сайте конференции будут появляться записи выступлений, я не хочу и не буду спойлить, опишу только три доклада, которые, по моему мнению, были самыми достойными.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Качества хорошего тест-лида&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом докладе Роман Твердохлебов поделился своим опытом работы на позиции тест-лида, дал дельные советы по управлению командами, проведению митингов и слежки за субординатами. Основная мысль, которую я для себя подчеркнул: тест-лид - это человек, который чувствует и следит за работой команды не просто сидя в кабинете, а работая бок-о-бок с этой самой командой.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Оценка качества автотестов&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Доклад, который я ждал больше всего в первый день. Алексей Баранцев рассказал о том, какие есть стандарты оценки автотестов, какие стандарты есть в отрасли и пояснил на примерах, как этими стандартами пользоваться. В докладе было мало примеров кода, но те примеры, которые были, очень четко описывали суть проблем. В целом доклад стоящий и позволяет задуматься над свойствами автотестов, которые находятся в тени и о них часто никто не заботится.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Практический опыт создания уменьшенной копии боевой инфраструктуры сайта для тестировщиков&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этим докладом завершился для меня второй день конференции и лично для меня он является лучшим. Андрей Шорин поделился опытом разворачивания инфраструктуры для тестирования в компании headhunter.ru. Словами я вряд ли передам ту атмосферу, которая царила на докладе, ведь здесь было все: полезная информация и мастерство докладчика. В целом речь шла о применении контейнеров и слаженной работе всех участников процесса dev, qa и administration. Суть же доклада крылась во фразе &quot;Тестируй как в продакшине&quot;. Основная идея - организация тест энвайромента, который на 99% копирует продакшин со всеми интеграциями и лоад беленсерами, а в самом конце были произнесены золотые слова: &quot;Тестируйте как боги&quot;. Именно этим замечательнейшим наставлением и закончилась для меня SQA days 18.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом я очень доволен посещением такого мероприятия, хочется отметить высокий профессионализм организаторов и докладчиков. Помимо докладов было очень большое количество знакомств, впечатлений, разговоров и классных идей. Теперь все они у меня в голове и ждут своей реализации =) В этом году я долго возился с докладом, но уже на SQA days 19, которая запланирована на май 2016 в Санк-Петербурге, я поставил цель выступить в основной сетке конференции. Так что от себя могу сказать: &quot;СПАСИБО, увидимся на SQA days 19. Let&amp;#8217;s go together&amp;#8230;&amp;#8203;&quot;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>6 способов работы с проперти файлами</title>
      <link>localhost/6-sposobov-raboty-s-propierti-failami/index.html</link>
      <pubDate>Sun, 22 Nov 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">6-sposobov-raboty-s-propierti-failami/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Тренинг, в котором я показываю различные способы работы с проперти файлами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/e2LWKxIwOfk?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Automation testing using JavaScript</title>
      <link>localhost/automation-testing-using-javascript/index.html</link>
      <pubDate>Sat, 21 Nov 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">automation-testing-using-javascript/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лекция, в которой показаны инструменты для автоматизации тестирования с использованием языка JavaScript. Показаны примеры с Jasmine, Protractor, PhantomJS и NightwatchJS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/ZDC4aEHwWkU?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Подборка Rest клиентов на любой случай жизни</title>
      <link>localhost/rest-clients/index.html</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">rest-clients/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, в которой я решил собрать все самые достойные, по моему мнению, библиотеки или инструменты для работы с REST сервисами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://anton.shevchuk.name/wp-content/uploads/2013/09/restful-api-460x307.jpg&quot; alt=&quot;restful api 460x307&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я уже писал подобную &lt;a href=&quot;http://automation-remarks.com/java-rest-client/&quot;&gt;заметку&lt;/a&gt;, еще когда блог только зарождался. Тогда я упоминал о двух библиотеках, сейчас же хочу расширить список. Для всех примеров я буду использовать ресурс &lt;a href=&quot;https://swapi.co/&quot; class=&quot;bare&quot;&gt;https://swapi.co/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;1. Groovy URL&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самый простой способ сделать запрос из кода - использовать Groovy URL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;def endpoint = &apos;http://swapi.co/api/planets/1/&apos;

def content = endpoint.toURL().getText(requestProperties: [&apos;User-agent&apos;:&apos;firefox&apos;,Accept: &apos;application/json&apos;,&apos;Content-Type&apos;: &apos;application/json&apos;])

def json = new JsonSlurper().parseText(content)

assert json.name == &apos;Luke Skywalker&apos;
assert json.films[0] == &apos;http://swapi.co/api/films/7/&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Здесь мы выполнили запрос, а затем с помощью &lt;strong&gt;JsonSlurper&lt;/strong&gt; распарсили его в json. В Groovy мы можем работать с json объектом как с Map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2. Groovy wslite&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще одна библиотека семейства Groovy. Здесь у вас будет полноценный rest client, с помощью которого можно будет достать все параметры ответа:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;def endpoint = &apos;http://swapi.co/api/&apos;

def client = new RESTClient(endpoint)

def response = client.get(path:&apos;people/1/&apos;,accept: ContentType.JSON,headers:[&apos;User-agent&apos;:&apos;firefox&apos;])

assert 200 == response.statusCode
assert &apos;Luke Skywalker&apos; == response.json.name&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вы наверное заметили, что с применением wslite не нужно преобразовывать ответ в json, так как объект ответа содержит в себе свойство json. Логика работы с json в этом случае аналогична случаю с URL. Вы можете использовать wslite и для работы с SOAP сервисами, примеры можно посмотреть &lt;a href=&quot;https://github.com/jwagenleitner/groovy-wslite&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;3. Rest Assured&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Rest Assured&lt;/strong&gt; - java библиотека, которая делает тестирование Rest с использованием java похожим на подход с использованием groovy. Мощнейшая библиотека, с помощью которой можно создавать тесты, которые будут понятными и легко поддерживаемыми.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.junit.Test;

import static com.jayway.restassured.RestAssured.get;
import static org.hamcrest.core.IsEqual.equalTo;

/**
 * Created by sergey on 15.11.15.
 */
public class SwapiTest {

    @Test
    public void shouldGetLuke() {
        get(&quot;http://swapi.co/api/people/1/&quot;)
                .then().statusCode(200)
                .and()
                .assertThat()
                .body(&quot;name&quot;, equalTo(&quot;Luke Skywalker&quot;));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Смотрится неплохо, внутри body можно использовать &lt;strong&gt;JsonPath&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;4. Spring RestTemplate&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Те, кто плотно работает с Java и знает, что такое Spring framework, наверняка пользовались данной библиотекой. Не хочу особо растекаться мыслями по древу, но Spring - это мощнейший фреймворк, а RestTemplate - отличнейшая библиотека, с помощью которой вы можете создавать рест клиент. Лично я на своем проекте пользуюсь именно ней.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    public void shouldGetLuke2() {
        RestTemplate restTemplate = new RestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add(&quot;User-Agent&quot;, &quot;firefox&quot;);

        HttpEntity payload = new HttpEntity(headers);

        ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.exchange(&quot;http://swapi.co/api/people/1/&quot;, GET, payload, String.class);

        assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Настроив маршалеры и маперы, вы можете легко оперировать сущностями &lt;a href=&quot;https://spring.io/guides/gs/consuming-rest/&quot;&gt;пример&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;5. Restlet&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://restlet.com/&quot;&gt;Restlet framework&lt;/a&gt; лично не пробовал, но по документации выглядит прикольно, правда очень запутано;) У него есть куча расширений, которые позволяют интегрироваться с множеством существующих фреймворков, но именно запутанность и отсутствие яркого примера на сайте меня лично отпугнули.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;6. RetroFit&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://square.github.io/retrofit/&quot;&gt;RetroFit&lt;/a&gt; смотрится достаточно симпатично, в документации очень часто проскакивает слово Android, соответственно смело могу предположить, что он ориентирован на создание легковесных rest клиентов для Android. Среди ярких отличий - возможность выполнять как синхронные, так и асинхронные вызовы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Примеры кода можно найти на сайте либо же &lt;a href=&quot;https://futurestud.io/blog/retrofit-getting-started-and-android-client/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;7. Postman&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Postman - это не фреймворк и не библиотка, а простой плагин к Chrome браузеру. Достаточно простой и удобный клиент, с помощью которого можно делать запросы прямо из браузера.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;8. httpie&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jkbrzt/httpie&quot;&gt;Httpie&lt;/a&gt; - простая утилита, написанная на Python. Эту утилиту должны оценить любители консоли. Httpie может стать полноценным заменителем curl или wget в повседневной работе. Сильно много вы из нее не выжмите, но сделать запрос или скачать файлик, при этом не запоминая кучи ключевых значений, как это нужно делать с использованием culr, вы сможете легко.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот, собственно, и все, о чем я хотел поговорить в данной заметке. Пару мыслей от себя: для java существует большое количество библиотек, на моем проекте используется Spring и все, что с ним связано, но если бы мне нужно было писать клиент вот прямо сейчас, я бы выбирал что-то из Groovy, так как там все просто, легко и быстро. До встреч&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Заметка для начинающих: о курсах</title>
      <link>localhost/zamietka-dlia-nachinaiushchikh-pro-kursy/index.html</link>
      <pubDate>Sat, 7 Nov 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">zamietka-dlia-nachinaiushchikh-pro-kursy/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давно хотел выразить свои мысли по поводу ситуации с курсами для тестировщиков, в частности - курсами для автоматизаторов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zapad24.ru/uploads/posts/2013-08/1375430184_1368701158_konsultacijas_apmacibu-iespejas_latinsoft.jpg&quot; alt=&quot;1375430184 1368701158 konsultacijas apmacibu iespejas latinsoft&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, обосную суть проблемы. Почему проблемы - поясню далее. В данный момент сфера растет большими темпами, потребность в кадрах все еще превышает количество этих самых кадров. Относительно автоматизации тестирования - эта тенденция ощущается прям на нюх. Почему? Потому что ХОРОШИХ специалистов мало, а крутых еще меньше. Раньше ведь автоматизировать начинали как? Работали мануальщиками, затем начинали автоматизировать. Да и автоматизировали на динозаврячьих технологиях типа VB script или QTP. Сейчас эти ребята уже опытные специалисты, большинство из них стали менеджерами и почивают на лаврах. А что же с подрастающим поколением? Оно все еще растет. В данный момент нужны люди со знанием Java, C#, Python. Всем нужны готовые специалисты, но готовые уже давно хотят много денег =). Получается, что автоматизаторами становятся либо те, кто не смог стать девелоперами, либо мануальщики, которые смогли что-то там выучить. И здесь ключевое слово ВЫУЧИТЬ!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Предприимчивые ребята открывают большое количество курсов, на которых обещают обучить вас всем прелестям автоматизации с нуля. И вот тут кроется самая большая неприятность для желающих - на курсах вас чему-то научат, возможно, даже приближенно нужному для рынка. Тут в силу вступает второй фактор: компании уже давно поняли, что кадров не хватает и начали готовить кадры для себя по своим обучающим программам. Им не нужны джуниоры с рынка, которые, к тому же, как правило, слабее тех, которых муштруют в аудиториях компании. Болезненно, но факт. И что же делать в такой ситуации? Выхода два: либо долбить этот тернистый путь, платить деньги, которые, возможно, себя не оправдают, либо идти учиться на курсы в компании, после которых 90% участников успешно работают и растут по карьерной лестнице. А как найти эти компании и курсы? Первый &lt;a href=&quot;http://dou.ua/lenta/articles/it-obrazovanie-v-kompaniyah-obzor-vozmozhnostej/&quot;&gt;источник&lt;/a&gt;. Лично я шел по второму пути и не вижу смысла платить деньги за эфемерные курсы, после которых у вас будет сертификат и крошечный шанс найти работу в гонке массы людей, которые окончили такие же курсы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Может показаться, что я как-то критикую курсы и пиарю компании. На самом деле это не так, я просто даю совет тем, кто не знает, как действовать. Я живу в этой сфере и знаю все внутренности.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Курсы вне компании я бы советовал тем, кто, имея постоянную работу, хочет перейти на новый уровень, либо тем, кто планирует сменить место работы&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>QAFest 2015 : ретроспектива</title>
      <link>localhost/qafest-retrospective/index.html</link>
      <pubDate>Sun, 1 Nov 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">qafest-retrospective/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, в которой я поделюсь впечатлениями о &lt;a href=&quot;http://www.qafest.com/&quot;&gt;QAFest&lt;/a&gt;, который мне посчастливилось посетить в роли спикера 31 октября 2015 года.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/qa_fest_logo.png&quot; alt=&quot;qa fest logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начну по порядку. Это первая конференция, которую мне довелось посетить, да еще и в качестве спикера. Поэтому я ждал этого события с особым чувством. Итак, мероприятие проходило в Киеве в здании кинотеатра &quot;Батерфляй&quot;. Само место проведения мне понравилось: все чисто и аккуратно, еще и недалеко от метро =) Началось все со сбора участников, печенек и других вкусностей с кофе и чаем. Затем после открытия мы разошлись по секциям слушать доклады.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Программа конференции и сетка выступлений была опубликована заранее, поэтому я уже знал, кого пойду слушать. Я сразу решил, что это будут доклады, которые ориентированы на автоматизацию.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Первый доклад - &lt;strong&gt;Per Thorsheim &quot;Lessons learned: when the worlds largest dating site got hacked&quot;&lt;/strong&gt;. Я пошел сюда в первую очередь, потому что гость был из Норвегии и хотелось послушать доклад на английском. Целью доклада было показать людям, что мы не внимательны в сети. Мы регистрируемся на разных сайтах с одним и тем же паролем и ведем себя небрежно, а затем сами от этого страдаем. Особенно мне понравилась фраза: &quot;Есть два типа интернет ресурсов: те, которые знают, что их взломали и те, которые об этом даже не догадываются.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Следующий доклад был также от иностранного гостя. &lt;strong&gt;Gáspár Nagy BDD Crash Course for testers&lt;/strong&gt;. Создатель &lt;strong&gt;Spec Flow&lt;/strong&gt; &quot;капитанил&quot; про BDD. Из этого доклада нового я ничего для себя не вынес, но зато послушал еще немного английских речей.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем я решил сделать перерыв и просто ходил и знакомился с участниками феста. Встретил новых людей, пообщался в компании Игоря Хрола и Андрея Мясникова.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее после обеда наступил мой черед.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/qa_fest_photo.jpg&quot; alt=&quot;qa fest photo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я рассказывал о реализации Allure adapter для Jbehave. Немного переживал, так как это все-таки первое выступление на &quot;большой сцене&quot;. На мой доклад пришло достаточно большое количество людей. В целом я справился и выступил достойно. Был и небольшой трабл с IE, в котором не захотел открываться Allure отчет. Я немного из-за этого приуныл, но уже по окончании выступления ко мне подходили люди и говорили, что им очень понравилось. В целом я очень доволен своим дебютом: приобрел незабываемый опыт, который можно получить только лишь принимая участие в такого рода мероприятиях.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вообще на конференции было очень много интересных докладов, но были и такие, на которых было скучно. Лично я ждал доклада Николая Алименкова. А перед этим послушал Якова Крамаренко, который рассказывал об автоматизации на разных языках. В целом доклад был очень интересный, но фраза &quot;Я могу выучить язык за ночь&quot; меня, конечно, улыбнула.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И вот после кофе-брейка пришло время выступления Алименкова. Я специально сел в первый ряд, дабы понаблюдать за докладчиком. Этот доклад я уже слушал, так как его Николай читал на SeleniumCamp. Но слушать вживую намного интереснее. В целом доклад был очень полезным и, по моему мнению, это самый интересный доклад из секции &quot;Автоматизация тестирования&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну, а самым интересным, как по мне, был доклад Глеба Бахмутова &quot;Обзор будущих технологий тестирования&quot;. Докладчик четко и ясно пояснил, какие инструменты он использует и зачем. А в самом конце он еще потролил тех, кто на собеседованиях просит протестировать карандаш. Не хочу особо много писать об этом докладе, дабы не спойлить, просто дождитесь записи и обязательно посмотрите. Уверен - вам понравится. На этом с докладами все. После было афтепати и неформальная часть. В целом конференция получилась очень хорошей. Надеюсь, увидимся в следующем году на QAFest 3, но это уже будет совсем другая история&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Travis CI на службе у автоматизации</title>
      <link>localhost/travis-ci-na-sluzhbie-u-avtomatizatsii/index.html</link>
      <pubDate>Sat, 24 Oct 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">travis-ci-na-sluzhbie-u-avtomatizatsii/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В данной заметке хочу поговорить о сервисе, который называется &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;. Достаточно интересный проект, о котором может многие и слышали, но не имели возможности попробовать. Так вот, я попробовал и мне очень понравилось, теперь поделюсь своими впечатлениями.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, начнем с самого начала. Для тех, кто не знаком с этим проектом: &lt;strong&gt;Travis CI&lt;/strong&gt; - это облачный сервис, который позволяет пользователям организовать CI процесс для своих проектов. Для того, чтобы начать пользоваться этим сервисом, нужно завести аккаунт на &lt;strong&gt;github&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее все очень просто: переходим на &lt;a href=&quot;https://travis-ci.org&quot; class=&quot;bare&quot;&gt;https://travis-ci.org&lt;/a&gt; и логинимся с помощью гитхаб.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу отметить, что Travis меня удивил простотой интеграции, ведь все, что нужно для начала работы, - просто выбрать свой репозиторий и создать в нем файл &lt;strong&gt;.travis.yml&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я экспериментировал со своим репозиторием, в котором лежит проект с Groovy репортером для Jbehave.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Travis CI поддерживает большое количество языков программирования, для полного ознакомления можно почитать &lt;a href=&quot;http://docs.travis-ci.com/user/getting-started/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мой проект написан на Groovy и собирается с помощью &lt;strong&gt;Gradle&lt;/strong&gt;. Какое удивление - &lt;strong&gt;Travis&lt;/strong&gt; умеет работать со всеми этими штуками. Все, что нужно, - просто указать в созданном файле &lt;strong&gt;.travis.yml&lt;/strong&gt; пару строк:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;language: groovy
jdk:
 - oraclejdk7
branches:
 only:
 - master&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Идем в Travis CI &lt;a href=&quot;https://travis-ci.org/profile/${username}&quot; class=&quot;bare&quot;&gt;https://travis-ci.org/profile/${username}&lt;/a&gt; и среди своих репозиториев выбираем нужный и включаем его в билд процесс.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем меняем в нашем проекте любой файлик, коммитим, пушим и начинается магия. Travis сам понимает, какого рода проект и какой инструмент сборки использовать. Буквально через пару секунд он начинает собирать ваш проект.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В моем случае я наткнулся на одну неприятность: первая сборка завершилась неуспехом =) Проблемой было то, что у тревиса не было прав на вызов команды gradlew. Исправляется это тем, что в наш файл &lt;strong&gt;.travis.yml&lt;/strong&gt; нужно добавить строчку:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;before_install:
 - chmod +x gradlew&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для тех, кто знаком с unix системами, эта команда достаточно знакома: она дает права на запуск команды gradlew.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По умолчанию Travis запускает команду gradlew assemble; если вы хотите переопределить такое поведение, то вам нужно дописать еще пару строк в .yml файл:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;install: true
script: &quot;./gradlew build -x copyDistFiles&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот и все. Теперь наш проект собирается и завершается успехом.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь поговорим о тех, кому эта штука может быть полезна. В первую очередь тем, кто пишет свои проекты и не хочет особо париться с настройкой полноценного CI сервера - это очень удобно. Автоматизаторов же должна заинтересовать такая функциональность &lt;a href=&quot;http://docs.travis-ci.com/user/gui-and-headless-browsers/&quot;&gt;GUI and Headless Browser Testing&lt;/a&gt;. В документации указано, что можно запускать тесты с помощью Sauce Labs, xvfb и phantomjs. Крутяк, да? Эта штука поможет сэкономить кучу времени на настройку энваромента. Попробуйте - и вам понравится.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Книги, обязательные к прочтению автоматизатору</title>
      <link>localhost/knigi-aqa/index.html</link>
      <pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">knigi-aqa/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Продолжение цикла под названием &quot;Как развиваться тестировщику&quot;. В прошлых заметках вы узнали, &lt;a href=&quot;http://automation-remarks.com/kak-razvivatsia-tiestirovshchiku-razbiraiemsia-s-linux/&quot;&gt;как изучить Linux&lt;/a&gt;. Теперь напишу о том, какие книги было бы полезно почитать автоматизаторам.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://sportkniga.com.ua/images/books228577dtg3.jpg&quot; alt=&quot;books228577dtg3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Первая книга - &lt;strong&gt;&quot;xUnit Test Patterns&quot;&lt;/strong&gt;. Почему именно эта книга? Потому что в ней очень хорошо и понятно описывается, как писать Unit тесты. Описаны основные ошибки при написании тестов и приведены шаблоны для наиболее общих случаев. В целом, после прочтение этой книги я пересмотрел свой стиль написания тестов и кода.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://d.gr-assets.com/books/1348288284l/337302.jpg&quot; alt=&quot;337302&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Следующая книга - &lt;strong&gt;Стива Макконела &quot;Совершенный код&quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой книге очень хорошо описаны проблемы при написании кода. Эта книга поможет вам избавиться от привычки писать макаронный код. В книге есть целый раздел, в котором приведены пути решения основных проблем в написании тестов. Лично я из этой книги почерпнул некоторые советы и часто пользуюсь ими при написании &lt;a href=&quot;http://automation-remarks.com/pochemy-svoy-fremawork-ploho/&quot;&gt;фреймворков&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://v673.com/wp-content/uploads/1001320063.jpg&quot; alt=&quot;1001320063&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу также упомянуть о книге &lt;strong&gt;Чистый код&lt;/strong&gt; от &lt;strong&gt;Боба Мартина&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вы ни разу не слышали о дядюшке Бобе, то я настоятельно рекомендую загуглить и ,конечно, прочитать его книги. Одна из них - &quot;Чистый код&quot;. Отличное чтиво, во время знакомства с которым у вас возникнет понимание, что код, который вы пишете, чистым назвать сложно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://static2.ozone.ru/multimedia/books_covers/c300/1001563239.jpg&quot; alt=&quot;1001563239&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и последняя книга - &lt;strong&gt;Мартина Фаулера &quot;Рефакторинг&quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://ab.kh.ua/wp-content/uploads/2013/12/%D0%9C%D0%B0%D1%80%D1%82%D0%B8%D0%BD-%D0%A4%D0%B0%D1%83%D0%BB%D0%B5%D1%80-%D0%A0%D0%B5%D1%84%D0%B0%D0%BA%D1%82%D0%BE%D1%80%D0%B8%D0%BD%D0%B3-%D1%83%D0%BB%D1%83%D1%87%D1%88%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81%D1%83%D1%89%D0%B5%D1%81%D1%82%D0%B2%D1%83%D1%8E%D1%89%D0%B5%D0%B3%D0%BE-%D0%BA%D0%BE%D0%B4%D0%B0.jpg&quot; alt=&quot;%D0%9C%D0%B0%D1%80%D1%82%D0%B8%D0%BD %D0%A4%D0%B0%D1%83%D0%BB%D0%B5%D1%80 %D0%A0%D0%B5%D1%84%D0%B0%D0%BA%D1%82%D0%BE%D1%80%D0%B8%D0%BD%D0%B3 %D1%83%D0%BB%D1%83%D1%87%D1%88%D0%B5%D0%BD%D0%B8%D0%B5 %D1%81%D1%83%D1%89%D0%B5%D1%81%D1%82%D0%B2%D1%83%D1%8E%D1%89%D0%B5%D0%B3%D0%BE %D0%BA%D0%BE%D0%B4%D0%B0&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще одна книга от еще одного знаменитого человека в сфере программирования. Если вы не слышали имени этого человека, то настоятельно рекомендую познакомиться с его книгами. В целом книга хорошо описывает стандартные антипаттерны и после ее прочтения вы научитесь понимать, как писать и переписывать код так, чтобы он был легко читаем и его было легко поддерживать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и последняя в этой заметке - &lt;strong&gt;Gojko Adzic: Fifty Quick Ideas to Improve Your Tests&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51DlCCMPOoL._SY498_BO1,204,203,200_.jpg&quot; alt=&quot;51DlCCMPOoL. SY498 BO1,204,203,200 &quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сам я ее пока не читал, но уважаемые люди советовали и в интернетах о ней очень положительные отзывы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот, собственно, и все на этот раз. Многие могут сказать, что большинство этих книг о написании кода и больше о программировании.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Автоматизатор, который не умеет программировать. Кто он?</title>
      <link>localhost/avtomatizator-kotoryi-nie-umieiet-proghrammirovat/index.html</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">avtomatizator-kotoryi-nie-umieiet-proghrammirovat/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, в которой попробуем разобраться в реалиях современности и попробуем дать ответ на вопрос: должен ли тестировщик, у которого на табличке написано &quot;Software Test Automation Engineer&quot; уметь программировать?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.towave.ru/sites/default/files/imagecache/250x200/_250developer.png&quot; alt=&quot; 250developer&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Существует достаточно много мнений, кто же такие эти люди - автоматизаторы. Достаточно крепко эта тема перетиралась на Radio QA. Но я, как человек идейный, попытаюсь обрисовать свою точку зрения. Итак, начну с того, что оговорка &quot;все зависит от проекта&quot; - не принимается. Если у тебя на табличке написано Test Automation, но в реальности 80% времени ты занимаешься мануальщиной, гоняешь регрессию и обновляешь тест кейсы, то, увы, друг мой, ты далек от автоматизации. Возьмем два кардинально разных примера: автоматизатор, работающий в команде только с мануальщиками, и автоматизатор, работающий в команде с программистами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Так вот, в первом случае вы будете явно выделяться, так как вы технически подкованнее и команда не будет особо вдаваться в то, что вы там клепаете. Главное, чтобы отчеты о прогоне тестов приходили вовремя и руками проверять нужно было меньше. В общем те, кто работает в такой команде долго, могут почувствовать, что они достигли вершины и будут немного деградировать в техническом плане. Возможно даже, что сменить проект будет не так легко, так как у вас есть опыт, но технически вы уже староваты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Во втором случае в команде на вас будут смотреть немного свысока, так как всея господа разработчики и кодопись - это ж типа неотъемлемые вещи. Но я бы сильно по этому поводу не расстраивался, ведь, чтобы вас зауважали, нужно показать, что вы действительно крутой парень. Тем более, если и учиться писать код, то у разработчиков. В такой команде вам нужно будет показать, что вы делаете вещи, без которых команде будет тяжело поддерживать качество продукта на должном уровне. Более того, если вы технически сильно подкованы, вам будет легче работать в команде, так как вы будете находить общий язык и понимать что Spring - это вовсе не то, о чем вы подумали =) В команде разрботчиков у вас больший шанс развиваться технически и следить за техническими новинками.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, что мы имеем на выходе в обоих случаях - автоматизаторы занимаются техническими вещами. И там и там нужно уметь писать код. Умение писать код позволит вам приобрести уверенность в том, что вы можете решать сложные технические задачи. Это зачастую начнет ярко проявляться, когда вам нужно будет предлагать решения для Автоматизации. Выбор инструментов и подходов, что лучше выбрать - Junit или TestNG.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В общем, по моему личному мнению, автоматизаторы - это больше программисты с уклоном на тестирование. Эти люди обязаны уметь писать код и быть технически подкованными в технологиях и языках программирования, с которыми они работают.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;А что касается автоматизатора, который не умеет программировать, - ну так он вовсе и не автоматизатор. Возможно, где-то в глубине души он и считает себя таким, но чтобы желаемое стало действительным, ему осталось сделать совсем небольшой шаг - научиться хорошо программировать ;)&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Как развиваться тестировщику. Разбираемся с Linux.</title>
      <link>localhost/kak-razvivatsia-tiestirovshchiku-razbiraiemsia-s-linux/index.html</link>
      <pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">kak-razvivatsia-tiestirovshchiku-razbiraiemsia-s-linux/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, которая будет продолжением серии &quot;Как развиваться начинающим тестировщикам&quot;. Ранее я писал про &lt;strong&gt;Groovy&lt;/strong&gt;, теперь хочу поделиться опытом изучения &lt;strong&gt;Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://prach.poltava.ua/images/stories/logoLinux.png&quot; alt=&quot;logoLinux&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте разберемся, нужно ли вообще тестировщикам знать Linux? Конечно же ответ зависит от многих факторов. Первый из них: есть ли у вас на проекте машины или сервера с *nix на борту ? Если нет, то можете закрывать страницу и наслаждаться жизнью, унывая за рабочим столом &lt;strong&gt;Windows 10&lt;/strong&gt; ;) Но, если у вас есть все-таки поддержка *nix платформ и вы не унылый овощ, то вам следует разобраться с &lt;strong&gt;Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично мое знакомство c Linux началось с того, что у нас на проекте было 4 машинки и на всех стоял разный дистрибутив IBM AIX, Solaris, Red Hat Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Дабы не быть полным профаном, я решил себе дома установить тогда еще &lt;strong&gt;Ubuntu 12.04 LTS&lt;/strong&gt;, чтобы начать разбираться с системой и учить команды. Это была кардинальная перемена, меня затянуло и до сих пор у меня дома стоит Ubuntu, и на все возгласы по поводу выхода новых версий &lt;strong&gt;Windows&lt;/strong&gt; я даже не парюсь.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Чисто в образовательных целях можете установить себе &lt;strong&gt;Ubuntu&lt;/strong&gt; на виртуальную машину. Сделать это максимально быстро можно с помощью &lt;a href=&quot;http://automation-remarks.com/vagrant/&quot;&gt;Vagrant&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее стоит задача в изучении команд, которые поддерживаются командной оболочкой. Конечно же всегда можно посмотреть в гугл, но все же самые основные нужно выучить. На собеседованиях гугл не поможет=).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я бы рекомендовал почитать книгу - &lt;strong&gt;Скотта Граннеманна&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://book2.me/f/LinuxSprav2010.jpg&quot; alt=&quot;LinuxSprav2010&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отличнейшая книга, которую я прочел на одном дыхании. Идеально подходит для изучения всех самых известных команд &lt;strong&gt;Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вторая книга, которую я бы посоветовал тем, кто уже немного знаком с системой и хочет понять все ее внутренности, - &lt;strong&gt;How Linux Works: What Every Superuser Should Know&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.allitebooks.com/wp-content/uploads/2015/04/How-Linux-Works-200x250.jpg&quot; alt=&quot;How Linux Works 200x250&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Под конец, для тех, кто уже хочет научиться писать Bash скрипты:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51EjC-yjBKL._SX403_BO1,204,203,200_.jpg&quot; alt=&quot;51EjC yjBKL. SX403 BO1,204,203,200 &quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Последнюю книгу полностью не читал, но могу сказать, что издательство apress всегда издает стОящие книги.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и напоследок на обучающей платформе edx есть полезный курс - &lt;strong&gt;Introduction to Linux&lt;/strong&gt;. Этот курс дает практические знания графической оболочки и командной строки для всех самых распространенных дистрибутивов Linux. Лично я его прошел и получил сертификат;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Удачного изучения и до встреч.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Парсим командную строку с Groovy CliBuilder</title>
      <link>localhost/parse-command-line/index.html</link>
      <pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">parse-command-line/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой заметке хочу снова затронуть тему Groovy. Эта заметка будет ярким дополнением к уже написанным ранее:
&lt;a href=&quot;http://automation-remarks.com/learning-groovy/&quot;&gt;о ресурсах, на которых можно найти много интересного про Groovy&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.primalsecurity.net/wp-content/uploads/2014/08/terminal-md.png&quot; alt=&quot;terminal md&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, начнем с постановки задачи! Приходилось ли вам когда-нибудь писать свои библиотеки? А какие-нибудь утилиты, которые нужно запускать из командной строки?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот мне приходилось! В частности &lt;strong&gt;JBehave&lt;/strong&gt; reporter работает именно через командную строку. Теперь давайте подумаем, каким образом можно передавать параметры в наш jar файл, используя командную строку? Правильно - через аргументы командной строки, задавая VM options либо Program arguments. И вот если с VM options все более-менее понятно, то с вариантом аргументов приходится повозиться. Именно этот случай и рассмотрим.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, давайте зададимся начальными условиями: чего хотим? Хотим передавать параметры в jar файл в любой последовательности и не переживать, что у нас что-то пойдет не так.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Будем смотреть на примере репортера. Раньше он запускался так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;java -jar reporter.jar D:\\jbehave D:\\report&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом примере наглядно видно, что если поменять параметры местами, то все сломается; да и вообще человеку, который не писал эту штуку, будет непонятно, с какими аргументами ее запустить.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Чтобы исправить эти неудобства, я использовал библиотеку, которая называется &lt;strong&gt;Groovy CliBuilder&lt;/strong&gt;. С ее помощью можно легко парсить аргументы командной строки.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В результате применения этой библиотеки у нас должно получиться такое вот:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;java -jar reporter.jar -g D:\\jbehave -d D:\\report&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Казалось бы, добавилось всего две буквы, но на самом деле изменилось многое. Харош говорить - смотрим в код.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;private static parse(String[] args) {
        def cli = new CliBuilder(usage: &apos;reporter [options]&apos;)

        cli.with {
            h longOpt: &apos;help&apos;, &apos;Show usage information&apos;
            g longOpt: &apos;generate report&apos;, required: true, args: 1, &apos;Generate report based on files from folder&apos;
            d longOpt: &apos;report folder&apos;, args: 1, &apos;Generated report path&apos;
        }

        def options = cli.parse(args)

        // print usage if -h, --help, or no argument is given
        if (!options || options.h) {
            cli.usage()
            System.exit(1);
        }

        options
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этот кусок кода анализирует наш массив входных параметров и возвращает так называемые опции. На самом деле опции - не что иное, как Map ;). Но самая приятная вещь этой штуки скрывается вот в чем: если мы не передадим никаких параметров или передадим их неправильно, то вместо ужасного стектрейса у нас выведется такое вот сообщение:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;image::/images/ter.png&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Обратите внимание на понятность сообщения. Любой, прочитав его, сможет понять, какие параметры доступны и за что они отвечают.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В самом же коде все предельно просто: чтобы достать значение любого ключа, нужно просто написать:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;def folderPath = options.d
def sourceFiles = options.g&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь вы можете не переживать за порядок передачи аргументов через командную строку.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; Для чистой &lt;strong&gt;Java&lt;/strong&gt; есть реализация подобной библиотеки, называется она &lt;strong&gt;Apache Commons Cli&lt;/strong&gt;.
На этом все. До новых заметок.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Запускаем JBehave из Gradle</title>
      <link>localhost/zapuskaiem-jbehave-iz-gradle/index.html</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">zapuskaiem-jbehave-iz-gradle/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я уже достаточно прилично заметок написал про &lt;strong&gt;JBehave&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В принципе существует много мнений относительно BDD: кто-то вражески настроен против него, кому-то он кажется слишком сложным; но я с ним работаю уже больше 2х лет и мне он нравится. В частности, тесты, написанные для REST сервисов, упрощают понимание того, что они вообще тестируют.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но вот есть определеннного рода трудность - настройка &lt;strong&gt;JBehave&lt;/strong&gt; и &lt;strong&gt;Gradle&lt;/strong&gt;. Именно этот момент я и попытаюсь прояснить в данной заметке.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, при настройке &lt;strong&gt;Jbehave&lt;/strong&gt; самое сложное - конфигурация тест раннера. Почему? Потому что кода много:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.copyright.rup.ecom.tests.runner;

import static org.jbehave.core.io.CodeLocations.codeLocationFromClass;
import static org.jbehave.core.reporters.Format.CONSOLE;
import static org.jbehave.core.reporters.Format.HTML;
import static org.jbehave.core.reporters.Format.XML;

import com.copyright.rup.ecom.tests.custom.CustomStoryReporter;

import org.jbehave.core.ConfigurableEmbedder;
import org.jbehave.core.configuration.Configuration;
import org.jbehave.core.configuration.MostUsefulConfiguration;
import org.jbehave.core.embedder.Embedder;
import org.jbehave.core.embedder.StoryControls;
import org.jbehave.core.failures.FailingUponPendingStep;
import org.jbehave.core.io.LoadFromClasspath;
import org.jbehave.core.io.StoryFinder;
import org.jbehave.core.reporters.CrossReference;
import org.jbehave.core.reporters.StoryReporterBuilder;
import org.jbehave.core.steps.InjectableStepsFactory;
import org.jbehave.core.steps.ParameterConverters;
import org.jbehave.core.steps.ParameterConverters.EnumConverter;
import org.jbehave.core.steps.spring.SpringStepsFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;

import java.util.Arrays;
import java.util.List;

/**
 * Created by Serhii_Pirohov on 07.07.2015.
 */
public class StoryRunnerConfig extends ConfigurableEmbedder {

    private static final String CLASSPATH_APPLICATION_XML = &quot;classpath:application.xml&quot;;
    private static final int STORY_TIMEOUT_IN_SECS = 12000000;

    private CrossReference crossReference = new CrossReference().withJsonOnly()
        .withOutputAfterEachStory(true);

    @Override
    public void run() {
        Embedder embedder = configuredEmbedder();
        embedder.useMetaFilters(getMetaFilters());
        embedder.embedderControls().doIgnoreFailureInStories(true)
            .doIgnoreFailureInView(false)
            .useStoryTimeoutInSecs(STORY_TIMEOUT_IN_SECS);
        try {
            embedder.runStoriesAsPaths(storyPaths());
        } finally {
            embedder.generateCrossReference();
        }
    }

    private List&amp;lt;String&amp;gt; getMetaFilters() {
        String metaFiltersProperty = System.getProperty(&quot;metaFilters&quot;, &quot;&quot;);
        String[] split = metaFiltersProperty.split(&quot;,&quot;);
        return Arrays.asList(split);
    }

    @Override
    public Configuration configuration() {

        ParameterConverters parameterConverters = new ParameterConverters();
        // factory to allow parameter conversion and loading from external
        // resources (used by StoryParser too)
        parameterConverters.addConverters(new EnumConverter());
        return new MostUsefulConfiguration()
            .useStoryControls(
                new StoryControls().doSkipScenariosAfterFailure(false))
            .usePendingStepStrategy(new FailingUponPendingStep())
            .useStoryLoader(new LoadFromClasspath(getClass()))
            .useStoryReporterBuilder(new StoryReporterBuilder().withReporters(new CustomStoryReporter())
                    .withFormats(CONSOLE, HTML, XML).withCrossReference(crossReference)
                    .withRelativeDirectory(&quot;../build/jbehave&quot;)
            )
            .useParameterConverters(parameterConverters)
            .useStepMonitor(crossReference.getStepMonitor());
    }

    @Override
    public InjectableStepsFactory stepsFactory() {
        ApplicationContext ctx = new GenericXmlApplicationContext(
            CLASSPATH_APPLICATION_XML);
        return new SpringStepsFactory(configuration(), ctx);
    }

    /**
     * Story paths.
     *
     * @return the list
     */
    protected List&amp;lt;String&amp;gt; storyPaths() {
        String storyToInclude = &quot;**/&quot; + System.getProperty(&quot;story&quot;, &quot;*&quot;)
            + &quot;*.story&quot;;
        return new StoryFinder().findPaths(codeLocationFromClass(getClass()).getFile(), storyToInclude, null);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но при настройке с &lt;strong&gt;Gradle&lt;/strong&gt; загвоздка заключается в правильном написании task в &lt;strong&gt;build.gradle&lt;/strong&gt; файле.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, идем в &lt;strong&gt;build.gradle&lt;/strong&gt; файл, создаем там task для запуска &lt;strong&gt;BDD&lt;/strong&gt; тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;task(type: Test, &apos;bddTest&apos;) {
    description &apos;Runs the BDD tests&apos;

    // Use properties for filtering stories
    systemProperty &quot;metaFilters&quot;, System.getProperty(&quot;filter&quot;, &quot;&quot;)
    systemProperty &quot;story&quot;, System.getProperty(&quot;story&quot;, &quot;*&quot;)

    /*
     * JBehave requires the Maven&apos;s &quot;target&quot; folder in order
     * to obtain the absolute path from relative path.
     */
    doFirst {
        file(&apos;target&apos;).mkdirs();

        copy {
            from(zipTree(jarPath(&quot;jbehave-core&quot;))) {
                include &quot;style/*&quot;
            }
            into(&quot;build/jbehave/view&quot;)

        }
        copy {
            from(zipTree(jarPath(&quot;jbehave-site-resources&quot;))) {
                include &quot;js/**/*&quot;
                include &quot;style/**/*&quot;
                include &quot;images/*&quot;
            }
            into(&quot;build/jbehave/view&quot;)
        }

    }

    doLast {
        file(&apos;target&apos;).delete();
    }
}

def jarPath(String jarName) {
    configurations.testCompile.find({ it.name.startsWith(jarName) }).absolutePath
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот, собственно, на этом и все =)&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Почему фразу &quot;Мы будем писать свой тестовый фреймворк&quot; нужно произносить шепотом</title>
      <link>localhost/pochemy-svoy-fremawork-ploho/index.html</link>
      <pubDate>Sat, 12 Sep 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">pochemy-svoy-fremawork-ploho/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Достаточно интересная тема, на которую я попробую покумекать. Задумайтесь, сколько интересного скрывается под фразой &quot;Мы пишем тестовый фреймворк!&quot;. Хм&amp;#8230;&amp;#8203; звучит почти как &quot;мы строим Вавилонскую башню&quot;. Хотяяя, ее судьба всем известна.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://900igr.net/datai/istorija/Vavilon/0010-010-Vavilonskaja-bashnja.jpg&quot; alt=&quot;0010 010 Vavilonskaja bashnja&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вообще само словосочетание &quot;Тестовый фреймворк&quot; звучит красиво. Все джуниоры мечтают о том, чтобы увидеть это чудо света - фреймворк. Все мидлы стремятся к тому, чтобы сделать архитектурный вклад или переворот в нем. Ну и наконец, каждый синьор, прийдя на проект, начинает осуществлять все свои заветные мечты при написании самого прекрасного и полезного фреймворка. Сейчас все, у кого самооценка завышена, должны запищать и закрыть страницу.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/svoi_framework.jpg&quot; alt=&quot;svoi framework&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На самом же деле надобность написания фреймворков отпала. Сейчас есть куча готовых инструментов, которые можно брать и использовать. Взять тот же Selenide, Serenity или Geb. Зачем писать свою убогую копию, тратить время, если все равно получится хуже. Почему? Потому что, как правило, в скрам командах на создание того самого фреймворка отводят 3 спринта, а это примерно 1,5 месяца. Создать за полтора месяца такую же качественную либу - почти невозможно. Это не реклама - это горькая реальность.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще один довод в пользу &quot;не писать свое&quot;. Какая основная задача автоматизации тестирования? Правильно - уменьшение затрат времени на ручное тестирование и автоматизация рутинных операций. Основная цель создания тестового фреймворка - это упрощение создания этих самых тестов. Фреймворк должен позволять быстро и легко создавать тесты. Если у вас есть готовый фреймворк и вы пишете меньше чем два UI теста в день - то это момент, над которым нужно подзадуматься.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и последнее. Главный риск при написании своих фреймворков - это код ради кода. Создание проекта, который будет не в качестве помощника основному проекту, а создание монстра, который будет сжирать время и ресурсы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но! Я тоже был таким же, читал книги по паттернам, учил языки программирования и писал всякие штуки. Хотя, че писал? Пишу и буду писать, только буду делать это на основе готовых библиотек и качественных решений. Спасибо за внимание.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Как развиваться тестировщику. Учим Groovy за 15 минут</title>
      <link>localhost/learning-groovy/index.html</link>
      <pubDate>Tue, 8 Sep 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">learning-groovy/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой заметке я поделюсь своими наработками и материалами, с помощью которых вы сможете легко и быстро освоить этот язык.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://cdn.liviutudor.com/wp-content/uploads/2015/05/groovy-lang-300x150.png&quot; alt=&quot;groovy lang 300x150&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, самый первый источник знаний - это вебсайт &lt;a href=&quot;http://www.groovy-lang.org/&quot; class=&quot;bare&quot;&gt;http://www.groovy-lang.org/&lt;/a&gt;. Кстати, когда &lt;strong&gt;Groovy&lt;/strong&gt; перешел под опеку &lt;strong&gt;Apache&lt;/strong&gt;, сайт сильно преобразился. Здесь в разделе документации вы можете найти уйму полезной информации.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Следующим этапом идет книга - &lt;strong&gt;Mining Groovy In Action&lt;/strong&gt;. &lt;a href=&quot;https://www.manning.com/books/groovy-in-action-second-edition&quot;&gt;Ссылка&lt;/a&gt; на книгу для заинтересовавшихся. Хочу отметить, что лично я, изучая какую-то технологию, всегда ищу книги данного издательства. Книга позволит вам пройтись по синтаксису от самых начальных синтаксических конструкций до примеров кода из реальных проектов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но книги книгами, а интернет богат кучей материалов. В частности, самым большим ресурсом c множеством полезных советов является &lt;a href=&quot;http://mrhaki.blogspot.com/&quot;&gt;Groovy Goodness&lt;/a&gt;. Сам являюсь подписчиком данного блога. В дополнение, автор выкладывает все примеры на &lt;a href=&quot;https://github.com/SergeyPirogov/Groovy-Goodness&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И напоследок &lt;strong&gt;Youtube&lt;/strong&gt; канал &lt;a href=&quot;https://www.youtube.com/channel/UC7wUp2KIa1hoMNn0r7JUVEg&quot;&gt;GR8Conf&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Собственно из качественных ресурсов, которые я знаю, это все. От себя хочу добавить, что со знаниями &lt;strong&gt;Java&lt;/strong&gt; изучить &lt;strong&gt;Groovy&lt;/strong&gt; действительно можно за 15 минут. Успешного обучения и удачи. Подписывайтесь, чтобы держать руку на пульсе.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Автоматизация тестирования, обмен опытом и полезные увлечения</title>
      <link>localhost/person-of-the-month/index.html</link>
      <pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">person-of-the-month/index.html</guid>
      	<description>
	&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/epam_photo.jpg&quot; alt=&quot;epam photo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Сережа, ты начал свою карьеру в ЕРАМ в первом наборе автоматизаторов весной 2013 года. Расскажи, пожалуйста, о своем опыте и росте в рамках компании.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я пришел на курсы в ЕРАМ молодым, перспективным айтишником, жаждущим новых знаний и навыков. Тогда было трудно и тренерам, и студентам, потому как это был первый набор и опыта не хватало всем. Но я горжусь тем, что мы справились с трудностями и прошли в продакшн. Важно отметить, что мы были не только первым набором автоматизаторов, но и теми, на ком испытывали первую CDP программу для автоматизаторов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сейчас я принимаю активное участие в CDP программе для нынешних выпускников Пре-продакшна в роли ментора и лектора. Если говорить об опыте, то выйти из Пре-продакшна и попасть на настоящий проект было немного страшновато: «старые волки» там с удивительной легкостью делали то, на что у меня уходило по полтора, а то и два дня :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что касается роста, то я одним из первых из нашего набора перешел на позицию Software Test Automation Engineer, и на меня возложили ответственность за управление автоматизацией тестирования на проекте ALG-RISK. Именно на этом проекте мне выпала возможность побывать и поработать в офисе IBM в Торонто. А сейчас на проекте CCC мне предстоит организовать автоматизированное тестирование на одном из подпроектов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Почему ты изначально выбрал для себя направление автоматизированного тестирования?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вопрос, который чаще всего задают автоматизаторам :) Просто так сложилось. До ЕРАМ я писал код для баз данных Oracle и немного знал С#. В ЕРАМ меня обратили в другую &quot;веру&quot;. Сейчас я пишу на Java, и мне это нравится. Сегодня автоматизация – это тренд, и я не жалею, что выбрал этот путь.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Помимо работы на продакшне ты читаешь лекции студентам. Видишь ли ты разницу между каждым новым набором Пре-продакшна?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Разница заметна, ведь сейчас ребят учат большему стеку технологий. Если нашему, первому набору многому приходилось учиться с нуля прямо на проекте, то сейчас выпускники Пре-продакшна в основном приходят на проект набираться практического опыта при работе с инструментами. Это позволяет им быстрее влиться в процесс, да и облегчает работу менторам.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/ibm.jpg&quot; alt=&quot;ibm&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Твой блог - &lt;a href=&quot;http://automation-remarks.com/&quot; class=&quot;bare&quot;&gt;http://automation-remarks.com/&lt;/a&gt; - недавно посетил 10 000-й пользователь. Давно ли ты ведешь этот сайт, и стал ли он для тебя больше, чем хобби?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;История создания automation-remarks.com – это как путь от заметки в школьной стенгазете до авторской колонки в серьёзном издании :) в области автоматизации тестирования. Идея создания блога родилась у меня в ноябре прошлого года. Изначально я написал “Привет, мир!” и забросил его. В свободное время просто игрался с версткой и разными штуками из обасти JQuery. Параллельно создавал контент, делал заметки. И выглядело это все ужасТно ;D Сделать из этого ужаса полноценный блог меня вдохновил мой друг. Он сказал, что я пишу полезные вещи, и людям это будет интересно. Было страшно, но я вывел блог в большой мир и назвал “Заметки Автоматизатора”. В общем, все началось с трех пользователей, а по состоянию на сегодня блог посетило уже больше 10500 читателей. 6 моих заметок были опубликованы в QA дайджестах на dou.ua. Могу с уверенностью сказать, что на сегодня блог - уже не просто хобби. Сайт стал площадкой для общения, обмена опытом и установления новых полезных знакомств и связей.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Какой опыт, полученный на сегодняшний день на продакшне, ты можешь назвать самым ценным?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В ноябре 2014 я попробовал себя в роли ментора для команды из 6 человек. Мы делали внутренний проект, на котором я приобрел полезный опыт командной работы. А вообще весь опыт работы в ЕРАМ ценен.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Какие планы ты строишь на ближайшее время?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ближайшая цель - стать первым в харьковской локации выпускником пре-продакшна среди автоматизаторов, кто прошел путь от &lt;strong&gt;Student&lt;/strong&gt; до &lt;strong&gt;Senior Software Test Automation Engineer&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Поговорим о неформальном :) Как ты любишь проводить свои выходные?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как среднестатистический житель нашей страны.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Набор опций самый разнообразный: от режима «couch potato» до походов в спортзал и пеших прогулок по 2-3 часа. А еще у меня есть котейка, которая не дает скучать (она, можно сказать, тоже часть компании, так как мы ее подобрали в Краснокутске, когда были на экскурсии с командой коллег из ЕРАМ). Ну и выходные - это единственная возможность съездить на малую родину к родителям.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Доводилось ли тебе работать не в сфере IT? Если да – расскажи, пожалуйста, о своем опыте.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;О да, имеется недолгий, но интересный опыт работы на заводе “Мивина” :) Могу гордо заявить, что интернет в их цехах появился не без моего участия.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Если не секрет, что для тебя является главной мотивацией?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сила собственного характера и поддержка родных.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- И напоследок: что ты пожелаешь тем, кто прочитал это интервью?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Оставаться на позитиве, невзирая на неработающий код ;)&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Интегрируем YAML и тестовый фреймворк</title>
      <link>localhost/yaml/index.html</link>
      <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">yaml/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Новая заметка, в которой я покажу, как можно использовать файлы с разширением .yml в качестве конфигурационых файлов для тестового фреймворка. Хочу отметить, что я уже писал на подобную тему, только &lt;a href=&quot;http://automation-remarks.com/zamienitie-property-faily-na-ghruvi-skripty/&quot;&gt;тогда&lt;/a&gt; применял &lt;strong&gt;Groovy&lt;/strong&gt; файл.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://ifireball.files.wordpress.com/2015/01/yaml-logo.png&quot; alt=&quot;yaml logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте посмотрим на суть задачи. Наверняка те, кто писал фреймворки на Java, пользовался стандартными файлами c расширением &lt;strong&gt;.proprties&lt;/strong&gt;. Наличие проперти файлов - это правило хорошего тона.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вся конфигурационная информация выносится за переделы кода, откуда ее можно легко изменять. Вот, скажем, стандартный пример из жизни: у нас есть несколько окружений, на которых мы запускаем наши тесты. Для каждого окружения нужны различные парметры: хост, порт и т.п. Зачастую люди делают либо разные проперти файлы и пишут Factory pattern для того, чтобы считывать из них информацию, либо делают один проперти файл, который зачастую выглядит так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;#dev env
dev.server.host=localhost
dev.server.port=7070

#qa env
qa.server.host=qahost
qa.server.port=8081&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем пишется все та же Factory для считывания данного файла. Чего греха таить, я, бывало, тоже такое писал. Но пришло время совершенствоваться и использовать более элегантные подходы. И здесь на помощь приходит язык разметки YAML. Что это и для чего придумано, читать в Википедии ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мы можем легко и просто использовать &lt;strong&gt;.yml&lt;/strong&gt; файлы как замену для проперти файлов c помощью библиотеки &lt;strong&gt;snakeyml&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Создаем config.yml файл:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;environment:
  dev:
    server.host: http://localhost:7070
    db.url: jdbc:usernarm:userpass@test
  qa:
    server.host: http://qa.test:8080&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь напишем класс, который будет считывать наш файл:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class YamlReader {

    public Map&amp;lt;String, Object&amp;gt; read(String path) throws IOException {
        InputStream in = Files.newInputStream(Paths.get(path));
        Yaml yaml = new Yaml();
        return (Map&amp;lt;String, Object&amp;gt;) yaml.load(in);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Читаем файл:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static void main(String[] args) throws IOException {
        YamlReader reader = new YamlReader();
        Map&amp;lt;String, Object&amp;gt; config = reader.read(&quot;src/main/resources/config.yml&quot;);
        System.out.println(config);
}

Console output:
{environment={dev={server.host=http://localhost:7070, db.url=jdbc:usernarm:userpass@test}, qa={server.host=http://qa.test:8080}}}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Нам возвращается Map, с которой мы можем дальше работать. Но здесь есть один недостаток - casting. Нам нужно кастить каждый раз, когда мы будем доставать значение из map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Есть гораздо лучшее решение. Cоздаем класс &lt;strong&gt;Configuration&lt;/strong&gt; следующего содержания:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Configuration {
    public Map&amp;lt;String,Map&amp;lt;String,String&amp;gt;&amp;gt; environment;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем метод в ридере:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public &amp;lt;T&amp;gt; T read(String path, Class&amp;lt;T&amp;gt; c) throws IOException {
        Yaml yaml = new Yaml();
        try (InputStream in = Files.newInputStream(Paths.get(path))) {
            return yaml.loadAs(in, c);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Используем новый метод для чтения проперти:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; YamlReader reader = new YamlReader();
 Configuration read = reader.read(&quot;src/main/resources/config.yml&quot;, Configuration.class);

 Map&amp;lt;String, String&amp;gt; map = read.environment.get(&quot;qa&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как вы могли заметить, второй подход более элегантен и удобен. Правда, вы не сможете использовать никакой другой конструкции, кроме Map; в первом же случае вы вольны кастить значения к тому типу, к которому душе угодно. На этом у меня все. Подписывайтесь, чтобы держать руку на пульсе.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Тюнингуем Vagrant box</title>
      <link>localhost/setting-vagrant/index.html</link>
      <pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">setting-vagrant/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В прошлой &lt;a href=&quot;http://automation-remarks.com/vagrant/&quot;&gt;заметке&lt;/a&gt; я начал разговор об инструменте под названием Vagrant. В этот раз я покажу, как работать с готовой виртуальной машиной, подключаться к ней через ssh, использовать provisioner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://noethics.net/News/images/stories/vagrant1.png&quot; alt=&quot;vagrant1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но перед тем как начать, хочу отметить, что для работы с &lt;strong&gt;Vagrant&lt;/strong&gt; активно используется консоль. Если вы работаете из-под Windows, то я бы рекомендовал перейти на &lt;strong&gt;ConsoleZ&lt;/strong&gt;. Почему? Потому, что она гораздо удобнее, чем стандартная CMD.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Настроили консоль - теперь начнем играться с &lt;strong&gt;Vagrant&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Создаем машину:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;mkdir vagrant_box
cd vagrant_box
vagrant init ubuntu/trusty64; vagrant up --provider virtualbox&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После этого запустится виртуальная машина, а в папке &lt;strong&gt;vagrant_box&lt;/strong&gt; появится файл - &lt;strong&gt;Vagrantfile&lt;/strong&gt;. Собственно в этом файле и кроется вся магия настроек виртуальной машины. Для того чтобы влючить вашу созданную машину в сеть и получать к ней доступ по сети, в &lt;strong&gt;Vagrantfile&lt;/strong&gt; нужно раскомментировать две строчки:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;config.vm.network :private_network, ip: &quot;192.168.33.10&quot;
config.vm.network :public_network&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для того, чтобы изменения вступили в силу, нужно в консоли выполнить команду:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;vagrant reload&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Подключаемся к запущенной машине:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вы можете подключаться к запущенным виртуальным машинам с помощью команд &lt;strong&gt;vagrant ssh&lt;/strong&gt; и &lt;strong&gt;vagrant rdp&lt;/strong&gt;. Лично я создавал машины на основе &lt;strong&gt;Ubuntu&lt;/strong&gt;, поэтому мой пример будет основан на этом. Находясь в папке &lt;strong&gt;vagrant_box&lt;/strong&gt;, выполните две команды:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;vagrant status&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Эта команда должна показать, что ваша машина запущена.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;vagrant ssh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По окончании выполнения последней команды вы будете подключены к виртуальной машине, после чего сможете выполнять команды, которые будут манипулировать вашей машиной.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Создаем provision:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Vagrant&lt;/strong&gt; предоставляет функциональность &lt;strong&gt;provisioning&lt;/strong&gt;. С помощью этой фичи вы можете манипулировать машиной используя &lt;strong&gt;puppet&lt;/strong&gt;, &lt;strong&gt;chef&lt;/strong&gt; или просто &lt;strong&gt;shell&lt;/strong&gt; скрипты. Я покажу пример с использованием &lt;strong&gt;shell&lt;/strong&gt; скриптов. Допустим, вы хотите, чтобы при старте машины у вас устанавливалась java. Вы можете, конечно, каждый раз выполнять одни и те же команды, а можете поступить следующим образом. Открываем &lt;strong&gt;Vagrantfile&lt;/strong&gt; и ищем раздел:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;# Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision &quot;shell&quot;, inline: &amp;lt;&amp;lt;-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если такого нету (а такое бывает), то добавляем этот кусок в наш файл и сохряняем. Для того, чтобы использовать provision для нашего случая с установкой java, мы прописываем следующее:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;config.vm.provision &quot;shell&quot;, path: &quot;java.sh&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Файл &lt;strong&gt;java.sh&lt;/strong&gt; должен лежать в папке vagrant_box рядом с Vagrantfile. Содержание файла java.sh:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;#! /usr/bin/env bash
echo &quot;Installing java 7&quot;
sudo apt-get install -y python-software-properties
sudo add-apt-repository -y ppa:webupd8team/java
sudo apt-get update

# Enable silent install
echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections
echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections

sudo apt-get install -y oracle-java7-installer

# Not always necessary, but just in case...
sudo update-java-alternatives -s java-7-oracle

# Setting Java environment variables
sudo apt-get install -y oracle-java7-set-default
echo &quot;Java 7 installation finished&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если наша машина была запущена, то нужно выполнить команду:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;vagrant reload --provision&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для случая с выключенной машиной выполняем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;vagrant up --provision&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь при запуске машины будет произведена установка oracle-java-7. Нужно отметить, что существует и другой подход написания скриптов для provision. Можно писать их прямо в &lt;strong&gt;Vagrantfile&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;config.vm.provision &quot;shell&quot;, inline: &amp;lt;&amp;lt;-SHELL
    echo &quot;Start nodejs installation&quot;
    sudo apt-get install -y curl
    curl -sL https://deb.nodesource.com/setup | sudo bash -
    sudo apt-get install -y nodejs
    sudo apt-get install build-essential
    sudo apt-get install -y npm
SHELL&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этот скрипт установит nodejs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Таким образом вы можете легко и быстро получать виртуальные машины с предустановленным ПО. В целом, поигравшись с Vagrant, могу сказать, что мне эта штука очень понравилась. На моем текущем проекте мы не нуждаемся в виртуальных машинах, но, как только мне выпадет шанс, я обязательно буду его использовать.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>EPAM IT Week Summer 2015</title>
      <link>localhost/it-week-summer-2015/index.html</link>
      <pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">it-week-summer-2015/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, которая носит чисто информационный характер. Хочу поделиться записью выступления на EPAM IT Week Summer 2015. Во второй раз принял участие в данном мероприятии как спикер. В прошлом году рассказывал о том, как мне удалось улучшить CI на нашем проекте. В этом году решил выступить с не техническим докладом и поговорить о том, как можно построить автоматизацию на проекте с самого начала. Решил провести интересные параллели и выстроить ассоциации.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/it-week.jpg&quot; alt=&quot;it week&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Перед выступлением и в самом его начале я немного нервничал, так как слайды доделывал буквально за пару часов до старта. Плюс ко всему, у людей была возможность не только присутствовать во время выступления, но и смотреть онлайн. В целом получилось очень хорошо, я доволен. После выступления я получил много положительных отзывов и лайков.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Собственно, вот запись выступления:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/6o3aox0RAWQ?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Создаем виртуальную машину в три шага</title>
      <link>localhost/vagrant/index.html</link>
      <pubDate>Sun, 9 Aug 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">vagrant/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хоу-хоу. Новая заметка не заставила себя ждать. Наверняка всем автоматизаторам известна проблема создания тестровых окружений для прогона тестов. Большинство из нас использует для прогона автотестов виртуальные машины. Я зачастую использую &lt;strong&gt;VirtualBox&lt;/strong&gt;. Если вы хоть раз пробовали создать виртуалку с нуля, то, вероятно, знаете, что это требует затрат времени и сил. В этой заметке я покажу, как просто и быстро создавать тестовые окружения с помощью инструмента &lt;strong&gt;Vagrant&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Идея вагранта очень проста: он основывается на наличии готовых базовых образов. В оригинале они называются - &lt;strong&gt;box&lt;/strong&gt;. The Tao of Vagrant содержит несколько простых принципов, которые гарантируют то, что созданная вами виртуальная машина будет работать на любой операционной системе: Mac OS, Windows, Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начнем работать с &lt;strong&gt;Vagrant&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Шаг 1: Установка&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Нам потребуется установить &lt;strong&gt;VirtualBox&lt;/strong&gt; и собственно &lt;strong&gt;Vagrant&lt;/strong&gt;. Скачиваем нужный инсталятор &lt;a href=&quot;http://www.vagrantup.com/downloads&quot;&gt;здесь&lt;/a&gt; и устанавливаем. Инструкция по установке VirtualBox &lt;a href=&quot;http://www.windxp.com.ru/article9.htm&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Шаг 2: Скачиваем готовый box&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Открываем консоль и выполняем команды:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;mkdir vm
cd vm
vagrant box add hashicorp/precise32
vagrant init hashicorp/precise32&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Шаг 3: Запускаем виртуальную машину:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;vagrant up&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Через несколько секунд у вас поднимется готовая виртуальная машина.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так, затратив всего 10 минут, вы получаете полностью готовую к работе виртуальную машину. Попробуйте - вам понравится. В следующих заметках я покажу, как продолжить настройку созданной машины. Как создавать свои машины, запаковывать их и делиться ими с коллегами по команде. Подписывайтесь, чтобы держать руку на пульсе.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Делаем тесты читабельнее. Кастомный Matcher</title>
      <link>localhost/custom-matcher/index.html</link>
      <pubDate>Sun, 2 Aug 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">custom-matcher/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Новая заметка о том, как сделать тесты читабельнее. Я уже писал &lt;a href=&quot;http://automation-remarks.com/davaitie-poghovorim-pro-asserty/&quot;&gt;заметку&lt;/a&gt; про библиотеки, которые помогают писать простые ассерты. Зачастую функциональности, которую предоставляют эти библиотеки, хватает для написания читабельных тестов. Но мы же идем путем улучшения. Бывают случаи, когда нужно написать свой собственный матчер, чтобы упростить ассерт или сделать его читабельнее.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://automation-remarks.com/content/images/2015/08/debrief.gif&quot; alt=&quot;debrief&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Зачем вообще это нужно? Скажем, у вас есть инстанс HttpResponse и вам нужно проверить его параметры.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
public void testSpeller() throws Exception {
        ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.getForEntity(&quot;http://speller.yandex.net/services/spellservice.json/checkText?text=синхрафазатрон+в+дубне&quot;, String.class);

//typical
assertThat(response.getStatusCode(),equalTo(HttpStatus.OK));

//custom
assertThat(response,code(OK));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этот пример наглядно показывает, что с применением кастомных матчеров код становится читабельнее. Нужно отметить, что существует определенное количество библиотек, которые позволяют использовать готовые матчеры. К примеру, набор матчеров от &lt;strong&gt;Yandex&lt;/strong&gt;. Брать чужое и пользоваться - это хорошо, но еще лучше уметь написать свой матчер. Приступим к написанию &lt;strong&gt;hamcrest&lt;/strong&gt; матчера.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

/**
 * Created by sergey on 02.08.15.
 */
public class HttpResponseCodeMatcher extends TypeSafeMatcher&amp;lt;ResponseEntity&amp;lt;String&amp;gt;&amp;gt; {

     private HttpStatus status;

    public HttpResponseCodeMatcher(HttpStatus status) {
        this.status = status;
    }

    @Override
    protected boolean matchesSafely(ResponseEntity&amp;lt;String&amp;gt; response) {
        return response.getStatusCode().equals(status);
    }

    @Override
    public void describeTo(Description description) {
        description.appendText(&quot;status code: &quot;).appendValue(status);
    }

    @Override
    protected void describeMismatchSafely(ResponseEntity&amp;lt;String&amp;gt; item, Description mismatchDescription) {
        mismatchDescription.appendText(&quot;was: &quot;).appendValue(item.getStatusCode());
    }

    public static Matcher&amp;lt;ResponseEntity&amp;lt;String&amp;gt;&amp;gt; code(HttpStatus status) {
        return new HttpResponseCodeMatcher(status);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все, что нам нужно, - это просто наследовать класс &lt;strong&gt;TypeSafeMatcher&lt;/strong&gt; и реализовать три метода. Нужно быть внимательным: третий метод &lt;strong&gt;describeMismatchSafely&lt;/strong&gt; не является абстрактным, по умолчанию он будет выводить результат, просто вызывая на объекте &lt;strong&gt;toString()&lt;/strong&gt;. Мы же переопределили этот метод и в результате у нас получается такой вот код:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
public void testSpeller() throws Exception {
   ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.getForEntity(&quot;http://speller.yandex.net/services/spellservice.json/checkText?text=синхрафазатрон+в+дубне&quot;, String.class);
   assertThat(response, code(ACCEPTED));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И такое сообщение об ошибке:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;java.lang.AssertionError:
Expected: status code: &lt;b class=&quot;conum&quot;&gt;(202)&lt;/b&gt;
     but: was: &lt;b class=&quot;conum&quot;&gt;(200)&lt;/b&gt;
    at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
    at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)
    at com.matcher.MatcherTest.testSpeller(MatcherTest.java:62)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот, очень легко и просто мы написали свой матчер и улучшили читабельность наших тестов. Более того, кастомные матчеры очень хороши при использовании &lt;strong&gt;Spock Framework&lt;/strong&gt; в качестве тест ранера. Но это уже история следующей заметки. Подписывайтесь, чтобы получать заметки первыми. До встреч&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Пишем Allure Jbehave адаптер</title>
      <link>localhost/allure-jbehave-adapter/index.html</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">allure-jbehave-adapter/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка о том, как я писал свой адаптер для интеграции &lt;strong&gt;Allure Yandex&lt;/strong&gt; и &lt;strong&gt;JBehave&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://hsto.org/getpro/habr/post_images/c43/a4d/cf7/c43a4dcf7aa2837e5136db9abd9b919a.jpg&quot; alt=&quot;c43a4dcf7aa2837e5136db9abd9b919a&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для начала определим суть проблемы. Allure позволяет интегрироваться практически со всеми известными тест-ранерами. Примеры можно найти здесь. &lt;strong&gt;Jbehave&lt;/strong&gt; в качестве тест-ранера использует &lt;strong&gt;JUnit&lt;/strong&gt;. Вы можете без особых проблем использовать Allure и JBehave, ничего не изобретая. Но есть пару неудобств. Allure отображает в отчете текст шагов или имена методов, отмеченных аннотацией &lt;strong&gt;@Step&lt;/strong&gt;. Меньше слов - пример:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@When(&quot;I perform some action&quot;)
@Step
public void shouldPerformSomeAction(){
//some code
}

@Then(&quot;I check that action completed&quot;)
@Step(&quot;I check that action completed&quot;)
public void shouldBeComplitedAction(){
//some code
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как вы можете заметить, в первом случае имя метода не совсем совпадает со Step definition, а во втором присутствует дублирование, что еще хуже. Конечно, можно использовать первый подход, но имя метода писать &lt;strong&gt;whenIperformSomeAction&lt;/strong&gt;, но, как по мне, можно попробовать сделать лучше.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Идем на страничку Wiki сюда и пытаемся понять, как написать свой адаптер. Далее, как специалисты высоко полета, понимаем, что все реализуется через листенеры (так реализоваы практически все адаптеры, если посмотреть их сорс коды). Ищем такой листенер для JBehave. Он называется &lt;strong&gt;org.jbehave.core.reporters.StoryReporter&lt;/strong&gt;. Если мы реализуем этот интерфейс, то получим кучу методов, см пример здесь. Вот собственно здесь мы и зацепимся. Подключаем &lt;strong&gt;allure-java-adaptor-api&lt;/strong&gt; и реализовываем методы. Важно помнить: чтобы &lt;strong&gt;Allure&lt;/strong&gt; сгенерировал &lt;strong&gt;xml&lt;/strong&gt; файлы, из которых будет собираться отчет, нужно обязательно в методе, который отвечает за окончание тестового прогона, указать TestSuiteFinishedEvent. Мой листенер называется &lt;strong&gt;AllureReporter&lt;/strong&gt;. Для того, чтобы подключить его к JBehave и начать получать отчеты, нужно просто пойти в класс-раннер (пример того, как выглядит, см здесь) и прописать там одну простую строку:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  @Override
  public Configuration configuration() {
    return new MostUsefulConfiguration()
            .useStoryReporterBuilder(new StoryReporterBuilder().withReporters(new AllureReporter())
   ...
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот и все, после запуска тестов в папке target/allure-results будут находиться сгенерированные xml файлы. Затем нужно просто собрать отчет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;P.S. Возможно, вам понравится идея и вы решите использовать отчет у себя на проекте, либо вы решите усовершенствовать код, поэтому привожу ссылки на репортер и на пример проекта: &lt;a href=&quot;https://bitbucket.org/Semen4ik20/allure-jbehave-adapter/src&quot;&gt;репортер&lt;/a&gt; и &lt;a href=&quot;https://github.com/SergeyPirogov/JbehaveGradleAllure&quot;&gt;пример использования&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Пишем видео во время прогона тестов</title>
      <link>localhost/pishiem-vidieo-vo-vriemia-proghona-tiestov/index.html</link>
      <pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">pishiem-vidieo-vo-vriemia-proghona-tiestov/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой заметке показан пример того, как можно реализовать запись видео во время прогона Selenium тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://it-112.ru/olderfiles/1/videofail.jpg&quot; alt=&quot;videofail&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Да-да, вы не ошиблись, будем рассматривать именно запись видео. Зачем? Бывают ситуации, когда скриншотов не достаточно. К тому же, скриншоты есть у всех, а вот видео - это уже интересно. Реализовать такую киллер-фичу в вашем фреймворке можно разными способами. Я покажу пример с использованием библиотеки &lt;strong&gt;Monte Screen Recorder&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Информацию об этой библиотеке можно почитать на сайте. На главной странице, в разделе &lt;strong&gt;Downloads&lt;/strong&gt;, скачиваем &lt;a href=&quot;http://www.randelshofer.ch/monte/files/demos/MonteScreenRecorder.jar&quot;&gt;MonteScreenRecorder.jar&lt;/a&gt; Этой библиотеки нету в центральном &lt;strong&gt;Maven&lt;/strong&gt; репозитории, поэтому, если у вас Maven проект, придётся добавить библиотеку самостоятельно. Пример команды, которая в этом поможет, приведен ниже. Просто нужно открыть консоль и там набрать команду:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;mvn install:install-file -Dfile=MonteScreenRecorder.jar -DgroupId=org.monte -DartifactId=monte-screen-recorder -Dversion=0.7.7 -Dpackaging=jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь можно подключить &lt;strong&gt;monte-screen-recorder&lt;/strong&gt; как простую зависимость. Идем в &lt;strong&gt;pom.xml&lt;/strong&gt; и прописываем там следующие строки:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.monte&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;monte-screen-recorder&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;0.7.7&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создадим класс &lt;strong&gt;VideoRecord&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.pages.recorder;

import java.awt.*;
import org.monte.screenrecorder.ScreenRecorder;

public class VideoRecord {
    private static ScreenRecorder screenRecorder;

    public static void startRecording() throws Exception {
        GraphicsConfiguration gc = GraphicsEnvironment
                .getLocalGraphicsEnvironment().getDefaultScreenDevice()
                .getDefaultConfiguration();

        screenRecorder = new ScreenRecorder(gc);
        screenRecorder.start();
    }

    public static void stopRecording() throws Exception {
        screenRecorder.stop();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом классе у нас есть два метода &lt;strong&gt;startRecording&lt;/strong&gt; и &lt;strong&gt;stopRecording&lt;/strong&gt;. Их-то мы и будем использовать для управления записью видео.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Before
    public void setUpMethod() throws Exception {
        VideoRecord.startRecording();
    }

    @Test
    public void shouldBeErrorMessage() {
        mainPage.open();
        mainPage.login(&quot;adasd&quot;, &quot;asdasd&quot;);
        String err = mainPage.getErrorMsg();
        assertThat(err, equalTo(&quot;Не вірний логін або пароль. Спробуйте знову.&quot;));
    }

    @After
    public void stop() throws Exception {
        VideoRecord.stopRecording();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По умолчанию записи будут сохраняться в папку &lt;strong&gt;${user.dir}/Movies(Мои Видеозаписи)&lt;/strong&gt;. Собственно, на этом все. Хороших вам роликов и до встреч =)&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Получаем больше логов от Selenium</title>
      <link>localhost/selenium-logs/index.html</link>
      <pubDate>Sun, 5 Jul 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">selenium-logs/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка о том, как залогировать действия &lt;strong&gt;Selenium Webdriver&lt;/strong&gt;. Вероятнее всего, вы всегда хотели получать больше информации от &lt;strong&gt;WebDriver&lt;/strong&gt; так, чтобы было легко дебажить скрипты или просто получать больше информации о тестах. Теперь это стало возможным благодаря EventFiringWebDriver и  &lt;strong&gt;WebDriverEventListner&lt;/strong&gt;. &lt;strong&gt;EventFiringWebDriver&lt;/strong&gt; это класс, который используется как обертка над webDriver. &lt;strong&gt;WebDriverEventListner&lt;/strong&gt; - интерфейс, который нужно реализовать, чтобы получить доступ к действиям webdriver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hurricanesoftwares.com/wp-content/uploads/2013/04/selenium-webdriver.jpg&quot; alt=&quot;selenium webdriver&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Поговорим чуть больше o классе &lt;strong&gt;EventFiringWebDriver&lt;/strong&gt;. Этот класс реализует интерфейс WebDriver. Это означает, что в дополнение ко всем стандартным методам, появляется еще два метода:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;register(WebDriverEventListener eventListener)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unregister(WebDriverEventListener eventListener)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Метод &lt;strong&gt;register&lt;/strong&gt; позволяет зарегистрировать вашу реализацию &lt;strong&gt;WebDriverEventListner&lt;/strong&gt; для того, чтобы слушать все действия webdriver и метод unregister позволяет прервать работу метода register.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Шаг 1: Реализуем интерфейс WebDriverEventListener&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем класс &lt;strong&gt;EventHandler&lt;/strong&gt; и реализуем &lt;strong&gt;WebDriverEventListener&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.custom.listeners;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.events.WebDriverEventListener;

public class EventHandler implements WebDriverEventListener {

    private static final Logger LOG = LogManager.getLogger(EventHandler.class);

    @Override
    public void beforeNavigateTo(String url, WebDriver driver) {

    }

    @Override
    public void afterNavigateTo(String url, WebDriver driver) {

    }

    @Override
    public void beforeNavigateBack(WebDriver driver) {

    }

    @Override
    public void afterNavigateBack(WebDriver driver) {

    }

    @Override
    public void beforeNavigateForward(WebDriver driver) {

    }

    @Override
    public void afterNavigateForward(WebDriver driver) {

    }

    @Override
    public void beforeFindBy(By by, WebElement element, WebDriver driver) {
        LOG.debug(&quot;Should be &quot; + by);
    }

    @Override
    public void afterFindBy(By by, WebElement element, WebDriver driver) {
        LOG.debug(&quot;Element found&quot;);
    }

    @Override
    public void beforeClickOn(WebElement element, WebDriver driver) {
        LOG.debug(&quot;Should click &quot; + element.getTagName());
    }

    @Override
    public void afterClickOn(WebElement element, WebDriver driver) {
        LOG.debug(&quot;Clicked successfull&quot;);
    }

    @Override
    public void beforeChangeValueOf(WebElement element, WebDriver driver) {

    }

    @Override
    public void afterChangeValueOf(WebElement element, WebDriver driver) {

    }

    @Override
    public void beforeScript(String script, WebDriver driver) {

    }

    @Override
    public void afterScript(String script, WebDriver driver) {

    }

    @Override
    public void onException(Throwable throwable, WebDriver driver) {

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Шаг 2: Регистрируем слушателя&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем простой объект webdriver:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;WebDriver driver = new FirefoxDriver();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем объект &lt;strong&gt;EventFiringWebDriver&lt;/strong&gt; и передаем ему созданный объект driver:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;EventFiringWebDriver eventDriver = new EventFiringWebDriver(driver);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Регистрируем &lt;strong&gt;EventHandler&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;eventDriver.register(new EventHandler());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все, теперь мы можем спокойно писать тесты, как мы это делали раньше и при этом логировать действия драйвера.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.events.EventFiringWebDriver;

public class Demo {
    public static void main(String[] args) {
                EventFiringWebDriver eventDriver = new EventFiringWebDriver(new FirefoxDriver());
        EventHandler handler = new EventHandler();
        eventDriver.register(handler);
        eventDriver.get(&quot;http://automation-remarks.com&quot;);
        WebElement element = eventDriver.findElement(By.id(&quot;target&quot;));
        element.click();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В результате запуска у нас получится такой вот лог:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;DEBUG com.home.custom.listeners.WDriverEventListener beforeFindBy - Should be By.name: banner
DEBUG com.home.custom.listeners.WDriverEventListener beforeFindBy - Should be By.name: banner
DEBUG com.home.custom.listeners.WDriverEventListener afterFindBy - Element found
DEBUG com.home.custom.listeners.WDriverEventListener beforeFindBy - Should be By.id: ibm-banner-welcome
DEBUG com.home.custom.listeners.WDriverEventListener beforeFindBy - Should be By.id: ibm-banner-welcome
DEBUG com.home.custom.listeners.WDriverEventListener afterFindBy - Element found&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так просто можно улучшить логирование в вашем тестовом фреймворке. Читабельных вам логов и удачи. Подписывайтесь на нашу рассылку;)&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Введение в Selenium для мануальных тестировщиков</title>
      <link>localhost/selenium-for-manual/index.html</link>
      <pubDate>Sat, 4 Jul 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">selenium-for-manual/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Одна из лекций под одноименным названием. Полезно для людей без опыта работы с Selenium webdriver. В лекции показан пример написания самого простого теста. Основное внимание уделено ожиданиям. Показан пример организации кода в проекте.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/oHqHXFklXww?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/Qrqr53X4XMg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Cucumber плюс Spring и Selenium или жирное BDD</title>
      <link>localhost/cucumber/index.html</link>
      <pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">cucumber/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка с громким названием на достаточно спорную тему - BDD. Многие используют Behavior-Driven Development у себя на проектах, многие его ругают. Но, я уверен, есть люди, которые не видели и не пробовали, как это работает. О том, что такое BDD, в чем его основной смысл, вы можете посмотреть &lt;a href=&quot;http://automation-remarks.com/bdd-in-test-automation-lecture/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Дальше я покажу, как настроить проект, показанный на видео по ссылке выше, с использованием &lt;strong&gt;Cucumber&lt;/strong&gt;, &lt;strong&gt;Spring Framework&lt;/strong&gt; и &lt;strong&gt;Selenium&lt;/strong&gt;. Традиционно пример будет реализован на Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак начнем. Создаем простой Maven проект и добавляем зависимости в &lt;strong&gt;pom.xml&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;CucumberDemo&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;CucumberDemo&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;cucumber-core.version&amp;gt;1.1.8&amp;lt;/cucumber-core.version&amp;gt;
        &amp;lt;cucumber-html.version&amp;gt;0.2.3&amp;lt;/cucumber-html.version&amp;gt;
        &amp;lt;cucumber-java.version&amp;gt;1.1.8&amp;lt;/cucumber-java.version&amp;gt;
        &amp;lt;cucumber-junit.version&amp;gt;1.1.8&amp;lt;/cucumber-junit.version&amp;gt;
        &amp;lt;cucumber-jvm-deps.version&amp;gt;1.0.3&amp;lt;/cucumber-jvm-deps.version&amp;gt;
        &amp;lt;cucumber-spring.version&amp;gt;1.1.8&amp;lt;/cucumber-spring.version&amp;gt;
        &amp;lt;gherkin.version&amp;gt;2.12.2&amp;lt;/gherkin.version&amp;gt;
        &amp;lt;hamcrest-all.version&amp;gt;1.3&amp;lt;/hamcrest-all.version&amp;gt;
        &amp;lt;junit.version&amp;gt;4.11&amp;lt;/junit.version&amp;gt;
        &amp;lt;selenium-server.version&amp;gt;2.46.0&amp;lt;/selenium-server.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cucumber-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cucumber-core.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cucumber-html&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cucumber-html.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cucumber-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cucumber-java.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cucumber-junit&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cucumber-junit.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cucumber-jvm-deps&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cucumber-jvm-deps.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cucumber-spring&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cucumber-spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;gherkin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${gherkin.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.hamcrest&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;hamcrest-all&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${hamcrest-all.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${junit.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;selenium-server&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${selenium-server.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.1.5.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.1.5.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее нам нужно создать класс CucumberRunner, который будет запускать наши сценарии. Сейчас вы удивитесь краткости настроек:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@RunWith(Cucumber.class)
@CucumberOptions(tags = {},format = {&quot;pretty&quot;, &quot;json:target/cucumber.json&quot;,&quot;html:target/cucumber.html&quot;}, features = {&quot;src/main/java/com/features/&quot;})
public class CucumberRunner {

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Здесь мы указали формат вывода результатов, формат отчета и путь к папке, где лежат наши &lt;strong&gt;feature&lt;/strong&gt; файлы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь создадим непосредственно сам feature файл &lt;strong&gt;pc.feature&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Feature: PC Feature

  @1
  Scenario: Verify that user can open PC page
    Given I open pn.com.ua
    When I select category &quot;Компьютеры&quot;
    Then I should see page url &quot;http://pn.com.ua/computers/&quot;

  @2
  Scenario: Verify that user can open PC page
    Given I open pn.com.ua
    When I select category &quot;Компьютеры&quot;
    Then verify that has sub-column:
    |name|
    |Ноутбуки, планшеты|&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теги &lt;strong&gt;@1&lt;/strong&gt; и &lt;strong&gt;@2&lt;/strong&gt; - это аннотации, с помощью которых мы можем фильтровать сценарии при запуске, указав параметр в CucumberRunner, к примеру &lt;strong&gt;tags{&quot;@2&quot;}&lt;/strong&gt;. Ну вот, с настройкой &lt;strong&gt;Cucumber&lt;/strong&gt; мы справились, теперь приступим к настройке &lt;strong&gt;Spring&lt;/strong&gt;, который будет управлять зависимостями в нашем фреймворке. Создаем в папке &lt;strong&gt;src/java/resources&lt;/strong&gt; файл &lt;strong&gt;cucumber.xml&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&amp;gt;

    &amp;lt;context:annotation-config/&amp;gt;

    &amp;lt;context:component-scan base-package=&quot;com.cucumber&quot;/&amp;gt;

    &amp;lt;import resource=&quot;classpath*:/applicationContext.xml&quot;/&amp;gt;
    &amp;lt;bean id=&quot;driver&quot; class=&quot;org.openqa.selenium.firefox.FirefoxDriver&quot; destroy-method=&quot;quit&quot;/&amp;gt;
&amp;lt;/beans&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь приступим к ComponentObject. Создаем класс Page, от которого будем наследовать все наши классы-компоненты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Page {

    @Autowired
    WebDriver driver;

    @PostConstruct
    public void setUp() {
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
    }

    protected void open(String url) {
        driver.get(url);
    }


    protected WebElement $(String xpath, String... args) {
        return driver.findElement(By.xpath(String.format(xpath, args)));
    }


    protected List&amp;lt;WebElement&amp;gt; $$(By by) {
        return driver.findElements(by);
    }

    protected WebElement $(By by) {
        return driver.findElement(by);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем класс-компонент &lt;strong&gt;Home&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Component
public class Home extends Page{

    private static final String URl = &quot;http://pn.com.ua/&quot;;

    public void open(){
        open(URl);
    }

    public WebElement getCategoty(String name){
        return $(&quot;//a[contains(.,&apos;%s&apos;)]&quot;,name);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Аннотация &lt;strong&gt;@Component&lt;/strong&gt; говорит &lt;strong&gt;Spring&lt;/strong&gt; о том, что нужно создать инстанс этого класса.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем класс &lt;strong&gt;HomeSteps&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class HomeSteps {

    @Autowired
    Home home;

    @Given(&quot;^I open pn\\.com\\.ua$&quot;)
    public void shouldOpenMainPage() throws Throwable {
        home.open();
    }

    @When(&quot;^I select category \&quot;(.*?)\&quot;$&quot;)
    public void shoulSelectCategory(String cat) throws Throwable {
        home.getCategoty(cat).click();
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот она магия &lt;strong&gt;Spring&lt;/strong&gt; - не нужно никаких конструкторов и прочей лишней чепухи, ставим аннотацию @&lt;strong&gt;Autowired&lt;/strong&gt; и все. На этом, собственно, вся настройка заканчивается. Остается создать оставшиеся классы-компоненты, реализовать шаги и запустить тесты. В конце получается красивенький HTML - отчет о результатах прохождения тестов, смотреть его в папке &lt;strong&gt;\target\cucumber.html&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Полный код примера вы можете посмотреть в репозитории &lt;a href=&quot;https://bitbucket.org/Semen4ik20/cucmberspringdemo/src&quot;&gt;bitbucket&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Качайте, пробуйте, подписывайтесь на email рассылку, чтобы получать свежие заметки первыми. Спасибо&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Используем Selenium Grid</title>
      <link>localhost/ispolzuiem-nastroiennyi-selenium-grid/index.html</link>
      <pubDate>Tue, 23 Jun 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">ispolzuiem-nastroiennyi-selenium-grid/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, в которой я покажу, как использовать настроенный Selenium grid в тестовом фреймворке. О том, как настроить grid, я писал в предыдущей &lt;a href=&quot;http://automation-remarks.com/nastraivaiem-selenium-grid-za-5-minut/&quot;&gt;заметке&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.guru99.com/images/AdvanceSelenium/071514_0700_CrossBrowse1.png&quot; alt=&quot;071514 0700 CrossBrowse1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начнем с самого простого. Создаем &lt;strong&gt;Maven&lt;/strong&gt; проект, подключаем две зависимости &lt;strong&gt;TestNG&lt;/strong&gt; и &lt;strong&gt;Selenium-java&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.testng&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;testng&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;6.8.8&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;selenium-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.46.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;TestNG&lt;/strong&gt; приведен не случайно: именно его проще всего использовать для распараллеливания тестов. Почему? Попробуйте - и вы поймете сами =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом примере показан тест для страницы поиска Google. Но это не столь важно, следуя примеру, можно создать инфраструктуру для тестирования любого web-приложения.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем общий класс, от которого будут наследоваться все классы тестов. В него помещаем методы фикстуры и другие методы, общие для всех классов тестов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.grid.shedule.core.WebDriverInstansiator;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;

public class BaseTestGrid {

    @Parameters({&quot;browserName&quot;, &quot;browserVersion&quot;})
    @BeforeClass
    public void setUp(@Optional String browserName, String browserVersion){
        WebDriverInstansiator.setDriver(browserName, browserVersion);
    }

    @AfterClass
    public void tearDown() throws Exception{
        WebDriverInstansiator.getDriver().quit();
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самое важное в коде, приведенном выше - класс &lt;strong&gt;WebDriverInstantiator&lt;/strong&gt;. Этот класс будет служить менеджером веб-драйверов для наших тестов. Самое важное в этом классе - ThreadLocal переменная webdriver. Она вводится для того, чтобы на каждый новый поток создавать свой веб-драйвер.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.openqa.selenium.WebDriver;

public class WebDriverInstansiator {

    private static InheritableThreadLocal&amp;lt;WebDriver&amp;gt; webDriver = new InheritableThreadLocal&amp;lt;WebDriver&amp;gt;();
    private static WebDriverFactory factory;

    public static void setDriver(String browserName, String browserVersion){
        factory = new WebDriverFactory();
        webDriver.set(factory.getWebDriver(browserName, browserVersion));
    }

    public static WebDriver getDriver(){
        return webDriver.get();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Внутри класса &lt;strong&gt;WebDriverInstansiator&lt;/strong&gt; находится &lt;strong&gt;PageFactory&lt;/strong&gt;, его цель - упростить создание новых инстансов веб-драйверов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем &lt;strong&gt;Page object&lt;/strong&gt; и класс тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

/**
 * Created by Serhii_Pirohov on 23.06.2015.
 */
public class GooglePage extends Page{

    private static final String URL = &quot;http://google.com/&quot;;

    private static final By SEARCH_INPUT = By.name(&quot;q&quot;);
    private static final By SEARCH_BTN = By.name(&quot;btnK&quot;);


    public GooglePage(WebDriver driver) {
       super(driver);
    }

    public void search(String name){
        $(SEARCH_INPUT).sendKeys(name);
        $(SEARCH_BTN).click();
    }

    public void open() {
        toPage(URL);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Класс тестов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.grid.shedule.core.WebDriverInstansiator;
import com.grid.shedule.pages.GooglePage;
import org.testng.annotations.*;

/**
 * Created by Serhii_Pirohov on 23.06.2015.
 */
public class TestGoogleSearch extends BaseTestGrid {

    GooglePage googlePage;

    @BeforeMethod
    public void setUp() {
        googlePage = new GooglePage(WebDriverInstansiator.getDriver());
    }

    @Test
    public void shouldBeBlogTitle() {
        googlePage.open();
        googlePage.search(&quot;automation remarks&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И самая последняя часть: нужно настроить &lt;strong&gt;TestNG&lt;/strong&gt; xml, в котором указать, какие тесты и в каких браузерах нужно запускать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
 &amp;lt;!DOCTYPE suite SYSTEM &quot;http://testng.org/testng-1.0.dtd&quot;&amp;gt;
&amp;lt;suite name=&quot;ScheduleBusTest&quot; parallel=&quot;tests&quot; thread-count=&quot;5&quot;&amp;gt;
    &amp;lt;test name=&quot;ChromeTest&quot; verbose=&quot;1&quot; parallel=&quot;true&quot;&amp;gt;
        &amp;lt;parameter name=&quot;browserName&quot; value=&quot;chrome&quot; /&amp;gt;
        &amp;lt;parameter name=&quot;browserVersion&quot; value=&quot;&quot; /&amp;gt;
        &amp;lt;classes&amp;gt;
            &amp;lt;class name=&quot;com.grid.shedule.test.TestGoogleSearch&quot; /&amp;gt;
        &amp;lt;/classes&amp;gt;
    &amp;lt;/test&amp;gt;
    &amp;lt;test name=&quot;InternetExplorerTest&quot; verbose=&quot;1&quot; parallel=&quot;true&quot;&amp;gt;
        &amp;lt;parameter name=&quot;browserName&quot; value=&quot;internet explorer&quot; /&amp;gt;
        &amp;lt;parameter name=&quot;browserVersion&quot; value=&quot;8&quot; /&amp;gt;
        &amp;lt;classes&amp;gt;
            &amp;lt;class name=&quot;com.grid.shedule.test.TestGoogleSearch&quot; /&amp;gt;
        &amp;lt;/classes&amp;gt;
    &amp;lt;/test&amp;gt;
&amp;lt;/suite&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот, на этом настройка закончена. Для того, чтобы запустить тесты, нужно сначала стартовать наш Grid Hub с подключенными Node. Приведу пример скрипта с json файлом конфигурации:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;NodeConfig.json&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;capabilities&quot;:
      [
        {
            &quot;browserName&quot;: &quot;chrome&quot;,
            &quot;platform&quot;: &quot;WINDOWS&quot;,
            &quot;maxInstances&quot;: 13,
            &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;,
            &quot;nodeName&quot;: &quot;simpleNode&quot;
        },
        {
            &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;,
            &quot;browserName&quot;: &quot;internet explorer&quot;,
            &quot;version&quot;: &quot;8&quot;,
            &quot;maxInstances&quot;: 13,
            &quot;platform&quot; : &quot;WINDOWS&quot;,
            &quot;nodeName&quot;: &quot;simpleNode&quot;
        },
        {
          &quot;browserName&quot;: &quot;firefox&quot;,
          &quot;version&quot;: &quot;22&quot;,
          &quot;platform&quot;: &quot;WINDOWS&quot;,
          &quot;firefox_binary&quot;:&quot;FirefoxExe/ff22/firefox.exe&quot;,
          &quot;maxInstances&quot;: 25,
          &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;,
          &quot;nodeName&quot;: &quot;simpleNode&quot;
        },
        {
          &quot;browserName&quot;: &quot;firefox&quot;,
          &quot;version&quot;: &quot;24&quot;,
          &quot;platform&quot;: &quot;WINDOWS&quot;,
          &quot;maxInstances&quot;: 25,
          &quot;firefox_binary&quot;:&quot;FirefoxExe/ff24/firefox.exe&quot;,
          &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;,
          &quot;nodeName&quot;: &quot;simpleNode&quot;
        }
      ],
  &quot;configuration&quot;:
    {
        &quot;nodeTimeout&quot;:120,
        &quot;nodePolling&quot;:2000,
        &quot;registerCycle&quot;:10000,
        &quot;register&quot;:true,
        &quot;cleanUpCycle&quot;:2000,
        &quot;timeout&quot;:30000,
        &quot;maxSession&quot;:25,
        &quot;nodeStatusCheckTimeout&quot;:10000,
        &quot;downPollingLimit&quot;:360000
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Код самого &lt;strong&gt;.bat&lt;/strong&gt; или &lt;strong&gt;.sh&lt;/strong&gt; файла, который я использую для запуска сервера:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;StartGrid.bat(.sh)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;cmd /C start/MIN java -jar selenium-server-standalone-2.46.0.jar -role hub -port 4445 -timeout 300 -browserTimeout 360
cmd /C start/MIN java -jar selenium-server-standalone-2.46.0.jar -role node -port 5599 -hub http://localhost:4445/grid/register -nodeConfig NodeConfig.json -Dwebdriver.chrome.driver=Drivers\chromedriver.exe -Dwebdriver.ie.driver=Drivers\IEDriverServer.exe&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот, теперь можно запускать тест. Должны открыться два браузера IE и Chrome, в которых параллельно будет выполняться наш единственный тест.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Надеюсь, вам понравилась заметка и вы нашли в ней что-то полезное. Подписывайтесь на мой блог, присылайте идеи, делитесь опытом. До новых встреч!..&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Настраиваем Selenium Grid за 5 минут</title>
      <link>localhost/nastraivaiem-selenium-grid-za-5-minut/index.html</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">nastraivaiem-selenium-grid-za-5-minut/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка о том, как правильно настроить &lt;strong&gt;Selenium-Grid&lt;/strong&gt;. Многие делали это неоднократно, а некоторые даже не знают, что это такое. Ориентируюсь на обе части аудитории: если у вас есть опыт, заметка будет служить такой себе справкой - вдруг чего забыли; если вы не пробовали, но очень хотели - это прекрасный шанс начать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак &lt;strong&gt;Selenium-Grid&lt;/strong&gt; позволяет запускать тесты на разных машинах в разных браузерах параллельно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://cdn.guru99.com/images/hub_and_nodes.jpg&quot; alt=&quot;hub and nodes&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В основном Selenium Grid используют по нескольким причинам:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для распараллеливания запуска тестов на различных операционных системах, в различных браузерах;
Для того, чтобы уменьшить общее время прогона тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Selenium Grid оперирует такими составляющими, как Hub и Node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что такое Hub?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hub - центральная точка, которая принимает запросы и направляет их к Node. Такой себе командный пункт.
В гриде может быть только один Hub.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что такое Node?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Node - Selenium инстанс, который будет запускать команды, загружаемые в Hub.
Node может быть много в гриде.
Node - может запускаться на разных операционных системах с разными браузерами.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начало настройки:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скачать &lt;strong&gt;Selenium Server Standalone&lt;/strong&gt; &lt;a href=&quot;http://docs.seleniumhq.org/download/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создайте папку &lt;strong&gt;seleniumgrid&lt;/strong&gt; и скопируйте в нее скачанный &lt;strong&gt;selenium_server_x.xx.x.jar&lt;/strong&gt; файл.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Стартуем Hub.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Открываем окно команд и выполняем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -jar selenium_server_standalone_2.46.0.jar -role hub&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Должно появиться что-то подобное этому:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://cdn.guru99.com/images/launch_hub.jpg&quot; alt=&quot;launch hub&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для того, чтобы проверить, что все стартовало правильно, нужно набрать в браузере&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;http://localhost:4444/grid/console&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Стартуем Node.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В моем случае и &lt;strong&gt;Hub&lt;/strong&gt; и &lt;strong&gt;Node&lt;/strong&gt; расположены на одном компьютере, но это не сильно меняет ситуацию.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Открываем консоль и пишем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Node для браузера &lt;strong&gt;FireFox&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -jar selenium-server-standalone-2.46.0.jar -role webdriver -hub http://localhost:4444/grid/register -port 5556 -browser browserName=firefox&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для браузеров Chrome и Internet Explorer настройка немного отличается. Нужно дописать путь к драйверам соответствующих браузеров -Dwebdriver.ie.driver=IEDriverServer.exe и -Dwebdriver.chrome.driver=chromedriver.exe. Скачать драйверы можно на сайте selenium.org&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Полные команды выглядят так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;strong&gt;Internet Explorer&lt;/strong&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -Dwebdriver.ie.driver=IEDriverServer.exe -jar selenium-server-standalone-2.46.0.jar -role webdriver -hub
http://localhost:4444/grid/register -port 5558 -browser browserName=iexplorer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для Internet explorer я уже описывал, как можно использовать драйвер, написанный самим Майкрософт. Смотреть &lt;a href=&quot;http://automation-remarks.com/kak-pokorit-internet-explorer/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -Dwebdriver.chrome.driver=chromedriver.exe -jar selenium-server-standalone-2.46.0.jar -role webdriver -hub
http://localhost:4444/grid/register -port 5558 -browser browserName=chrome&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для того, чтобы проверить, что все настроено корректно, нужно открыть все тот же &lt;a href=&quot;http://localhost:4444/grid/console&quot; class=&quot;bare&quot;&gt;http://localhost:4444/grid/console&lt;/a&gt; и убедиться, что там отображается один истанс IE и один Chrome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Следует добавить, конфигурировать Hub и Node можно с помощью JSON файлов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пример для &lt;strong&gt;Hub&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -jar selenium-server-standalone.jar -role hub -hubConfig hubconfig.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Содержимое json файла &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/blob/master/java/server/src/org/openqa/grid/common/defaults/DefaultHub.json&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пример для &lt;strong&gt;Node&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -jar selenium-server-standalone.jar -role node -nodeConfig nodeconfig.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Содержимое json файла &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/blob/master/java/server/src/org/openqa/grid/common/defaults/DefaultNode.json&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот и все, в следующих заметках я покажу, как пользоваться настроенным гридом и запускать тесты. Если вам интересно, подписывайтесь,чтобы получать обновления первым.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Магия Groovy и SQL</title>
      <link>localhost/maghiia-groovy-i-sql/index.html</link>
      <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">maghiia-groovy-i-sql/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Новая заметка, о том как можно упростить и ускорить тестирование баз данных.
Начну с описания примерной ситуации, в которой может пригодиться данный подход. Скажем, есть у вас схема базы данных и вы перед стартом приложения, хотите проверить целостность базы данных и находящихся в ней данных. Для этого можно использовать различные подходы, я покажу один из них. В показаном примере используется Groovy. Лично для меня, он привлекателен тем, что некоторые вещи можно делать проще и быстрее. К примеру я уже показывал здесь как быстро и просто прочитать данные из url.
Итак приступим к делу, в примере ниже, я покажу как соедениться с базой данных SQLite. Итак открываем Groovy Console и пишем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Grapes([
 @Grab(group=&apos;org.xerial&apos;,module=&apos;sqlite-jdbc&apos;,version=&apos;3.7.2&apos;),
 @GrabConfig(systemClassLoader=true)
])

import java.sql.*
import org.sqlite.SQLite
import groovy.sql.Sql

//Class.forName(&quot;org.sqlite.JDBC&quot;)

def sql = Sql.newInstance(&quot;jdbc:sqlite:sample.db&quot;, &quot;org.sqlite.JDBC&quot;)

sql.execute(&quot;drop table if exists person&quot;)
sql.execute(&quot;create table person (id integer, name string)&quot;)

def people = sql.dataSet(&quot;person&quot;)
people.add(id:1, name:&quot;leo&quot;)
people.add(id:2,name:&apos;yui&apos;)

sql.eachRow(&quot;select * from person&quot;) {
  println(&quot;id=${it.id}, name= ${it.name}&quot;)
}

result:
id=1, name= leo
id=2, name= yui&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так вот, всего пару строк, котрые позволяют создать таблицу, заполнить ее данными и извлечь их.
Пойдем еще дальше, так как груви консоль - это инструмент &quot;поиграться&quot;.
Берем более серъезные инструменты &lt;strong&gt;Groovy + Spock Framework&lt;/strong&gt;.Базы данных &lt;strong&gt;H2&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем тестовый класс:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;import groovy.sql.Sql
import spock.lang.Shared
import spock.lang.Specification

class DatabaseDrivenSpec extends Specification {
    @Shared
            sql = Sql.newInstance(&quot;jdbc:h2:mem:&quot;, &quot;org.h2.Driver&quot;)

    // insert data (usually the database would already contain the data)
    def setupSpec() {
        sql.execute(&quot;&quot;&quot;
                        CREATE TABLE employees
                        ( employee_number number(10) not null,
                          employee_name varchar2(50) not null,
                          salary number(6),
                          CONSTRAINT employees_pk PRIMARY KEY (employee_number)
                        );
                    &quot;&quot;&quot;
        );

sql.execute(&quot;INSERT INTO employees (employee_number, employee_name, salary) VALUES (1001, &apos;Sally Johnson&apos;, 32000);&quot;)
    }


    def &quot;employees test&quot;() {
        expect:
        employee_number == 1001
        employee_name == &quot;Sally Johnson&quot;
        salary == 32000

        where:
        [employee_number, employee_name, salary] &amp;lt;&amp;lt; sql.rows(&quot;select * from employees&quot;)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Можно очень легко читать .sql файлы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String query = new File(&apos;insert.sql&apos;).text
sql.execute(query)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так вот, мы очень легко и понятно можем обращаться с данными используя Groovy SQL.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Достойная замена проперти файлам</title>
      <link>localhost/zamienitie-property-faily-na-ghruvi-skripty/index.html</link>
      <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">zamienitie-property-faily-na-ghruvi-skripty/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этой заметкой я продолжу когда-то уже начатый разговор о груви. Сегодня хочу предложить подход, который я испробовал лично, а именно - заменить проперти файл в проекте на груви скрипт.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак у нас есть стандартный Java проект со стандартной структурой. Создадим в папке &lt;strong&gt;resources&lt;/strong&gt; файл &lt;strong&gt;config.groovy&lt;/strong&gt; со следующим содержанием:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;environments{
    local{
        mail = &quot;localhost&quot;
        servers{
            linux = &quot;0.0.0.0&quot;
            solaris = &quot;192.168.1.1&quot;
        }
    }
    prod{
        mail = &quot;prodhost&quot;
        servers = [&quot;1.1.1.1&quot;,&quot;2.2.2.2.2&quot;]
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Стандартная ситуация: у нас есть несколько инвайроментов, на которых мы можем запускать тесты. Теперь начнется магия груви. Создаем класс:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Config.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class Config {

    final String CONFIG_FILE = &apos;src/test/resources/config.groovy&apos;
    final String ENVIRONMENTS = &apos;environments&apos;

    def read() {
        new File(CONFIG_FILE).text
    }

    def getEnv(String envName) {
        def config = new ConfigSlurper(envName)
        config.registerConditionalBlock(ENVIRONMENTS, envName)
        config.parse(read())
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сердцем этого класса является метод &lt;strong&gt;getEnv&lt;/strong&gt;, который использует &lt;strong&gt;ConfigSlurper&lt;/strong&gt;. ConfigSlurper может парсить груфи файлы, что даст нам возможность использовать скрипты вместо стандартных Java проперти файлов. Ну и теперь нам остается попробовать класс в действии:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class ConfigTest {
    public static void main(String[] args) {
        def local= new Config().getEnv(&apos;local&apos;)
        println &quot;Local&quot;
        println local.mail
        println local.servers.linux
        println local.servers.solaris

        def prod = new Config().getEnv(&apos;prod&apos;)
        println &quot;Production&quot;
        println prod.mail
        println prod.servers
    }
}

Console output:
Local
localhost
0.0.0.0
192.168.1.1

Production
prodhost
[1.1.1.1, 2.2.2.2.2]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Собственно, результат говорит сам за себя. Лично мое мнение: груви скрипты могут полностью заменить проперти файлы, к тому же скрипт обладает большими возможностями, чем проперти файл. А как вы считаете, применим ли такой подход на вашем проекте?&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>SQL для мануальных тестировщиков</title>
      <link>localhost/sql-dlia-manualnykh-tiestirovshchikov/index.html</link>
      <pubDate>Sun, 10 May 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">sql-dlia-manualnykh-tiestirovshchikov/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лекция предназначенная для мануальных тестироовщиков. Речь будет идти про SQL. Полезно тем, кто хотел бы изучить основыи научиться писать запросы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/JfhtwAyQbT4?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/83VuI7aTVZo?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/5XjyHjzbLEo?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>4 библиотеки, о которых должен знать каждый Автоматизатор</title>
      <link>localhost/davaitie-poghovorim-pro-asserty/index.html</link>
      <pubDate>Tue, 5 May 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">davaitie-poghovorim-pro-asserty/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самая выразительная часть хорошо написанного теста - хорошо написанный assert (acсершин, ассерт далее). Assert подтверждает поведение системы, которое вы ожидаете. Хороший assert должен с первого взгляда показывать, что делает тест. Ни в коем случае в ваших тестах не должно быть циклов, в недрах которых будет спрятан assert, и вам нужно будет потратить уйму времени, чтобы разобраться с тем, что происходит. Более того, любая не тривиальная логика в тест кейсе повышает риск того, что тест сам по себе неправильный.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.itshouldjustworktm.com/wp-content/uploads/2012/03/assert-sign-photoshopped.jpg&quot; alt=&quot;assert sign photoshopped&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В последние годы значительно увеличилось количество подходов, инструментов и библиотек, которые позволяют просто и быстро писать легко читаемый код. Это касается как кода программы, так и кода тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В области написания тестов существует много библиотек, которые поддерживают понятные ассершины на любом языке. Вы можете спросить: &quot;А зачем оно нужно?&quot;. Легко читаемые ассершины - это самый простой путь написания утверждений в более естественной, более доступной и более экспрессивной манере.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Существует два подхода для написания ассертов. Первый - используя ключевое слово &quot;assert&quot;, второй же - используя такие слова как &lt;strong&gt;&quot;should&quot;&lt;/strong&gt; или &lt;strong&gt;&quot;expect&quot;&lt;/strong&gt;. Первый берет свое начало из более традиционного стиля написания юнит тестов и фокусируется на тестировании и верификации. Второй - более BDD - ориентирован - слова &quot;should&quot; и &quot;expect&quot; описывают поведение, которое вы ожидаете от системы. В этой заметке я предлагаю рассмотреть несколько библиотек, которые помогут в написании понятных ассертов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Аssertions in JavaScript.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JavaScript обладает большим количеством библиотек, которые помогают делать ассерты более выразительными. Jasmine имеет встроенную функцию &lt;code&gt;expect()&lt;/code&gt;. Такие библиотеки как &lt;strong&gt;Should.js&lt;/strong&gt; и &lt;strong&gt;Chai&lt;/strong&gt; поддерживают схожие функции.
Я покажу пару примеров из библиотеки &lt;strong&gt;Chai&lt;/strong&gt;, так как она является самой гибкой и поддерживает оба формата: как &lt;code&gt;expect()&lt;/code&gt; и &lt;code&gt;should()&lt;/code&gt;, так и старый формат - assert. &lt;strong&gt;Chai&lt;/strong&gt; фокусируется на использовании цепочек для того, чтобы сделать утверждения более читабельными и выразительными.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var expect = require(&apos;chai&apos;).expect

var medal = &quot;Bronze&quot;;
...
expect(medal).to.equal(&apos;Bronze&apos;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chai поддерживает богатый набор ассертов для коллекций:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var obtainableStatuses = [&apos;Silver&apos;,&apos;Gold&apos;,&apos;Platinum&apos;]
...
expect(obtainableStatuses).to.have.length(3).and.to.include(&apos;Gold&apos;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и наконец assert в стиле BDD:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var expect = require(&apos;chai&apos;).should();

medal.should.equal(&apos;Bronze&apos;);
obtainableStatuses.should.have.length(3).and.include(&apos;Silver&apos;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Следует отметить, что оба подхода одинаково выразительны. Таким образом выбор стиля написания зависит от персональных предпочтений. Лично мой выбор в пользу &lt;strong&gt;should&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Assertions in Java.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Буду немного Капитаном Очевидностью и скажу, что библиотеки для написания внятных утверждений существуют и в Java. Они менее выразительны, чем их динамический эквивалент. В Java существуют стандартные утверждения, которые можно получить, используя такие всем известные библиотеки, как &lt;strong&gt;JUnit&lt;/strong&gt; и &lt;strong&gt;TestNG&lt;/strong&gt;. Но ассершины, которые они предоставляют, как по мне, бедноваты и слишком просты по сравнению с теми, о которых далее пойдет речь.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я приведу пример нескольких библиотек, которые, по моему мнению, могут быть полезными.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;1. Hamcrest&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пожалуй, самая известная библиотека из этой области. Основной метод, который в ней используется, называется &lt;strong&gt;assertThat()&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

import junit.framework.TestCase;

public class BiscuitTest extends TestCase {
  public void testEquals() {
    Biscuit theBiscuit = new Biscuit(&quot;Ginger&quot;);
    Biscuit myBiscuit = new Biscuit(&quot;Ginger&quot;);
    assertThat(theBiscuit, equalTo(myBiscuit));
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самое приятное, что она предоставляет большой выбор матчеров:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Core
    anything - always matches, useful if you don&apos;t care what the object under test is
    describedAs - decorator to adding custom failure description
    is - decorator to improve readability - see &quot;Sugar&quot;, below
Logical
    allOf - matches if all matchers match, short circuits (like Java &amp;amp;&amp;amp;)
    anyOf - matches if any matchers match, short circuits (like Java ||)
    not - matches if the wrapped matcher doesn&apos;t match and vice versa
Object
    equalTo - test object equality using Object.equals
    hasToString - test Object.toString
    instanceOf, isCompatibleType - test type
    notNullValue, nullValue - test for null
    sameInstance - test object identity
Beans
    hasProperty - test JavaBeans properties
Collections
    array - test an array&apos;s elements against an array of matchers
    hasEntry, hasKey, hasValue - test a map contains an entry, key or value
    hasItem, hasItems - test a collection contains elements
    hasItemInArray - test an array contains an element
Number
    closeTo - test floating point values are close to a given value
    greaterThan, greaterThanOrEqualTo, lessThan, lessThanOrEqualTo - test ordering
Text
    equalToIgnoringCase - test string equality ignoring case
    equalToIgnoringWhiteSpace - test string equality ignoring differences in runs of whitespace
    containsString, endsWith, startsWith - test string matching&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Более подробно можно посмотреть на их &lt;a href=&quot;https://code.google.com/p/hamcrest/wiki/Tutorial&quot;&gt;сайте&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично я пользуюсь этой библиотекой.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2. FestAssert&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как утрверждают сами разработчики:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
FEST Assertions 2.0 is a Java library that provides a fluent interface for writing assertions. Its main goal is to improve test code readability and make maintenance of tests easier.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Парочка примеров использования:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import static org.fest.assertions.api.Assertions.*;

// common assertions
assertThat(yoda).isInstanceOf(Jedi.class);
assertThat(frodo.getName()).isEqualTo(&quot;Frodo&quot;);
assertThat(frodo).isNotEqualTo(sauron);
assertThat(frodo).isIn(fellowshipOfTheRing);
assertThat(sauron).isNotIn(fellowshipOfTheRing);

// String specific assertions
assertThat(frodo.getName()).startsWith(&quot;Fro&quot;).endsWith(&quot;do&quot;)
                           .isEqualToIgnoringCase(&quot;frodo&quot;);

// collection specific assertions
assertThat(fellowshipOfTheRing).hasSize(9)
                               .contains(frodo, sam)
                               .excludes(sauron);
// throwable specific assertions
try {
  fellowshipOfTheRing.get(9); // argggl !
} catch (Exception e) {
  assertThat(e).isInstanceOf(IndexOutOfBoundsException.class)
               .hasMessage(&quot;Index: 9, Size: 9&quot;)
               .hasNoCause();
}

// map specific assertions (One ring and elves ring bearers initialized before)
assertThat(ringBearers).hasSize(4)
                       .includes(entry(oneRing, frodo), entry(nenya, galadriel))
                       .excludes(entry(oneRing, aragorn));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично я на проектах активно не использовал эту библиотеку, но меня она привлекла тем, что есть готовые ассершины для &lt;strong&gt;Joda Time&lt;/strong&gt;, &lt;strong&gt;Guava&lt;/strong&gt;. Также есть возможность использования компараттора для утверждений.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// frodo and sam are instances of Character with Hobbit race (obviously :), they are not equal ...
assertThat(frodo).isNotEqualTo(sam);
// ... but if we compare race only, they are (raceComparator implements Comparator&amp;lt;Character&amp;gt;)
assertThat(frodo).usingComparator(raceComparator).isEqualTo(sam);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Более подробно можно посмотреть и скачать &lt;a href=&quot;https://github.com/alexruiz/fest-assert-2.x&quot;&gt;здесь&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Обе эти библиотеки очень похожи, они предлагают большой набор матчеров. Например для того, чтобы проверить, что список содержит элементы. В хамкресте это делается так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;assertThat(member.getUnachievedStatuses(), hasItems(GOLD,PLATINUM));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В &lt;strong&gt;FestAssert&lt;/strong&gt; это будет выглядеть так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;assertThat(member.getUnachievedStatuses()).contains(GOLD,PLATINUM);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;К сожалению, FestAssert больше не активен, поэтому взамен этой библиотеки предлагаю посмотреть на следующую в списке.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;3. AssertJ&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;AssertJ&lt;/strong&gt; - форк библиотеки Fest Assert, предоставляет большой набор утверждений, сообщений об ошибках и позволяет улучшить читабельность тестового кода.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// unique entry point to get access to all assertThat methods and utility methods (e.g. entry)
import static org.assertj.core.api.Assertions.*;

// common assertions
assertThat(frodo.getName()).isEqualTo(&quot;Frodo&quot;);
assertThat(frodo).isNotEqualTo(sauron)
                 .isIn(fellowshipOfTheRing);

// String specific assertions
assertThat(frodo.getName()).startsWith(&quot;Fro&quot;)
                           .endsWith(&quot;do&quot;)
                           .isEqualToIgnoringCase(&quot;frodo&quot;);

// collection specific assertions
assertThat(fellowshipOfTheRing).hasSize(9)
                               .contains(frodo, sam)
                               .doesNotContain(sauron);

// using extracting magical feature to check fellowshipOfTheRing characters name :)
assertThat(fellowshipOfTheRing).extracting(&quot;name&quot;).contains(&quot;Boromir&quot;, &quot;Gandalf&quot;, &quot;Frodo&quot;, &quot;Legolas&quot;)
                                                  .doesNotContain(&quot;Sauron&quot;, &quot;Elrond&quot;);

// map specific assertions, ringBearers initialized with the elves rings and the one ring bearers.
assertThat(ringBearers).hasSize(4)
                       .contains(entry(oneRing, frodo), entry(nenya, galadriel))
                       .doesNotContainEntry(oneRing, aragorn);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Больше примеров и документации можно найти на их &lt;a href=&quot;http://joel-costigliola.github.io/assertj/&quot;&gt;сайте&lt;/a&gt;. Лично я в своем следующем проекте обязательно буду использовать &lt;strong&gt;AssertJ&lt;/strong&gt;, так как он, по моему личному мнению, лучше и проще, чем &lt;strong&gt;Hamcrest&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;4.Google Truth&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще одна библиотечка от одноименной компании с очень приятным именем.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Set&amp;lt;Foo&amp;gt; foo = ...;
assertTrue(foo.isEmpty()); // or, shudder, foo.size() == 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Дает непонятное и нечитабельное исключение:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:92)
    at org.junit.Assert.assertTrue(Assert.java:43)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;С применением Truth читабельность и понятность гораздо выше:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Set&amp;lt;Foo&amp;gt; foo = ...;
assertThat(foo).isEmpty()


org.truth0.FailureStrategy$ThrowableAssertionError: Not true that  is empty
    at org.truth0.FailureStrategy.fail(FailureStrategy.java:33)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хотите узнать больше и попробовать, смотрите здесь &lt;a href=&quot;http://google.github.io/truth/&quot;&gt;cайт&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот собственно и все.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Небольшой итог об этих монстрах:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Hamcrest&lt;/strong&gt; и &lt;strong&gt;FestAssert&lt;/strong&gt; играют подобные роли в Java-based BDD. Hamcrest более гибкий и легко расширяемый, но FestAssert обладает более простым синтаксисом и более прост в использовании. &lt;strong&gt;AssertJ&lt;/strong&gt; - улучшенная версия &lt;strong&gt;FestAssert&lt;/strong&gt;, которая обладает уймой полезных фишек.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом все библиотеки предназначены для того, чтобы сделать юнит тесты проще и понятнее. Хороших вам assertов =)&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>CI &amp; Build tools for newbies</title>
      <link>localhost/ci-build-tools-for-newbies/index.html</link>
      <pubDate>Fri, 1 May 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">ci-build-tools-for-newbies/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Новый пост - лекция про билд тулы и континиус интегрейшин.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/XpVNDRRjtsw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/dacqCkdFbP8?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/CVItdJV_cqM?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Свое АОP в JDK</title>
      <link>localhost/svoie-aop/index.html</link>
      <pubDate>Sun, 29 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">svoie-aop/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка о том, как можно реализовать &lt;strong&gt;AOP&lt;/strong&gt; без &lt;strong&gt;Spring&lt;/strong&gt; и &lt;strong&gt;AspectJ&lt;/strong&gt;. Для тех, кто не особо в курсе, что такое AOP смотреть суда. Итак, приступим. Создадим нашу мини программу:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public interface Calculator {
    public int calculate( int a , int b);
}

public class CalculatorImpl implements Calculator {
    @Override
    public int calculate(int a, int b) {
        System.out.println(&quot;**********Actual Method Execution**********&quot;);
        return a/b;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Класс &lt;strong&gt;Calculator&lt;/strong&gt; будет имеенно тем классом, который мы будем проксировать. В java есть такой интересный интерфейс &lt;strong&gt;InvocationHandler&lt;/strong&gt;, его мы и будем использовать для нашей реализации &lt;strong&gt;AOP&lt;/strong&gt;. Создадим абстрактный &lt;strong&gt;Handler&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public abstract class AbstractHandler implements InvocationHandler {

    private Object targetObject;

    public void setTargetObject(Object targetObject) {
        this.targetObject = targetObject;
    }

    public Object getTargetObject() {
        return targetObject;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создадим &lt;strong&gt;ProxyFactory&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class ProxyFactory {

public static Object getProxy(Object targetObject,
        List&amp;lt;AbstractHandler&amp;gt; handlers) {
    Object proxyObject = null;
    if (handlers.size() &amp;gt; 0) {
        proxyObject = targetObject;
        for (int i = 0; i &amp;lt; handlers.size(); i++) {
            handlers.get(i).setTargetObject(proxyObject);
            proxyObject = Proxy.newProxyInstance(targetObject.getClass()
                    .getClassLoader(), targetObject.getClass()
                    .getInterfaces(), handlers.get(i));
        }
        return proxyObject;
    } else {
        return targetObject;
    }
}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В AOP существует несколько срезов: &lt;strong&gt;Before&lt;/strong&gt;, &lt;strong&gt;After&lt;/strong&gt;, &lt;strong&gt;AfterThrowing&lt;/strong&gt;, &lt;strong&gt;AfterReturning&lt;/strong&gt; и &lt;strong&gt;Around&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Так как реализации каждого среза могут быть разными, для разных случаев, создадим для них абстрактные классы:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пример для &lt;strong&gt;AfterHandler&lt;/strong&gt; и &lt;strong&gt;BeforeHandler&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public abstract class AfterHandler extends AbstractHandler {

    /**
     * Handles after the execution of method.
     *
     * @param proxy the proxy
     * @param method the method
     * @param args the args
     */
    public abstract void handleAfter(Object proxy, Method method, Object[] args);

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

        Object result = method.invoke(getTargetObject(), args);
        handleAfter(proxy, method, args);
        return result;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;AbstractBeforeHandler:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public abstract class BeforeHandler extends AbstractHandler {

    /**
     * Handles before execution of actual method.
     *
     * @param proxy the proxy
     * @param method the method
     * @param args the args
     */
    public abstract void handleBefore(Object proxy, Method method, Object[] args);

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        handleBefore(proxy, method, args);
        return method.invoke(getTargetObject(), args);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь нам нужно сделать конкретные реализации для каждого из срезов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class AfterHandlerImpl extends AfterHandler {

    @Override
    public void handleAfter(Object proxy, Method method, Object[] args) {
        //Provide your own cross cutting concern
        System.out.println(method.getName() + Arrays.toString(args));
        System.out.println(&quot;Handling after actual method execution ........&quot;);
    }
}

public class BeforeHandlerImpl extends BeforeHandler {

    @Override
    public void handleBefore(Object proxy, Method method, Object[] args) {
        //Provide your own cross cutting concern
        System.out.println(&quot;Handling before actual method execution ........&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь мы можем легко проксировать наш &lt;strong&gt;Calculator&lt;/strong&gt; класс:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class TestAopInJDK {

    public static void main(String[] args) {
        CalculatorImpl calcImpl = new CalculatorImpl();
        BeforeHandler before = new BeforeHandlerImpl();
        AfterHandler after = new AfterHandlerImpl();
        List&amp;lt;AbstractHandler&amp;gt; handlers = new ArrayList&amp;lt;AbstractHandler&amp;gt;();
        handlers.add(before);
        handlers.add(after);
        Calculator proxy = (Calculator) ProxyFactory.getProxy(calcImpl,
                handlers);
        int result = proxy.calculate(20, 10);
        System.out.println(&quot;FInal Result :::&quot; + result);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После запуска вывод в консоль оказывается таким:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Handling before actual method execution ........
**********Actual Method Execution**********
calculate[20, 10]
Handling after actual method execution ........
Final Result :::2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как вы можете заметить срабатывает Before, затем идет работа метода и затем срабатывает After.
&lt;strong&gt;P.S.&lt;/strong&gt;
Многие кто не сильно в теме могут сказать, что такое же можно было реализовать просто написав перед вызовом и после вызова sysout. Да, можно было, но AOP предназначено немного для других целей.Я уже описывал то как мы используем логер для действий вебдрайвера здесь. В своих фреймворках, я дополнительно логирую имена методов и параметры которые он принимают используя AOP. Это позволяет хранить весь код логирования в одном месте,а не розмазывать его по всем классам.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>А как вы логируете?</title>
      <link>localhost/a-kak-vy-loghiruietie/index.html</link>
      <pubDate>Sat, 28 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">a-kak-vy-loghiruietie/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Данной статьей хотелось бы поделиться тем, как я переизобрел велосипед и перестал писать логер после каждой строки кода.
Итак, начну с предыстории. Есть у меня проект который организован на основе &lt;strong&gt;Spring + Jbehave + Selenium&lt;/strong&gt;, все вроде как хорошо, тесты бегают, тесты падают. Но вот бывает такое, что тест идет и в одном методе выполняется пару действий - понять какое именно действие вызывает фейл, бывает очень сложно. Что в таком случае делать? Правильно - начинать логировать. А как логировать? Очень просто берем &lt;strong&gt;Slf4j&lt;/strong&gt; делаем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class SomePage {
    private static final Logger LOG = LoggerManager.getLoggger(SomePage.class);

    public void someMethod(){
        LOG.info(&quot;something happens&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как любит говорить один мой знакомый: &quot;казалось бы&quot;. Но здесь всего один метод. При увеличении строк кода, логер будет пропорционально захламлять код. В дополнение не всегда хочеться писать вот эту вот строку в каждом классе:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private static final Logger LOG = LoggerManager.getLoggger(SomePage.class);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Да, можно использовать &lt;strong&gt;Lombook&lt;/strong&gt;, но не все положительно относятся к библиотекам такого рода.
Передем к более насущной проблеме, скажем есть у вас метод:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void login(User user){
    driver.find(By.id(&quot;login&quot;)).sendKeys(user.name);
    driver.find(By.id(&quot;pass&quot;)).sendKeys(user.pass);
    driver.find(By.id(&quot;login_btn&quot;)).click();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как здесь залогировать то, что я заполнил два поля и тыцнул на кнопку? Первое что приходит на ум - просто добавить логер. А куда добавлять? Перед действием или после? А если я хочу и там и там? Давайте посмотрим:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void login(User user){
    LOG.info(&quot;Type login {}&quot;,user.name);
    driver.find(By.id(&quot;login&quot;)).sendKeys(user.name);
    LOG.info(&quot;Type password {}&quot;,user.pass);
    driver.find(By.id(&quot;pass&quot;)).sendKeys(user.pass);
    LOG.info(&quot;Click login btn);
    driver.find(By.id(&quot;login_btn&quot;)).click();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Последний кусок кода выглядит просто ужасно. В таких ситуациях очень кстати приходиться &lt;strong&gt;Selenium WebDriver Event Listener Interface&lt;/strong&gt;. Этот интерфейс предоставляет доступ ко всем основным действиям драйвера:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class EventHandler implements WebDriverEventListener{

    public void afterChangeValueOf(WebElement arg0, WebDriver arg1) {
    // TODO Auto-generated method stub
    }

    public void afterClickOn(WebElement arg0, WebDriver arg1) {
    // TODO Auto-generated method stub
    }

    public void afterFindBy(By arg0, WebElement arg1, WebDriver arg2) {
    // TODO Auto-generated method stub
    }

    public void afterNavigateBack(WebDriver arg0) {
    // TODO Auto-generated method stub
    }
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все что нужно сделать, просто реализовать методы, затем зарегистрировать ваш листенер и начать наслаждаться происходящим:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.events.EventFiringWebDriver;

public class Main {

    public static void main(String[] args) {

        FirefoxDriver driver = new FirefoxDriver();
        EventFiringWebDriver eventDriver = new EventFiringWebDriver(driver);

        EventHandler handler = new EventHandler();
        eventDriver.register(handler);
        eventDriver.get(&quot;http://www.toolsqa.com/automation-practice-switch-windows/&quot;);
        WebElement element = eventDriver.findElement(By.id(&quot;target&quot;));
        element.click();

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Используя такой подход можно легко и просто залогировать все действия драйвера.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>BDD In Test Automation lecture</title>
      <link>localhost/bdd-in-test-automation-lecture/index.html</link>
      <pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">bdd-in-test-automation-lecture/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Моя лекция, которую я проводил в компании, для студентов. В лекции попытался доступным языком рассказать о том, что такое BDD и как его имплеменитровать в жизнь. Сделал небольше овервью таких иснтрументов как &lt;strong&gt;Cucumber&lt;/strong&gt;, &lt;strong&gt;JBehave&lt;/strong&gt;, &lt;strong&gt;Spock&lt;/strong&gt;, &lt;strong&gt;Lettuce&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/9_Ij3ux7l0Y?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/tL9Yavmv0nM?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/PtGkytbbS2o?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/GJFvMQ_IW1Y?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Lettuce Python</title>
      <link>localhost/lettuce-python/index.html</link>
      <pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">lettuce-python/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Готовился я как-то к презентации по Behaviour Driven Development, готовил практические примеры по различным тулам и решил показать пример того как можно реализовать BDD с помощью Python. Посмотрел на Behave и на Lettuce см тут. Мой выбор пал на второй инструмент, не знаю почему, видимо потому что тесты писать проще и быстрее. Дабы не быть голословным приведу пример. Начнем с установки. Ставим Python &lt;strong&gt;2.7 (Это ВАЖНО - на Python 3 работать не будет)&lt;/strong&gt;. Ставим lettuce и selenium:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;pip install lettuce
pip install selenium
pip install PyHumcrest&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создадим иерархию папок:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;lettuce_demo
    | features&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В корневом каталоге создадим файлик &lt;strong&gt;terrain.py&lt;/strong&gt;, он будет содержать команды, которые будут выполнять на разных стадиях исполнения тестов, в данном случае файл имеет такое содержание:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from lettuce import before, after, world
from selenium import webdriver
from mapping import site_mapping


@before.each_feature
def setup(server):
    world.browser = webdriver.Firefox()
    world.mapping = site_mapping


@after.all
def tear_down(total):
    world.browser.close()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем, в корне,создаем файл &lt;strong&gt;mapping.py&lt;/strong&gt;. Этой файл содержит локаторы элементов, такой себе &lt;strong&gt;PageObject&lt;/strong&gt;, только необычный:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;host_url = &quot;http://pn.com.ua&quot;

site_mapping = {
    &quot;pc_search&quot;: {
        &quot;url&quot;: host_url,
        &quot;computers&quot;: &quot;.//*[@id=&apos;page-content-wrap&apos;]/div/div[1]/div/h1[1]/a&quot;,
        &quot;notebook&quot;: &quot;.//*[@id=&apos;page-content-wrap&apos;]/div[3]/div[1]/div/div[2]/a&quot;,
        &quot;model_number&quot;: &quot;.//*[@id=&apos;page-content-wrap&apos;]/div[3]/div[1]/div[1]/div/div[2]/div[1]/b&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В локаторых можно использовать как &lt;strong&gt;XPath&lt;/strong&gt; так и СSS Selectors.
В папке features создаем &lt;strong&gt;pc.feature&lt;/strong&gt; - этот файл содержит описание теста.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Feature: search
  Scenario: Search pc
    Open &quot;pc_search&quot; page
    Click &quot;computers&quot;
    Click &quot;notebook&quot;
    See &quot;2703&quot; in &quot;model_number&quot;

  Scenario: Search pc fail
    Open &quot;pc_search&quot; page
    Click &quot;computers&quot;
    Click &quot;notebook&quot;
    See &quot;27012&quot; in &quot;model_number&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В создаем &lt;strong&gt;features/steps.py&lt;/strong&gt; - файл содержит описания шагов, используемых в &lt;strong&gt;*.feature&lt;/strong&gt; файлах&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from lettuce import step, world
from hamcrest import *

@step(r&apos;Open &quot;(.*)&quot; page&apos;)
def should_open_main_page(step, page):
    world.current_page = world.mapping[page]
    world.browser.get(world.current_page[&apos;url&apos;])

@step(u&apos;Click &quot;([^&quot;]*)&quot;&apos;)
def click_group1(step, element):
    el = world.browser.find_element_by_xpath(world.current_page[element])
    el.click()

@step(u&apos;See &quot;([^&quot;]*)&quot; in &quot;([^&quot;]*)&quot;&apos;)
def see_group1_in_group2(step, text, element):
    el = world.browser.find_element_by_xpath(world.current_page[element])
    assert_that(el.text, equal_to(text))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот и все. В консоли в корне проекта пишем: &lt;strong&gt;lettuce&lt;/strong&gt; - вуаля видим как запускается браузер и проходят тесты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Вывод:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lettuce могут использовать как тестировщики так и разработчики.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Высокая устойчивость к изменениям в верстке и структуре сайта в целом благодоря mapping.py&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Выведите ваши тесты на новый уровень!</title>
      <link>localhost/vyvieditie-vashi-tiesty-na-novyi-urovien/index.html</link>
      <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">vyvieditie-vashi-tiesty-na-novyi-urovien/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пару месяцев назад, я задумался - вот есть у меня пару сотен тестов, фреймворк там да, все как положенно! Тесты бегают 24\7 с 98% пасс результатом, отчет собирается и успешно уходит всем манагерам. Казалось бы - жизнь удалась. Но, за всем прекрасным всегда скрывается, что то ужасное. Решил я попробовать прогнать проект через &lt;strong&gt;Sonar&lt;/strong&gt;. Собственно таким введением я хотел начать рассказ о том стоит ли применять статические анализаторы кода для фреймворка и тестов. Статический анализатор предназначен для того, чтобы следить за чистотой кода и отслеживать ошибки типа переполнение буфера или возможный &lt;em&gt;NullPointerException&lt;/em&gt;. Устанавливается сонар очень просто: скачиваем архив, распаковываем, ставим &lt;strong&gt;MySQL&lt;/strong&gt;, прописываем в пропертях сонара путь к базе, стартуем батник и все. Несколько простых шагов и у нас есть сервер. Далее нам нужно просканировать проект. Если проект на &lt;strong&gt;Maven&lt;/strong&gt;, то просто в pom нужно вписать:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;project&amp;gt;
  ...
  &amp;lt;build&amp;gt;
    &amp;lt;!-- To define the plugin version in your parent POM --&amp;gt;
    &amp;lt;pluginManagement&amp;gt;
      &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
          &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;sonar-maven-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;
        &amp;lt;/plugin&amp;gt;
        ...
      &amp;lt;/plugins&amp;gt;
    &amp;lt;/pluginManagement&amp;gt;
    &amp;lt;!-- To use the plugin goals in your POM or parent POM --&amp;gt;
    &amp;lt;plugins&amp;gt;
      &amp;lt;plugin&amp;gt;
        &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;sonar-maven-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;
      &amp;lt;/plugin&amp;gt;
      ...
    &amp;lt;/plugins&amp;gt;
  &amp;lt;/build&amp;gt;
  ...
&amp;lt;/project&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее в Maven setting.xml добавляем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;profile&amp;gt;
    &amp;lt;id&amp;gt;sonar&amp;lt;/id&amp;gt;
    &amp;lt;activation&amp;gt;
       &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;
    &amp;lt;/activation&amp;gt;
&amp;lt;properties&amp;gt;
&amp;lt;sonar.jdbc.url&amp;gt;jdbc:postgresql://localhost/sonar&amp;lt;;/sonar.jdbc.url&amp;gt;
&amp;lt;sonar.jdbc.driver&amp;gt;org.postgresql.Driver&amp;lt;/sonar.jdbc.driver&amp;gt;
&amp;lt;sonar.jdbc.username&amp;gt;user&amp;lt;/sonar.jdbc.username&amp;gt;
&amp;lt;sonar.jdbc.password&amp;gt;password&amp;lt;/sonar.jdbc.password&amp;gt;
&amp;lt;!-- SERVER ON A REMOTE HOST --&amp;gt;
&amp;lt;sonar.host.url&amp;gt;http://localhost:9000&amp;lt;/sonar.host.url&amp;gt;
   &amp;lt;/properties&amp;gt;
&amp;lt;/profile&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот и все! При запущенном сервере - выполняем &lt;strong&gt;mvn sonar:sonar&lt;/strong&gt; ждем завершения сканирования. Далее отрываем в браузере адрес, который мы прописывали:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;sonar.host.url&amp;gt;http://localhost:9000&amp;lt;/sonar.host.url&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Проделав все эти действия, я был шокирован. В проекте был ужжаасный код. Сделав выводы, на новом проете, я начал применять Sonar с самого первого дня. Спустя три месяца, мы создали 300 тестов. Техникал дебт равен 0.1. А сложность кода - 1.2. Вы можете себе представить такое? Разработчики даже подшучивают иногда, что тесты &quot;чище&quot; чем сам проект. Вот так вот Sonar помог повыситься качество кода тестов. А вы используете статические анализаторы кода?&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>WebDriver factory без IF-ELSE</title>
      <link>localhost/webdriver-factory-biez-if-else/index.html</link>
      <pubDate>Sat, 7 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">webdriver-factory-biez-if-else/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой заметке покажу, как можно написать WebDriver factory без применения IF-ELSE.
Зачастую во фреймворках в случае кросс-браузерного тестирования приходится писать драйвер фэктори. Большинство реализаций, которые мне приходилось видеть, выглядели так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;BrowserFactory.class&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class BrowserFactory{
    public static final WebDriver DEFAULT_FF = new FirefoxDriver();

 public static WebDriver getDriver(String name){
     WebDriver driver = null;
     if(&quot;FIREFOX&quot;.equalsIgnoreCase(name)){
        driver= new FirefoxDriver();
     }else if(&quot;CHROME&quot;.equalsIgnoreCase(name)){
         driver = new ChromeDriver();
     }else if(&quot;IE&quot;.equalsIgnoreCase(name)){
         driver = new InternetExplorerDriver();
     }else {
         driver = DEFAULT_FF;
     }
     return driver;
 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но такая реализация, скажем так, не самая хорошая: читабельность кода страдает, человеку приходится гадать, как же правильно задать имя браузера, ну и самое неприятное - куча if-else. Давайте посмотрим, как можно улучшить ситуацию.
Объектно-ориентированные языки программирования обладают мощнейщим принципом - полиморфизмом. Его мы и будем использовать, чтобы удалить if-else в коде. В результате читабельность кода значительно повысится.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Рефлексия&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Первое &quot;топорное&quot; решение (я назвал бы его &quot;решением для реальных пацанов&quot;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Browsers{
    public static WebDriver newBrowser(String name){
        return Class.forName(name).newInstance();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Смотрится очень просто, НО сложность заключается в том, что человек должен помнить полное имя класса. К тому же, использование рефлексии повышает степень брутальности в пару раз. Поэтому таких решений следует избегать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Map&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Второе решение более приемлемое - использование Map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Browsers{
    private static Map&amp;lt;String,WebDriver&amp;gt; drivers = new HashMap&amp;lt;&amp;gt;(){
        put(&quot;CHROME&quot;,new ChromeDriver());
        put(&quot;FIREFOX&quot;,new FirefoxDriver());
        put(&quot;IE&quot;,new InternetExplorerDriver());
    }

    public static WebDriver newDriver(String name){
        return drivers.get(name);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Это решение обладает недостатком: нужно знать правильное имя драйвера, которое задано в Map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Switch&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;switch (name) {
    case &quot;FIREFOX&quot;: return new FirefoxDriver();
    case &quot;CHROME&quot;: return new ChromeDriver();
    case &quot;IE&quot;: return new InternetExplorerDriver();
    default: return DEFAULT_FF;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Enum&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самое элегантное решение:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public enum Browsers {
    CHROME {
        public WebDriver create(){
            return new ChromeDriver();
        }
    },
    IE {
        public WebDriver create(){
            return new InternetExplorerDriver();
        }
    },
    FIREFOX {
        public WebDriver create() {
            return new FirefoxDriver();
        }
    };

    public WebDriver create(){
        return null;
    }
}

class Test {
    public static void main(String[] args) {
       WebDriver driver = Browsers.FIREFOX.create();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Классно, не правда ли? Нету надоедливых if-else, нету строк, которые нужно помнить - просто вызываем нужный нам тип драйвера и все. Лично я предпочитаю этот метод.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;P.S. Конструкция if-else делает код сложным для чтения, поэтому нужно стараться избегать их использования.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Замечательный каталог рефакторинга</title>
      <link>localhost/zamiechatielnyi-katalogh-riefaktoringha/index.html</link>
      <pubDate>Sun, 1 Mar 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">zamiechatielnyi-katalogh-riefaktoringha/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Совсем недавно решил окунуться в мир &quot;правильного&quot; рефакторинга. Зачастую так бывает: люди думают, что они умеют рефакторить правильно. Изменил пару строк, переименовал пару переменных - зарефакторил. Порешал как царь =). Но на самом деле по сравнению с настоящим рефакторингом - это всего лишь махание руками и трата драгоценного времени. Чтобы научиться рефакторить и узнать, зачем это делать, можно почитать книгу Фаулера - &quot;Рефакторинг - улучшение существующего кода&quot;. А еще можно зайти на этот замечательный ресурс, в котором описаны основные проблемы - &quot;запахи кода&quot;, а также советы по их устранению и улучшению существующего кода.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;http://refactoring.guru/ru/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Удачного рефакторинга!&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Gradle run single TestNG method</title>
      <link>localhost/gradle-run-single-test-method/index.html</link>
      <pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">gradle-run-single-test-method/index.html</guid>
      	<description>
	&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://kaczanowscy.pl/tomek/sites/default/files/2012_04_uncle_sam_170.png&quot; alt=&quot;2012 04 uncle sam 170&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the shortest remark ever. Just a few word and a few lines of code. So to run single test with &lt;strong&gt;Gradle&lt;/strong&gt; and &lt;strong&gt;TestNG&lt;/strong&gt; you can use one of this approaches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run someSpecificFeature method from &lt;strong&gt;SomeTest&lt;/strong&gt; in specific &lt;strong&gt;arg.gradle&lt;/strong&gt; package:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;gradle test --tests org.gradle.SomeTest.someSpecificFeature&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run &lt;strong&gt;someSpecificFeature&lt;/strong&gt; method from &lt;strong&gt;SomeTest&lt;/strong&gt; in any package:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;gradle test --tests *SomeTest.someSpecificFeature&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run all methods in SomeSpecificTest class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;gradle test --tests *SomeSpecificTest&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run all in specific package:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;gradle test --tests all.in.specific.package*&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run all in classes which name starts with IntegTest:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;gradle test --tests *IntegTest

gradle test --tests *IntegTest*ui*&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run &lt;strong&gt;someTestTask&lt;/strong&gt; from any &lt;strong&gt;UiTest&lt;/strong&gt; and &lt;strong&gt;someTestTask&lt;/strong&gt; from any &lt;strong&gt;WebTest*ui&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;gradle someTestTask --tests *UiTest someOtherTestTask --tests *WebTest*ui&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cheers! Thats all;)&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Мощь Groovy: Reading URL Content</title>
      <link>localhost/groovy-power-reading-url-content/index.html</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">groovy-power-reading-url-content/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Groovy adds some methods to the URL class which make reading data from an URL easy. For example the text property returns the complete contents of the document that is identified by the URL. Or we can use the &lt;strong&gt;eachLine()&lt;/strong&gt; method to loop through each line of the document. Groovy also adds a &lt;strong&gt;toURL()&lt;/strong&gt; to the String class to make a URL object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def url = &quot;http://www.mrhaki.com/url.html&quot;.toURL()

assert &apos;&apos;&apos;\
     Simple test document
     for testing URL extensions
     in Groovy.
&apos;&apos;&apos; == url.text

def result = []
    url.eachLine {
        if (it =~ /Groovy/) {
        result &amp;lt;&amp;lt; it
    }
}
assert [&apos;in Groovy.&apos;] == result

url.withReader { reader -&amp;gt;
    assert &apos;Simple test document&apos; == reader.readLine()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s all, just simple.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>&quot;Правильный&quot; тестовый фреймворк</title>
      <link>localhost/pravilnyi-tiestovyi-frieimvork/index.html</link>
      <pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">pravilnyi-tiestovyi-frieimvork/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Несколько мыслей о том, каким должен быть &quot;правильный&quot; тестовый фреймворк.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.ymag.it/wp-content/uploads/2014/11/robot_in_movimento.jpg&quot; alt=&quot;robot in movimento&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По моему мнению, степень правильности определяется исходя из требований и задач, которые должен будет выполнять фреймворк. К примеру, если на проекте есть и веб-сервисы и UI часть, то при написании фреймворка для UI тестирования следовало бы изначально закладывать возможность создавать предусловия для тестов используя веб-серввисы. Если же возможности такой нету, то просто делайте архитектуру для UI тестирования.
Чаще всего начинающие автоматизаторы совершают большую ошибку - делаем, как получается, а потом будем рефакторить. Зачастую это самое &quot;потом&quot; не наступает. Но все же давайте мыслить структурировано: фреймворк должен быть модульным. Если вы пишите фреймворк на объектно-ориентированном языке ( &lt;strong&gt;Java,C#,Python&lt;/strong&gt; ), то вы обязаны выделять функциональности и &quot;отделять мух от котлет&quot;. В противном случае будет &quot;макаронный код&quot;, а к нему в придачу большие затраты на поддержку тестов и всей инфраструктуры. Модульный фреймворк можно сравнить с конструктором лего.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.euromag.ru/storage/c/2010/09/15/1284538112,397574_86.jpg&quot; alt=&quot;1284538112,397574 86&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Когда есть такие маленкие блоки, как &lt;strong&gt;PageObject&lt;/strong&gt;, &lt;strong&gt;DataProvider&lt;/strong&gt;,&lt;strong&gt;DAO&lt;/strong&gt;, &lt;strong&gt;BaseTest&lt;/strong&gt; class, собрать из этого всего фреймворк может даже джуниор, который пришел к вам на проект пару недель назад. Еще одно преимущество модульности в том, что вы легко можете заменить один элемент на другой, поменяв реализацию либо инструмент. Модульность дает вам гораздо больший радиус поворота. Скажем, когда у вас на проекте 15 - 20 тестовых сценариев, то вы можете не задумываясь в них ковыряться и тратить по 15-20 минут в день на поддержку, а вот когда их становится 1500-2000, то тут начинаются пляски с бубном, сопли и визги: &quot;какой же хреновый у нас фреймворк, че ж мы раньше-то не делали хорошо, сейчас уже поздно&amp;#8230;&amp;#8203;&quot; Так вот, чтобы избежать такой ситуации, мой вам совет перед началом разработки фреймворка: подумайте, выделите основные части, запрограммируйте их в виде модулей, напишите пару тестов на конкретные функциональности, поэкспериментируйте, найдите свой рецепт успеха. Лично мой опыт показывает, что модульный фреймворк выигрывает у &quot;макаронного кода&quot; по всем параметрам.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Небольшой видосик про Jenkins</title>
      <link>localhost/niebolshoi-vidosik-pro-jenkins/index.html</link>
      <pubDate>Sat, 14 Feb 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">niebolshoi-vidosik-pro-jenkins/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Решил поделиться одним из первых своих выступлений! Enjoy;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/tXFENp-RFWs?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Java Simple REST Client</title>
      <link>localhost/java-rest-client/index.html</link>
      <pubDate>Sat, 7 Feb 2015 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">java-rest-client/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Новая статейка о том, как можно сваять клиент на Java для работы с REST API.
Я покажу два способа, как можно добиться желаемого результата быстро и качественно. Оба способа предусматривают использование сторонних библиотек.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Способ первый - Apache HTTPClient&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Библиотека &lt;code&gt;Apache HttpClient&lt;/code&gt; значительно упрощает обработку HTTP запросов. Для того, чтобы ею воспользоваться, можно пойти на сайт Apache и там почитать, поковыряться, но я использую &lt;code&gt;Maven&lt;/code&gt; - поэтому у меня просто дэпэнденси:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;4.3.6&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ниже показаны примеры запросов GET:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
public class Test {
    public static void main(String[] args) throws ClientProtocolException,IOException {
        HttpClient client = new DefaultHttpClient();
        HttpGet request = new HttpGet(&quot;http://restUrl&quot;);
        HttpResponse response = client.execute(request);
        BufferedReader rd = new BufferedReader (new InputStreamReader(response.getEntity().getContent()));
        String line = &quot;&quot;;
        while ((line = rd.readLine()) != null) {
          System.out.println(line);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;POST:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
public class Test {
    public static void main(String[] args) throws ClientProtocolException, IOException {
        HttpClient client = new DefaultHttpClient();
        HttpPost post = new HttpPost(&quot;http://restUrl&quot;);
        StringEntity input = new StringEntity(&quot;product&quot;);
        post.setEntity(input);
        HttpResponse response = client.execute(post);
        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line = &quot;&quot;;
        while ((line = rd.readLine()) != null) {
            System.out.println(line);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Существует возможность отправлять несколько параметрос с помощью POST:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
public class Test {
    public static void main(String[] args) throws ClientProtocolException, IOException {
        HttpClient client = new DefaultHttpClient();
        HttpPost post = new HttpPost(&quot;http://restUrl&quot;);
        List nameValuePairs = new ArrayList(1);
        nameValuePairs.add(new BasicNameValuePair(&quot;name&quot;, &quot;value&quot;)); //you can as many name value pair as you want in the list.
        post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
        HttpResponse response = client.execute(post);
        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line = &quot;&quot;;
        while ((line = rd.readLine()) != null) {
            System.out.println(line);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Способ второй - Jersey&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jersey - это имплементация для &lt;strong&gt;JSR-311&lt;/strong&gt; в &lt;strong&gt;Java&lt;/strong&gt;. Jersey содержит в себе REST сервер и REST client.
Пример GET запроса:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import java.io.IOException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;
import org.apache.http.client.ClientProtocolException;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
public class Test {
    public static void main(String[] args) throws ClientProtocolException, IOException {
        ClientConfig config = new DefaultClientConfig();
        Client client = Client.create(config);
        WebResource service = client.resource(UriBuilder.fromUri(&quot;http://restUrl&quot;).build());
        // getting XML data
        System.out.println(service. path(&quot;restPath&quot;).path(&quot;resourcePath&quot;).accept(MediaType.APPLICATION_JSON).get(String.class));
        // getting JSON data
        System.out.println(service. path(&quot;restPath&quot;).path(&quot;resourcePath&quot;).accept(MediaType.APPLICATION_XML).get(String.class));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;POST запрос c несколькими параметрами:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import java.io.IOException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.UriBuilder;
import org.apache.http.client.ClientProtocolException;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.core.util.MultivaluedMapImpl;
public class Test {
    public static void main(String[] args) throws ClientProtocolException, IOException {
        ClientConfig config = new DefaultClientConfig();
        Client client = Client.create(config);
        WebResource webResource = client.resource(UriBuilder.fromUri(&quot;http://restUrl&quot;).build());
        MultivaluedMap formData = new MultivaluedMapImpl();
        formData.add(&quot;name1&quot;, &quot;val1&quot;);
        formData.add(&quot;name2&quot;, &quot;val2&quot;);
        ClientResponse response = webResource.type(MediaType.APPLICATION_FORM_URLENCODED_TYPE).post(ClientResponse.class, formData);
        System.out.println(&quot;Response &quot; + response.getEntity(String.class));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Существует возможность использовать свой собственный класс для POST:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;ClientResponse response = webResource.path(&quot;restPath&quot;).path(&quot;resourcePath&quot;).
type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class, myPojo);
System.out.println(&quot;Response &quot; + response.getEntity(String.class));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как вы можете заметить, обе представленные здесь библиотеки позволяют достаточно легко создать запросы и получить ответы от сервера, обработать их и вывести результат. Лично мне больше нравится Jersey - просто из-за того, что он не такой брутальный, как Apache, но выбирать Вам =)&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Что такое Flaky тест?</title>
      <link>localhost/chto-takoie-flacky-tiest/index.html</link>
      <pubDate>Tue, 2 Dec 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">chto-takoie-flacky-tiest/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;image::http://cdn.meme.am/instances/500x/52587305.jpg&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если у вас нету &lt;strong&gt;Flacky&lt;/strong&gt; тестов - значит вы занимаетесь чем-то нереальным :). &lt;strong&gt;Flacky&lt;/strong&gt; тесты - это зло! Это то, с чем приходится бороться днями, а бывает - и неделями.
Жизненный пример: написали вы свой &lt;strong&gt;Selenium&lt;/strong&gt; тест, прогнали его, отладили, закомитили - все прекрасно! Приходите на следующий день, ну или через пару-тройку дней, смотрите: он зеленый. &quot;Ну прекрасно&quot;, - думаете, смотрите еще через время - он упал (по никому не понятной причине), ведь код не менялся и приложение работает нормально. Перезапускаете тест - он проходит, все хорошо. Видимо, планеты в небе так встали, и он свалился :). Спустя несколько билдов вы замечаете, что этот тест ведет себя, как лампочка на новогодней елке - мигает: &lt;strong&gt;FAIL, PASS,FAIL,PASS&lt;/strong&gt;&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как с этим бороться? Ответ как всегда очень прост - нужно разбираться. Как говорится, у любой проблемы есть имя, фамилия и отчество. Большинство Flaky тестов случается из-за банальной невнимательности. Некоторые из них найти легко, над некоторыми же нужно пораскинуть мозгами. Приведу пример: был у меня тест, который должен был открыть модальный диалог и в нем продолжить работу.
Задача достаточно простая, решается за 5 (нет, 10 минут) :). Я написал метод:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private void switchToRiskFactorDialog(String title) {
            String targetWindow = waitForWindowTitle(title);
            switchTo().window(targetWindow);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все просто: метод ждал, пока появится окно с нужным title и затем делал switch в новое окно. Все работало прекрасно, пока я не заметил, что у меня тест два раза проходит, а один раз валится с &lt;em&gt;NullPointerException&lt;/em&gt;. Оказалось, что подставил меня метод waitForWindowTitle. Один раз он дожидался, пока окно появится, а в другой принимал решение, что окно появилось, хотя на самом деле его еще не было. Вот и все, таким образом я избавился от &lt;strong&gt;Flaky&lt;/strong&gt; теста.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>О TestNG, Excel и DataProvider</title>
      <link>localhost/smart-excel-reader-for-testng-dataprovided/index.html</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">smart-excel-reader-for-testng-dataprovided/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сегодня пост о том, как справиться с чтением Excel файлов, а именно - написать &quot;умный DataReader&quot;.
Excel файлы удобно использовать для храннения тестовых данных в тестовых фреймворках, что позволяет вынести данные из тестов. Так сказать: &lt;strong&gt;&quot;Долой хардкод!&quot;&lt;/strong&gt;.
Такой подход называют D&lt;strong&gt;ata-Driven Testing&lt;/strong&gt;. Это очень удобно, потому что любой человек (даже не технарь) может изменить данные требуемые для теста: вам не нужно лезть в код и что-то там менять. В качестве тестового фреймворка будем использовать &lt;strong&gt;TestNG&lt;/strong&gt;, потому что у него есть много преимуществ, среди которых - DataProvider. Для чтения Excel файлов я использую библиотеку - &lt;strong&gt;Apache POI&lt;/strong&gt;.
Задача состоит в том, чтобы написать ридер, который будет находить строку, соответствующую имени тестового метода, извлекать данные и передавать в тест. Итак, начнем по порядку: создаем класс &lt;strong&gt;ExcelReader&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;ExcelReader.class&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class ExcelReader {

private XSSFSheet excelWSheet;
private XSSFWorkbook excelWBook;
private XSSFCell cell;

// This method is to set the File path and to open the Excel file
public void setExcelFile(String Path, String SheetName) {
    try {
        // Open the Excel file
        FileInputStream ExcelFile = new FileInputStream(Path);
        // Access the required test data sheet
        excelWBook = new XSSFWorkbook(ExcelFile);
        excelWSheet = excelWBook.getSheet(SheetName);
    } catch (Exception e) {
        System.out.println(&quot;Exception &quot; + e.getMessage());
    }
}
    // Add all below described methods here
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь начинается самое интересное! Нам нужен метод, который будет в столбце искать строку с нужным нам именем.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public List getRowContains(String testCaseName, int colNum){
     List list = new ArrayList&amp;lt;&amp;lt;&amp;gt;&amp;gt;();
     int rowCount = getRowUsed();
     for (int i = 0; i &amp;lt;&amp;lt;= rowCount; i++) {
        String cellData = getCellData(i, colNum);
        if (cellData.equalsIgnoreCase(testCaseName)) {
                    list.add(i);
            }
        }
        return list;
}

public int getRowUsed(){
   return excelWSheet.getLastRowNum();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Метод возвращает лист с номерами строк на случай, если у нас один тест нужно перезапустить несколько раз с разными данными.
Напишем еще пару вспомогательных методов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public String getCellData(int rowNum, int colNum) {
    cell = excelWSheet.getRow(rowNum).getCell(colNum);
    return Cell.getStringCellValue();
}

public List[] getRowData(int rowNo) {
        List[] arr = new List[1];
        List list = new ArrayList();
        int startCol = 1;
        int totalCols = excelWSheet.getRow(rowNo)
        .getPhysicalNumberOfCells();
        for (int i = startCol; i &amp;lt; totalCols; i++) {
           String cellData = getCellData(rowNo, i);
           list.add(cellData);
        }
        arr[0] = list;
        return arr;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Здесь следовало бы обратить внимание на метод getRowData, возвращающий массив листов. Звучит немного странно, но таким способом мы можем считывать данные из строк с различным количеством колонок. Ну и наконец последний метод:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public Object[][] getTableArray(List&amp;lt;Integer&amp;gt; rowsNo) {
        Object[][] tabArray = new Object[rowsNo.size()][];
        for (int i = 0; i &amp;lt; rowsNo.size(); i++) {
            tabArray[i] = getRowData(rowsNo.get(i));
        }
        return tabArray;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По требованию &lt;strong&gt;DataProvider&lt;/strong&gt; должен возвращать двухмерный массив обджектов, что и делает &lt;em&gt;getTableArray&lt;/em&gt;. Теперь мы легко можем создавать в тестовых классах метод и использовать его в качетве источника данных для тестов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TestClass.class&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class TestClass{

   @DataProvider
   public Object[][] testData(Method method,String sheet){
        ExcelReader excelReader = new ExcelReader();
        excelReader.setExcelFile(config.getProperty(&quot;TestData.xlsx&quot;), sheet);
        List rowsNo = excelReader.getRowContains(method.getName(), COL_NUM);
        return excelReader.getTableArray(rowsNo);
  }

  @Test(dataProvider = &quot;testData&quot;)
  public void userLogin(List data) {
        data.get(0);
        data.get(1);
        ...
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот и вступил в силу наш массив листов: вместо того, чтобы передавать ОГРОМНОЕ количество параметров, мы передаем элегантный список, с которым легко и просто работать. Создаем Excel файл, заполняем данными, запускаем тесты и наслаждаемся, попивая чаек:)&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Как я изобрел свой Jenkins Emailer</title>
      <link>localhost/jenkins-emailer/index.html</link>
      <pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">jenkins-emailer/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Велкам!
Второй пост не задержался. Как и обещал, расскажу о том, как мне удалось, казалось бы, из невозможного сделать возможное (изобрести свой велосипед).
Применив хитрость с &lt;strong&gt;Jenkins API&lt;/strong&gt;, как было показано в предыдущем посте, я не только добыл нужную мне информацию из недр этого чУдного инструмента, но и заставил ее приносить пользу проекту.
Итак, по порядку. Если Jenkins предоставляет возможность получать данные в формате &lt;strong&gt;JSON&lt;/strong&gt; - значит мы можем легко и просто обрабатывать эти данные.
Я буду приводить в пример некоторые куски кода, которые являются ключевыми.
Так вот! Вернемся к нашим баранам. Имея URL к &lt;strong&gt;JSON&lt;/strong&gt; файлу, скачать его можно так (осторожно: &lt;strong&gt;Java&lt;/strong&gt; code detected :)) :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static String callURL(URL url) {
        StringBuilder sb = new StringBuilder();
        URLConnection urlConn = null;
        InputStreamReader in = null;
        try {
            urlConn = url.openConnection();
            if (urlConn != null)
                urlConn.setReadTimeout(60 * 1000);
            if (urlConn != null &amp;amp;&amp;amp; urlConn.getInputStream() != null) {
                in = new InputStreamReader(urlConn.getInputStream(),
                        Charset.defaultCharset());
                BufferedReader bufferedReader = new BufferedReader(in);
                if (bufferedReader != null) {
                    int cp;
                    while ((cp = bufferedReader.read()) != -1) {
                        sb.append((char) cp);
                    }
                    bufferedReader.close();
                }
            }
            in.close();
        } catch (Exception e) {
            LOG.error(&quot;Exception while calling URL:&quot;
                    + url.toString());
        }
        return sb.toString();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Метод принимает адрес (URL), а возвращает непосредственно содержание JSON файла в строковом представлении.
Далее нам нужно дессериализовать &lt;strong&gt;JSON&lt;/strong&gt; в объект &lt;strong&gt;JobObject&lt;/strong&gt;. Это очень просто сделать с помощью библиотеки &lt;strong&gt;Google GSON&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static Object jsonToObject(String json, Class c) {
        Gson gson = new Gson();
        Object obj = gson.fromJson(json, c);
        return obj;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В данном случае был создал класс JobObject, в котором я сохранял интересующую меня информацию:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class JobObject {
    private long duration;
    private long estimatedDuration;
    private String fullDisplayName;
    private int number;
    private String result;
    private long timestamp;
    private String url;
    private String builtOn;
    private String RUNNING_STATUS = &quot;RUNNING&quot;;
    private BuildInfo buildInfo;
    private ArrayList actions;
    // Getters  and setters

    public String getStatus() {
        if (result == null) {
            return RUNNING_STATUS;
        }
        return result;
    }

    public boolean finished() {
        return !getStatus().equals(RUNNING_STATUS);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Таким образом, имея набор &lt;strong&gt;JsonObject&lt;/strong&gt;, я написал еще пару классов хелперов и обработчиков, с помощью которых отбирал для себя только те &lt;strong&gt;JobObject&lt;/strong&gt;, которые имели статус &lt;strong&gt;finished&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static List getFinishedJobs(List jobs) {
        List finishedJobs = new ArrayList();
        for (JobObject job : jobs) {
            if (job.finished()) {
                finishedJobs.add(job);
            }
        }
        return finishedJobs;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Имея на руках все козыри, я преобразовал (переопределил метод toString) JobObject в тесктовое представление.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Job 4.9.1.1_Tests #91 is FINISHED.
Job Status - SUCCESS.
Build info: PRE-RELEASE BUILD 12dev.0228.zip
You can find detailed information by the following link:
http://host:port/job/4.9.1.1_Branch_Tests/91/
Failed: 24 Total: 480&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В итоге: использовав &lt;a href=&quot;http://commons.apache.org/proper/commons-email/&quot;&gt;Apache Commons Email&lt;/a&gt;, я отправляю данные на почтовые ящики, тем самым оповещая всех о результатах наших тестов. Хотите и вам одно сброшу ;)&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Как приручить Jenkins API</title>
      <link>localhost/kak-prruchit-jenkins-api/index.html</link>
      <pubDate>Wed, 19 Nov 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">kak-prruchit-jenkins-api/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Небольшой пост о том, как можно добраться до внутренностей &lt;a href=&quot;https://jenkins.io/index.html&quot;&gt;Jenkins&lt;/a&gt;.
Бывают ситуации, когда СI сервер установлен где-то на удаленной машине, доступ к которой осуществляется через VPN. В общем ситуация сложная, а информацию о джобах и письма от дженкинса получать хотелось бы.
В таком случае в помощь приходит &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API&quot;&gt;Jenkins API&lt;/a&gt;.
API позволяет извлекать информацию в трех форматах XML, JSON и Python.
Как это работает? Очень просто: все что нужно - вбить в браузере в строке адреса:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;http://&amp;lt;jenkins host&amp;gt;/api/json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вуаля! Круто, не правда ли? Но текст не читабелен. Решается это просто: нужно добавить pretty формат:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;http://9.21.103.66:8255/jenkins/api/json?pretty=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь на экране в &lt;strong&gt;JSON&lt;/strong&gt; формате отображается информация обо всех джобах. Для того, чтобы опуститься на уровень одного &lt;strong&gt;Job&lt;/strong&gt;, необходимо просто указать имя:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;http://&amp;lt;JENKINS_HOST&amp;gt;/job/&amp;lt;JOB_NAME&amp;gt;/api/json?pretty=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;А чтобы получить информацию о какой-либо сборке, нужно всего лишь указать ее номер:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;http://&amp;lt;JENKINS_HOST&amp;gt;/job/&amp;lt;JOB_NAME&amp;gt;/&amp;lt;BUILD_NUMBER&amp;gt;/api/json?pretty=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После получения информации ее можно использовать в благих целях. Но об этом я расскажу в следующий раз&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Welcome!</title>
      <link>localhost/first-post/index.html</link>
      <pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">first-post/index.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Случилось: блог для автоматизторов от автоматизатора!&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
