<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"
     xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>
        <![CDATA[Заметки Автоматизатора]]>
    </title>
    <description>
        <![CDATA[Автоматизация рутины приоритетнее давления массой]]>
    </description>
    <link>http://automation-remarks.com</link>
    <atom:link href="http://automation-remarks.com/rss/index.rss" rel="self" type="application/rss+xml" />
    <ttl>60</ttl>
    <language>en-gb</language>
    <pubDate>Tue, 21 May 2019 06:39:23 +0000</pubDate>
    <lastBuildDate>Tue, 21 May 2019 06:39:23 +0000</lastBuildDate>

        <item>
          <title>
              QAGuild live #7: Про фреймворк по автоматизации тестирования
          </title>
          <link>http://automation-remarks.com/2019/qaguild-live7/index.html</link>
          <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2019/qaguild-live7/index.html</guid>
          <description>
                        Разговор о фреймворках по автоматизации тестирования
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Разговор о фреймворках по автоматизации тестирования. Как и когда начинать его писать и нужно ли вообще это делать в наше время.
Пишите свои вопросы и пожелания в комментариях. Подписывайтесь, чтобы не пропустить следующие выпуски.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/TyolewvMsJU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QAGuild live #6: Какие soft skills важны для QA инженера?
          </title>
          <link>http://automation-remarks.com/2019/qaguild-live6/index.html</link>
          <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2019/qaguild-live6/index.html</guid>
          <description>
                        Размышления на тему собеседований для QA Automation
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Разговор про soft skills для тестировщиков.
Пишите свои вопросы и пожелания в комментариях. Подписывайтесь, чтобы не пропустить следующие выпуски.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Ju642sm655U&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QAGuild live #5: Про собеседования на позицию QA инженера?
          </title>
          <link>http://automation-remarks.com/2019/qaguild-live5/index.html</link>
          <pubDate>Thu, 9 May 2019 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2019/qaguild-live5/index.html</guid>
          <description>
                        Размышления на тему собеседований для QA Automation
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Разговор о собеседованиях для тестировщиков.
Пишите свои вопросы и пожелания в комментариях. Подписывайтесь, чтобы не пропустить следующие выпуски.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/1FzxCP8QtyY&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QAGuild live #4: Как начать учить Java для QA Automation?
          </title>
          <link>http://automation-remarks.com/2019/qaguild-live4/index.html</link>
          <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2019/qaguild-live4/index.html</guid>
          <description>
                        Размышления на тему старта карьеры QA Automation
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Разговор о том, как начать учить язык программирования Java юному Automation QA.
Пишите свои вопросы и пожелания в комментариях. Подписывайтесь, чтобы не пропустить следующие выпуски.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/kRPU8gJ4s-w&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QAGuild live #3: С чего начинать автоматизатору?
          </title>
          <link>http://automation-remarks.com/2019/qaguild-live3/index.html</link>
          <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2019/qaguild-live3/index.html</guid>
          <description>
                        Размышления на тему старта карьеры QA Automation
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Размышления о том, как начать изучение автоматического тестирования и начать свой путь как QA Automation.
Пишите свои вопросы и пожелания в комментариях. Подписывайтесь, чтобы не пропустить следующие выпуски.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bIjzIldCUpI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QAGuild youtube канал
          </title>
          <link>http://automation-remarks.com/2019/qaguild-youtube/index.html</link>
          <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2019/qaguild-youtube/index.html</guid>
          <description>
                        Первый youtube канал про автоматизацию тестирования
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Почистил мусор на ютуб канале и попробовал сделать стрим.
Работает лучше чем стримы в ФБ.
Там и поселюсь.
Подписывайтесь, пишите в комментариях вопросы, будем обсуждать&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/r-ra_iFNio0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              s2e4: Никита Макаров про тестирование и конференции
          </title>
          <link>http://automation-remarks.com/2019/qa-guild-s2e4/index.html</link>
          <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2019/qa-guild-s2e4/index.html</guid>
          <description>
                        Разговоры о тестировании, конференциях и участии в программных комитетах
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Никита Макаров - head of test automation team в ok.ru&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;00:00:05 - Начало&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:01:41 - Как вошел в IT?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:08:15 - Идельный путь становления тестировщика?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:10:47 - Разделение на Manual и Automation. Твое мнение?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:13:29 - Про тестирование в одноклассниках&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:22:30 - Тест менеджер и отдел тестирования в Agile?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:31:58 - Cамый тупой пропущенный баг в карьере?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:35:17 - Если в России отрубят интернет, это как-то повлияет на ОК?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:36:34 - Количество посещений в день, уникальных ip и общее количество в день ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:38:16 - Про опенсорс? Делаете?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:43:01 - На чем тесты пишут, какой стек технологий и библиотек ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:44:49 - Про инфраструктуру для тестирования?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:48:20 - Про кукумбер&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:50:25 - И чем testng не подошел ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:50:30 - Почему не подошел TestnG?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:53:15 - Откуда взялось увлечение алкоголем?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:55:07 - [&lt;a href=&quot;http://test-failed.blogspot.com/&quot; class=&quot;bare&quot;&gt;http://test-failed.blogspot.com/&lt;/a&gt;](Про блог Никиты)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:58:28 - Насколько сложно попасть на позицию тестировщика в ОК?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:02:39 - Были ли случаи взлома серверов?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:05:52 - Про гайзенбаг&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:10:53 - Программный коммитет за деньги vs бесплатно&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:12:34 - А спикеры ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:21:35 - О программных комитетах. Сколько времени отнимает?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:24:01 - Повлияла ли политика на спикеров? Не пускают и вот это все&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:25:40 - Про деньги за выступления?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:27:46 - Какая справедливая ЗП для Синьера по твоему мнению?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:30:13 - Патроны&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:32:22 - Срыв покровов&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:33:49 - Про цены&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:37:22 - Автоматизация в крупном проекте, есть? Сколько времени тесты гоняются?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:42:11 - Финал&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/591340719&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=true&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary mx-2&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;a class=&quot;btn btn-primary mx-2&quot; role=&quot;button&quot; href=&quot;https://www.patreon.com/automation_remarks&quot;&gt;Стать патроном&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Telegram: &lt;a href=&quot;https://t.me/automation_remarks&quot; class=&quot;bare&quot;&gt;https://t.me/automation_remarks&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:
Marat Reymers, Nikita Verbitsky, Oleksii Ihnatiuk, Ирина Юрчук, Valentin Buryakov, Roman Marinsky, Tetiana Hrybok, Перетятько Игорь, Kuptsov Ivan, Natalka Sokurenko, Dmytro Pazykov, Katya Kravchenka, Igor Gruziev, Maryna Kolesnik, Dmytro, Alisa Markova, Vitaly Fedrunov, Serge Soloshchenko, Roman Pobotin, Арина Аригри, Denys Kozachok, Miguel Suddya, Maxim Denisov, Evgenii Gritcai, Vitalii&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Тренинг Automation in Action Java for Juniors
          </title>
          <link>http://automation-remarks.com/2019/java-jun/index.html</link>
          <pubDate>Sun, 3 Mar 2019 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2019/java-jun/index.html</guid>
          <description>
                        Тренинг для начинающих тестировщиков автоматизаторов
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Многие просили и я делаю. Я решил попробовать провести один курс треннига по автоматизации на java для тех, кто очень хочет научиться, но не знает как это сделать, либо пробовал и не получилось.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Формат обучения - онлайн лекции
Дата начала - 30 марта 2019 года.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Программа:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Эта программа менторинга направлена на практическую составляющую. Этот курс расчитан для начинающих. Я ожидаю видеть ребят которые уже работают на проектах и смогут применять полученные знания у себя, не важно даже если вы сейчас работаете на позиции Manual QA, но хотите с чего-то начать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Требования:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Опыт работы на позиции QA engineer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Знание консольных утилит git, linux commands&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Чего не будет:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Основ операционных систем&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Основ тестирования&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Много теории&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что будет:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Основы Java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Много практики&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создание проекта для тетирования REST API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;подходы к автоматизации&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;структура проекта&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;управление тестовыми данными&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создание проекта для тестирования UI
- подходы к построению “фреймворка” на основе как проверенных инструментов, так и альтернативных типа HTMLElements 2
- подходы к управлению тестовыми данными
- репортинг&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Настройка CI&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Запуск тестов в Docker контейнерах - обзор существующих решений и работа с инструментами которые я использую каждый день
Все это с реальным демо проектом построенным на микросервисной архитектуре.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По длительности примерно 1.5 месяца. 1 лекция по выходным и 7 дней на выполнение домашнего задания.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для записи на тренинг пишите на почту &lt;a href=&quot;mailto:automationremarks@gmail.com&quot;&gt;automationremarks@gmail.com&lt;/a&gt; либо в telegram @spirogov.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Не упустите свой шанс научиться писать автоматические тесты к началу лета.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              s2e2: Производительность, нагрузка и вот это вот все
          </title>
          <link>http://automation-remarks.com/2019/qaguild-s2e2/index.html</link>
          <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2019/qaguild-s2e2/index.html</guid>
          <description>
                        О нагрузочном тестировании
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
&lt;strong&gt;Гости&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Анатолий Пласковский - эксперт по нагрузке&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - бог звука&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Интро - 00:00:09&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как вошел в IT? - 00:02:17&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как начал заниматься нагрузкой? - 00:03:15&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;А что за перформанс тесты делаешь - 00:07:38&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Кто такой перформанс инженер? - 00:10:39&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Каким набором скилов должен обладать? - 00:10:44&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как планировать и сколько занимает времени ран? - 00:16:46&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про приемку - 00:21:58&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как начать? - 00:24:22&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Перформанс тесты на проде - 00:29:38&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как прийти к тестам на проде? - 00:32:48&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про максимальную нагрузку - 00:40:24&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cравнение gatling и jmeter - 00:42:40&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;А шо за яндекс танк? - 00:46:56&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Место нагрузочника в команде? Аутсорс команда для нагрузки лучше? - 00:55:40&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Чем лучше тестировать просадки перфоманса на UI и не дичь ли это? - 01:01:18&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какие инструменты используются для отчетов и аналитики? - 01:06:12&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Где нужно тереться чтобы быть в комьюнити? - 01:14:19&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про деньги - 01:16:43&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Финал - 01:19:15&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/578855586&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary mx-2&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;a class=&quot;btn btn-primary mx-2&quot; role=&quot;button&quot; href=&quot;https://www.patreon.com/automation_remarks&quot;&gt;Стать патроном&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:
Marat Reymers, Nikita Verbitsky, Oleksii Ihnatiuk, Ирина Юрчук, Valentin Buryakov, Roman Marinsky, Tetiana Hrybok, Перетятько Игорь, Kuptsov Ivan, Natalka Sokurenko, Dmytro Pazykov, Katya Kravchenka, Igor Gruziev, Maryna Kolesnik, Dmytro, Alisa Markova, Vitaly Fedrunov, Serge Soloshchenko, Roman Pobotin, Арина Аригри, Denys Kozachok, Miguel Suddya, Maxim Denisov, Evgenii Gritcai, Vitalii&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QAGuild s2e1: Долгая работа в одной компании
          </title>
          <link>http://automation-remarks.com/2019/qa-guild-s2e1/index.html</link>
          <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2019/qa-guild-s2e1/index.html</guid>
          <description>
                        Про усидчивых IT работников
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
&lt;strong&gt;Гости&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - саунд продюсер&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дмитрий Гуменюк - главный в РП&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;00:01:30 - Как вошел в IT?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:09:07 - Про работу разработчиком?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:19:15 - Про работу и развитие в одной компании?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:27:35 - Почему в IT нету долгосидящих?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:35:39 - Была ли ломка при переходе от разработчика к менеджмент&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:44:44 - Когда и как появилась работа связанная с тестированием?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:55:12 - Когда стало понятно что РП - успех&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;00:52:05 - Про Репорт портал&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:00:35 - Про Delex?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:08:19 - Постоянная рубрика - топ три скила автоматизатора&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:09:30 - Про контр-офферы&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;01:16:37 - Финал&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/563784393&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary mx-2&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;a class=&quot;btn btn-primary mx-2&quot; role=&quot;button&quot; href=&quot;https://www.patreon.com/automation_remarks&quot;&gt;Стать патроном&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alisa Markova, Denys Kozachok, Kuptsov Ivan, Marat Reymers, Maryna Kolesnik, Miguel Suddya, Natalka Sokurenko, Nikita Verbitsky, Oleksii Ihnatiuk, Roman Marinsky, Roman Pobotin, Serge Soloshchenko, Tetiana Hrybok, Vitalii, Vitaly Fedrunov, Перетятько Игорь&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Эпизод-27: Юбилейный выпуск, завершение первого сезона
          </title>
          <link>http://automation-remarks.com/2019/qa-guild-ep27/index.html</link>
          <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2019/qa-guild-ep27/index.html</guid>
          <description>
                        Новости и почему SDET получает больше
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
&lt;strong&gt;Гости&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - главный по звуку&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дмитрий Гуменюк - главный в Репорт портале&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Рома Маринский - в этот раз, человек из поезда&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Алексей Буль - главный робототехик&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Алексей Панащенко - главный бородач Днепра&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Как мы прожили этот год&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Успехи&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Провалы&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Что планируем сделать в следующем?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Самая крутая конференция этого года&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Технологии и тулы&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Прорыв DevTestOps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Чего ждать в 2019 ? шифт лефт, меньюал умрет?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Войти в айти, хайп на бабках?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/550937883&amp;color=%23948c6c&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алиса Маркова, Денис Козачок, Дмитрий Пазыков, Дмитрий Стеканов, Эрик Халимов,
Иван Купцов, Marat Reymers, Maryna Kolesnik, Maxim Denisov, Miguel Suddya, Nikita Verbitsky, Oleksii Ihnatiuk, Roman Marinsky, Roman Pobotin, Serge Soloshchenko, Tetiana Hrybok, Valentin Buryakov, Vitalii, Vitaly Fedrunov, Арина Аригри, Ирина Юрчук, Перетятько Игорь&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Эпизод-26: Новости осени и тренды на 2019 год
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep26/index.html</link>
          <pubDate>Sun, 9 Dec 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep26/index.html</guid>
          <description>
                        Новости и почему SDET получает больше
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0-beta.2&quot;&gt;Conventional Commits&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@sarahelson81/testing-trends-to-look-out-for-in-2019-df938a6eba49&quot;&gt;Тренды в тестировании 2019&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/blog/2018/11/07/Validate-Jenkinsfile/?utm_source=feedburner&amp;amp;utm_medium=twitter&amp;amp;utm_campaign=Feed%3A+ContinuousBlog+%28Jenkins%29&quot;&gt;Validate your Jenkinsfile from within VS Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mwtestconsultancy.co.uk/selenium-to-rest-assured-adapter&quot;&gt;Selenium to Rest-assured adapter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/edenhill/kafkacat&quot;&gt;Kafkacat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.joecolantonio.com/sdet/&quot;&gt;SDET vs Tester&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/olganovykova5/salary-survey-c-level2018-121346057?ref=https://indigo.co.ua/obzor-urovnya-zarabotnyih-plat-dlya-c-level-na-ryinke-ukrainskogo-it/?fbclid=IwAR0c7nyULwmT24zDRXFV8Z0o0yg92apgaoxTa-i7bX7IXH-aVcJR1tlsFTc&quot;&gt;Salary survay 2018 C-level&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Релизы:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/allure-framework/allure-java/releases/tag/2.8.0&quot;&gt;allure 2.8.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://junit.org/junit5/docs/5.3.2/release-notes/&quot;&gt;junit 5.3.2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://ru.selenide.org/2018/11/07/selenide-5.0.1/&quot;&gt;selenide 5.0.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
&lt;strong&gt;Гости&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дмитрий Гуменюк - главный в Репорт портале&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Артем Никитин - видит забугорное IT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Рома Маринский - львовский IT пан&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/542095626&amp;color=%23948c6c&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алиса Маркова, Дмитрий Панасюк, Дмитрий Рудаков, Эрик Халимов, Марина Колесник, Алексей Асанов, Рома Маринский,
Сергей Солощенко, Игорь Перетятько, Максим Алферов, Марат Реймерс, Марина Колесник, Михаил Судья, Роман Поботин, Татьяна Грибок, Виталий Закорчевный&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
Отдельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Подписывайтесь на телеграмм канал - &lt;a href=&quot;https://t.me/automation_remarks&quot; class=&quot;bare&quot;&gt;https://t.me/automation_remarks&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Эпизод-25: Про сертификации и ISTQB
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep25/index.html</link>
          <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep25/index.html</guid>
          <description>
                        Про ISTQB
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Когда получили свой первый сертификат?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Краткая история ISTQB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Почему ISTQB starter level есть у каждой собаки?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Почему я не сертифицировался&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какие бонусы дает сертификация?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced level ISTQB vs Foundation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Куда идут деньги за сертификат?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про сертификационные туры&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Существует ли статистика получивших ISTQB в Украине по уровням?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;На сколько будет полезен сертификат при поиске работы в Европе и релокейте.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какие сертификаты есть кроме ISTQB?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Selenium сертификации - фейк&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - бог звука в подкасте&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Александра Ковалева - знает все про ISTQB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Алексей Лупан - тренирует молодых тестировщиков&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/533979162&amp;color=%23948c6c&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алиса Маркова, Дмитрий Панасюк, Дмитрий Рудаков, Эрик Халимов, Марина Колесник, Алексей Асанов, Рома Маринский,
Сергей Солощенко, Игорь Перетятько, Максим Алферов, Марат Реймерс, Марина Колесник, Михаил Судья, Роман Поботин, Татьяна Грибок, Виталий Закорчевный&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отдельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Подписывайтесь на телеграмм канал - &lt;a href=&quot;https://t.me/automation_remarks&quot; class=&quot;bare&quot;&gt;https://t.me/automation_remarks&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QAGuild Эпизод-24: Марина Хомич о том, как нанимают людей и что важно при составлении резюме
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep24/index.html</link>
          <pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep24/index.html</guid>
          <description>
                        Про найм, резюме и рекрутинг
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Как стала рекрутером?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какие соц сети качать, чтобы тебя наняли?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как оформить резюме?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Характерные ошибки на этапе HR интервью&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как себя продать компании?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Перегретый рынок труда, что с этим делать?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Помогает ли HR бренд нанимать людей?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про не любовь к рекрутерам&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Чем отличается Senior рекрутер от Junior и Middle?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Почему рекртеры наяривают после того как отклонил офер?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про зарплатные вилки и черные списки&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - бог звука в подкасте&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Марина Хомич - рекрутер в компании Viber media&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/520674489%3Fsecret_token%3Ds-T4ZH2&amp;color=%23948c6c&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алекс Бондарь, Алиса Маркова, Дмитрий Панасюк, Дмитрий Рудаков, Эрик Халимов, Марина Колесник, Алексей Асанов, Рома Маринский,
Сергей Солощенко, Игорь Перетятько, Максим Алферов, Марат Реймерс, Марина Колесник, Михаил Судья, Роман Поботин, Татьяна Грибок, Виталий Закорчевный&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
Отдельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Подписывайтесь на телеграмм канал - &lt;a href=&quot;https://t.me/automation_remarks&quot; class=&quot;bare&quot;&gt;https://t.me/automation_remarks&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Тест кейсы как код
          </title>
          <link>http://automation-remarks.com/2018/test-cases-as-a-code/index.html</link>
          <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/test-cases-as-a-code/index.html</guid>
          <description>
                        О своем опыте использования тест кейсов как кода
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Очень давно не писал заметок, так как блог в основном переехал в &lt;a href=&quot;https://t.me/automation_remarks&quot;&gt;телеграм&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сегодня расскажу о подходе использования Test cases as a code. Я уже очень давно думал о такой штуке,
но не хватало опыта ее внедрения.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что же такое тест кейсы как код? На старте проекта я задумался о том, как можно сократить время на
написание тест кейсов. Плюс мне хотелось как-то контролировать создание тест кейсов и их правки.
На проекте в качестве тест кейс менеджмент-системы используется Test Rail. С ним у меня опыта достаточно
много, я писал интерграции для создания тест ранов и проставления статусов во время прогона тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Однако у Test Rail есть один фатальный недостаток - сложно контролировать создание тест кейсов. Там нет такого
понятия, как ревью. Мне же хотелось управлять процессом.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Решение оказалось достаточно простым. Вместо детальных тест кейсов было принято решение использовать чеклист.
Пуктами чеклиста и есть наши методы автотестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
void userCanLoginWithValidCredentails(){
   LoginPage.open()
        .enterPassword(&quot;admin&quot;)
        .enterLogin(&quot;admin&quot;)
        .pressLogin();

   at(MainPage.class).userLoggedName.shouldHave(exactText(&quot;admin&quot;));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сюда мы прикручиваем интеграцию с Test Rail, которая &lt;strong&gt;не запуская тестов&lt;/strong&gt; вытаскивает нужную информацию и записывает ее в виде пункта чеклиста.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Остается одна проблема - не всегда проверки можно автоматизировать. Следовательно нужно было как-то документировать ручные проверки.
Эту проблему я решил через аннотации.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
@Manual({
   @Case(title = &quot;Check user login is disabled after three incorrect login attempts &quot;, ac = &quot;1&quot;)
})
void userCanLoginWithValidCredentails(){
   LoginPage.open()
        .enterPassword(&quot;admin&quot;)
        .enterLogin(&quot;admin&quot;)
        .pressLogin();

   at(MainPage.class).userLoggedName.shouldHave(exactText(&quot;admin&quot;));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь с помощью расширенного модуля интеграции с тест рейлом информация из этой аннотации вытаскивается и создается пункт чеклиста
и помечается как ручной.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После проверки теории и стадии PoC последовало развитие идеи и реализация боевого решения. Мы добавили аннотации для связи с Jira.
В итоге решение выглядит так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Epic(&quot;Login&quot;)
public class UserLoginTest {

    @Test
    @Manual({
       @Case(title = &quot;Check user login is disabled after three incorrect login attempts &quot;, ac = &quot;1&quot;)
    })
    @Jira(id=&quot;Jira-567&quot;, title=&quot;User is able to to the system login&quot;)
    void userCanLoginWithValidCredentails(){
       LoginPage.open()
            .enterPassword(&quot;admin&quot;)
            .enterLogin(&quot;admin&quot;)
            .pressLogin();

       at(MainPage.class).userLoggedName.shouldHave(exactText(&quot;admin&quot;));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для генерации тест кейсов была написана gradle задача. Генерация выполняется прямо из IDE с помощью вызова &lt;strong&gt;./gradlew syncTestRail&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Что мы получили в итоге?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все тест кейсы у нас хранятся в коде и проходят ревью точно так же, как и код. У всех аккаунтов в тест рейле есть право только на
просмотр, таким образом никто не может внести изменения, кроме как через код. Единственной точкой правды является сорс код автоматизированных тестов.
Модуль интеграции расширен и теперь во время прогона тестов есть возможность автоматически создавать тест ран на основе запускаемых тестов
и проставлять статусы соотвествующим тестам. Мы сократили уровень ручной работы до нулевого, повысили прозрачность процесса.
Надеюсь, мой опыт поможет вам сделать что-то подобное. Оставайтесь на связи, подписывайтесь на &lt;a href=&quot;https://t.me/automation_remarks&quot;&gt;телеграм канал&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Эпизод-23: Про собеседования
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep23/index.html</link>
          <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep23/index.html</guid>
          <description>
                        Про собеседования
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;О своих первых собеседованиях и работах&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Стоит ли заставлять кандидата писать код на бумажке? Если да, то какие задачи лучше всего?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Лучшие способы на техническом собеседовании понять уровень кандидата&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O тестовых заданиях&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про Github и stackoverflow аккаунты, или на какие-то другие открытые достижения&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какие вопросы лучше задавать о будущем месте работы и должности? Какие вопросы будут засчитаны в плюс или минус?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Стоит ли ходить на собеседования для тренировки.	Как отклонять офер?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какой фидбек нужно давать после собеседования?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про зарплаты&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Лучшие собеседования&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - бог звука в подкасте&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Артем Никитин - тот самый, который балуется с GO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дмитрий Гуменюк - владыка Report portal&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/514159989&amp;color=%23948c6c&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алекс Бондарь, Алиса Маркова, Дмитрий Панасюк, Дмитрий Рудаков, Эрик Халимов, Марина Колесник, Алексей Асанов, Рома Маринский,
Сергей Солощенко, Игорь Перетятько, Максим Алферов, Марат Реймерс, Марина Колесник, Михаил Судья, Роман Поботин, Татьяна Грибок, Виталий Закорчевный&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отдельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Подписывайтесь на телеграмм канал - &lt;a href=&quot;https://t.me/automation_remarks&quot; class=&quot;bare&quot;&gt;https://t.me/automation_remarks&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Эпизод-22: Новости ушедшего лета
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep22/index.html</link>
          <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep22/index.html</guid>
          <description>
                        Новостной выпуск
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - бог звука в подкасте&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Артем Никитин - балуется c GO&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cypress.io/blog/2018/09/05/Run-End-to-End-Tests-on-CI-Faster/#The-Dashboard&quot;&gt;Parallel execution in Cypress&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.paypal.com/developer/creditCardGenerator&quot;&gt;Credit Card Generator for Testing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://queue.acm.org/detail.cfm?id=3197520&amp;amp;utm_source=twitter.com&amp;amp;utm_medium=social&amp;amp;utm_campaign=interesnaya-statya-ot-thomas-limoncelli-p&quot;&gt;Manual Work is a Bug&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@aandryashin/selenium-back-to-the-moon-6ea73f1657cc&quot;&gt;Moon - Selenoid for Kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@BillyKorando/whats-new-in-junit-5-3-c276eb8507f1&quot;&gt;Junit 5.3.0 Parallel execution&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://spockframework.org/spock/docs/1.2-RC2/all_in_one.html#_release_notes&quot;&gt;Вышел новый спок&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://go.googlesource.com/proposal/+/master/design/go2draft.md&quot;&gt;Спека GO 2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bonigarcia/webdrivermanager&quot;&gt;Java Webdriver manager 3.0.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/checkly/puppeteer-recorder&quot;&gt;Puppeteer recorder&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.to/theoutlander/github-extensions-to-boost-your-productivity-4d02&quot;&gt;Полезные плагины для Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://meduza.io/news/2018/09/12/iz-koda-python-uberut-slova-master-i-slave-po-soobrazheniyam-politkorrektnosti&quot;&gt;Зашквар в мире Питона&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.satisfice.com/blog/archives/4947&quot;&gt;Джеймс Бах о новой пирамиде тестирования&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Что нового будет в RP 4.3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/499206435&amp;color=%23948c6c&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алиса Маркова, Олег Ильицкий, Игорь Перетятько, Алексей Асанов, Дмитрий Панасюк, Борис Осипов, Павел Скворцов, Эрик Халимов, Роман Поботин, Марина Колесник,
Марат Реймерс, Татьяна Грибок, Михаил Судья, Виталий Закорчевный&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отдельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Подписывайтесь на официальный telegram канал &lt;a href=&quot;https://t.me/automation_remarks&quot; class=&quot;bare&quot;&gt;https://t.me/automation_remarks&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Эпизод-21: Дно автоматизации и cypress.io
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep21/index.html</link>
          <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep21/index.html</guid>
          <description>
                        Выпуск о хайповом cypress.io
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - бог звука в подкасте&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Павел Круглей - видел cypress еще в зародыше&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дмитрий Арчи - автоматизировал IE под виндой&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Почему вообще люди хотят отказаться от Selenium?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cypress? Как вы к нему пришли?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как разбирались?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какие у него преимущества?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какие недостатки?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Отчеты и репортинг&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/494488473&amp;color=%238c8c64&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алиса Маркова, Олег Ильицкий, Игорь Перетятько, Алексей Асанов, Дмитрий Панасюк, Борис Осипов, Павел Скворцов, Эрик Халимов, Роман Поботин, Марина Колесник,
Марат Реймерс, Татьяна Грибок, Михаил Судья, Виталий Закорчевный&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отдельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Эпизод-19: Новости, беседы, внезапный гость
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-19/index.html</link>
          <pubDate>Sun, 2 Sep 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-19/index.html</guid>
          <description>
                        Новостной выпуск
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://habr.com/company/skillbox/blog/418889/&quot;&gt;Гид по ручному тестированию приложений: преимущества, этапы и методологии&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://habr.com/company/ruvds/blog/418823/&quot;&gt;Медленный питон из-за GIL. Надо Брать Cyton или PYPY&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://dou.ua/lenta/articles/devops-culture-1/&quot;&gt;Введение в культуру DevOps: выбираем стратегию тестирования&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.performance-lab.ru/blog/sereznost&quot;&gt;Priority vs Severity&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/cloud-build/&quot;&gt;Гугл сделал свой тревис СI с докером и шлюпками&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/typescript/2018/07/30/announcing-typescript-3-0/&quot;&gt;Вышел TypeScript 3.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://selenide.org/2018/07/17/selenide-4.12.3/&quot;&gt;Selenide тесты перевели на JUnit 5 и еще улучшили скорость для колекций&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.viktoradam.net/2018/07/26/githooks-auto-install-hooks/&quot;&gt;Git Hook для удобного управления хуками&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aerokube/selenoid/releases/tag/1.7.0&quot;&gt;Selenoid 1.7.0 теперь умеет пихать логи и видео в S3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/whatsnew/#v2018-2-gradle&quot;&gt;Теперь можно дебажить Gradle билд скрипты в IDea&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL9Z-JgiTsOYRckLp3pVtEQ7HYHaN-M_Zq&quot;&gt;SeleniumConf 2018 INDIA videos&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - бог звука в подкасте&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дмитрий Гуменюк - держатель рапорт портала&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/483189744&amp;color=%238c8c64&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алиса Маркова, Алексей Игнатюк, Алексей Асанов, Дмитрий Панасюк, Борис Осипов,
Павел Скворцов, Эрик Халимов, Геннадий Мирошниченко, Михаил Судья, Виталий Закорчевный, Максим Денисов, Татьяна Грибок, Арина Аригри, Олег Ильицкий, Роман Поботин&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отдельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Почему Rest Assured не так уж и хорош
          </title>
          <link>http://automation-remarks.com/2018/rest-assured/index.html</link>
          <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/rest-assured/index.html</guid>
          <description>
                        Мысли о рест ашурде
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давно ничего не писал. Навалилось много дел, да и лето - не самая активная пора для работы. В этот раз
решил поделиться своими мыслями по поводу Rest Assured и того, почему он не подходит для написания тестов в том
виде, в котором его подают в официальных туториалах и доках.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Прошло уже почти три года с момента написания одной из самых популярных заметок в этом блоге с
&lt;a href=&quot;http://automation-remarks.com/rest-clients/index.html&quot;&gt;подборкой рест клиентов&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я использую Rest assured очень активно и все, что я напишу ниже, основано на моем практическом опыте. У
вас может быть другое мнение и это отлично, так как блоги и выступления на конференциях
- это в первую очередь обмен опытом.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Официальная документация учит нас, что тесты на Rest Assured писать легко и просто с использованием
BDD стиля:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class SwapiTest {

    @Test
    public void shouldGetLuke() {
        get(&quot;http://swapi.co/api/people/1/&quot;)
                .then().statusCode(200)
                .and()
                .assertThat()
                .body(&quot;name&quot;, equalTo(&quot;Luke Skywalker&quot;));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все это хорошо до момента, пока ваших тестов становится больше, чем пару штук. С ростом количества тестов начинаются
проблемы. Большинство испытывает их из-за слабого знания языка программивания и умения внятно разбивать
проект на компоненты. Правильная архитектура и разделение проекта на слои - это основное, что нужно
продумывать в вашем проекте по автоматизации.
Библиотека, на основе которой вы строите свое решение, - второстепенна.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вы не правильно построите архитектуру и будете писать тесты в таком стиле, как предлагают официальные
туториалы, то, несомненно, наткнетесь на проблемы с логированиеи и дублированием кода.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В дополнение ко всему, Rest assured медленный. Так как это обертка, состоящая из Java/Groovy кода, то и работает
он значительно медленее, чем его конкуренты. Для тестов это может быть и не сильно критично,
но вот проверку json схемы, которая встроена в Rest Assured, я рекомендую не делать: работать оно будет ооочень медленно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вы решаетесь на использование рест ашурда в своем проекте, хорошо подумайте, как вы хотите видеть ваши тесты, отчеты и
сколько времени хотите тратить на поддержку этих тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После того, как Allure добавил поддержку Rest Assured c отчетами по REST API тестам, ситуация значительно улучшилась.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще одной проблемой является отсутсвие вменяемых примеров кода и хороших практик работы с Rest Assured. Складывается впечатление,
что все фигачат как попало и это всех устраивает.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Дабы немного пролить свет на решение проблемы, я решил сделать &lt;a href=&quot;http://automation-remarks.com/2018/java-training/index.html&quot;&gt;тренинг&lt;/a&gt; по тому, как же все-таки можно правильно организовать работу
и построение проекта на основе Rest Assured. Программа основана на практическом опыте. После тренинга слушатели могут
сразу же применять полученный опыт на своих проектах, не тратя лишнее время на копание в документации Rest Assured и хождение по граблям.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Не упустите свой шанс сделать автоматизацию тестирования REST API на своем проекте действительно правильной.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Эпизод-18: Размышления на тему роста и развития QA специалистов
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-18/index.html</link>
          <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-18/index.html</guid>
          <description>
                        Размышления на тему роста и развития QA специалистов
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Зачем вообще рости?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Кто такой QA это процесс или человек?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Почему вдруг QA - это плохо и надо расти в какие-то AQA, SDET и прочую чепуху?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как развиваться?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ПДП формы и план на пол года. Работает оно вообще?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Платформа MTDV, чем она поможет?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - бог звука в подкасте&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Артем Задорожный - работает в германии, занимается развитием людей&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/475948443&amp;color=%238c8c64&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алиса Маркова, Алексей Игнатюк, Алексей Асанов, Дмитрий Панасюк, Борис Осипов,
Павел Скворцов, Эрик Халимов, Геннадий Мирошниченко, Михаил Судья, Виталий Закорчевный, Максим Денисов, Татьяна Грибок, Арина Аригри, Олег Ильицкий, Роман Поботин&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отдельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Тренинг Automation in Action Java
          </title>
          <link>http://automation-remarks.com/2018/java-training/index.html</link>
          <pubDate>Mon, 6 Aug 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/java-training/index.html</guid>
          <description>
                        Тренинг для тестировщиков автоматизаторов
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Появилось время на обучение. Решил запустить обучающую программу.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Эта программа тренинга направлена на практическую составляющую.
Этот курс расчитан не для начинающих. Я ожидаю видеть ребят которые уже работают на проектах и смогут применять полученные знания у себя, не важно даже если вы сейчас работает на позиции Manual QA, но хотите с чего-то начать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Требования:
- Знания Java. Умение читать и понимать Java код.
- Знание консольных утелит git, linux commands&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Чего не будет:
- Основ Java
- Основ операционных систем
- Основ тестирования
- Много теории&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что будет:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Много практики&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Создание проекта для тетирования REST API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;подходы к автоматизации&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;структура проекта&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;управление тестовыми данными&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Создание проекта для тестирования UI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;подходы к построению &quot;фреймворка&quot;
на основе как проверенных инструментов, так и альтернативных типа HTMLElements 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;подходы к управлению тестовыми данными&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;репортинг&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Настройка CI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gitlab CI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins с пайплайнами и подходом Infrastructure as a code. Jenkins job DSL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Инфраструктура для автоматизации на основе облачных решений от DigitalOcean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;подходы к управлению инфраструктурой.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;configuration management на основе ansible&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Запуск тестов в Docker контейнерах&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;обзор существующих решений и работа с инструментами которые я использую каждый день&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все это с реальным демо проектом построенным на микросервисной архитектуре.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Цена 300$&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Детали можно узнать в telegram &lt;strong&gt;@spirogov&lt;/strong&gt; или написав письмо на &lt;strong&gt;automationremarks@gmail.com&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Telegram канал - automation-remarks.com
          </title>
          <link>http://automation-remarks.com/2018/telegram/index.html</link>
          <pubDate>Sun, 5 Aug 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/telegram/index.html</guid>
          <description>
                        Официальный телеграм канал
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет, решил написать статью и пояснить ситуацию с блогом. Здесь уже достаточно давно
не появляются новые заметки. Их заменили публикации выпусков подкаста.
Увы но с появлением ребенка времени на создание заметок стало меньше. Подкаст забирает
основное внимание и силы. Этот блог целых 4 года был источником знаний и полезной информации для многих.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как альтернатива блогу у меня есть telegram канал &lt;a href=&quot;https://t.me/automation_remarks&quot; class=&quot;bare&quot;&gt;https://t.me/automation_remarks&lt;/a&gt;, в который перекочевала основная масса сообщений.
Если вы хотите и дальше продолжать получать полезную информацию, советую подписаться.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Блог закроется?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Нет, блог продолжит жизнь, однако новые заметки будут выходить реже.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Эпизод-17: Александр Венгер о том, как стать самым крутым и другие инсайды с тестатонов
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep17/index.html</link>
          <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep17/index.html</guid>
          <description>
                        Запись подкаста c победителем DevChallenge 12
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Поймали чемпиона и заставили его рассказать всю правду.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Как пришел в IT? Где греб?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Немного о проекте &quot;Каратель&quot;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как из простого QA Automation перейти в перформанс QA?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Почему Саше не страшна утечка данных из ФБ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Зачем пошел на Dev Challenge?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Опция участие бесплатно и участие за бабло?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про поездку в долину?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Инсайды есть, что понравилось?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какая тактика оказалась выигрышной? Больше багов или круче доки?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Можно ли после победы идти опять?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Что дала победа? Научился ли чему-то новому?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Срыв покровов, что не понравилось в DevChallenge?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дали ли +300 после победы?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Советы тем, кто хочет учавствовать и побеждать&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - бог звука в подкасте&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Александр Венгер - абсолютный чемпион DevChallenge 12&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/471599028%3Fsecret_token%3Ds-7D9lM&amp;color=%238c8c64&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алиса Маркова, Алексей Игнатюк, Алексей Асанов, Дмитрий Панасюк, Борис Осипов,
Павел Скворцов, Эрик Халимов, Геннадий Мирошниченко, Михаил Судья, Виталий Закорчевный, Максим Денисов, Татьяна Грибок, Арина Аригри, Олег Ильицкий, Роман Поботин&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отдельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QA Guild Podcast #15: Про тестатоны
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep15/index.html</link>
          <pubDate>Sun, 1 Jul 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep15/index.html</guid>
          <description>
                        QA Guild Podcast
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Душевный разговор про тестатоны.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Что такое тестатон и что там делают?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Когда это вообще появилось в наших широтах?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Кто организовывает тестатоны и зачем это им это нужно?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какая причина похода на тестатон, как участника?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Можно ли на тестатоне чему-то научиться новому?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как стать судьей?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Что дает проектам которые тестируют?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дает ли что-нибудь победа? Деньги, опыт, строчка в резюме&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Можно ли после победы сразу просить +300&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Хантят ли победителей тестатона прям там?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Почему мало тестатонов по автоматизации?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - вошел в IT через галеру&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - вошел в IT как нормальный человек&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Александр Ищенко - принимал участие в тастатонах в качестве участника и теперь является членом орг. коммитета тестатона для стартапов TestUAStartups.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Анна Чернышова - работает в Альфа-Банке, одна из создателей библиотеки akita и с ней же победила на тестатоне в Вильнюсе&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Евгений Клименко - неоднократно побеждал на тестатонах&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Алексей Бурдин - основатель Kyiv Testers Meetup, неоднократно судья на тестатонах&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/465880470%3Fsecret_token%3Ds-iC5op&amp;color=%238c8c64&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алиса Маркова, Алексей Игнатюк, Алексей Асанов, Дмитрий Панасюк, Борис Осипов,
Павел Скворцов, Эрик Халимов, Геннадий Мирошниченко, Михаил Судья, Виталий Закорчевный, Максим Денисов
Татьяна Грибок, Арина Аригри&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
Отдельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QA Guild Podcast: О том, через какие курсы лучше &quot;Войти в АйТи&quot; (18+)
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep14/index.html</link>
          <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep14/index.html</guid>
          <description>
                        QA Guild Podcast
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Символично в июне решили поговорить про вход в IT и &quot;июней&quot; после курсов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Вступление (0:03)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Представление гостей (0:30)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Откуда взялся феномен “Войди в АйТи” (3:06)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про платные курсы (15:20)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Горячие месяцы для обучения (17:35)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Классический портрет успешного ваЙТишника (18:28)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Пример “успешных” кандидатов (21:24)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Рассизм по курсовому признаку (24:20)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Сколько зарабатывают  на курсах и консультациях (28:30)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про курсы внутри компании (32:58)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Почему имея знания, люди идут на платные курсы (40:28)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про днину на курсах (41:25 )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про мотивацию платить за ИТ курсы (54:55)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про успех входа в ИТ после курсов (58:40)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Три требования к джуниору (1:07:13)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Нужно ли идти в айти через тестирование или у нас уже и так дышать нечем? (1:08:48)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Конкуренция среди соискателей (1:14:12)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Проблемы, которые есть в самих курсах (1:22:20)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Что выгоднее МАЙНИТЬ или КОСИТЬ БАБЛО на курсах? (1:35:00)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какой путь выбрать для работы в IT (1:37:30)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - вошел в IT через галеру&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - вошел в IT как нормальный человек&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Алексей Лупан - вошел в IT раньше всех и теперь учит других&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Артем Быковец - вошел в IT и сделал свои курсы для вайтишников&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Николай - вошел в IT через работу и решил остаться&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/458125860&amp;color=%238c8c64&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;a class=&quot;btn btn-primary&quot; role=&quot;button&quot; href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алиса Маркова, Алексей Игнатюк, Алексей Асанов, Дмитрий Панасюк, Борис Осипов,
Павел Скворцов, Эрик Халимов, Геннадий Мирошниченко, Михаил Судья, Виталий Закорчевный, Максим Денисов
Татьяна Грибок, Арина Аригри&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8203;&lt;br&gt;
Отдельное спасибо за монтаж звука Ярославу Пернеровскому&lt;br&gt;
Рома Маринский и Игорь Перетятько получают благодарность за оформление таймкодов&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Консультации для автоматизаторов
          </title>
          <link>http://automation-remarks.com/2018/consulting/index.html</link>
          <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/consulting/index.html</guid>
          <description>
                        Про консультации
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! В этом посте решил рассказать о своем опыте консультирования по автоматизации тестирования.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Осознание того, что в  мире автоматизации тестирования нету нормальных ресурсов для обучения
и устранения проблем, которые сложно решить самому, ко мне пришло после сотрудничества с несколькими IT школами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сейчас на рынке много предложений для тех, кто хочет войти в сферу IT. Но что делать тем, кто уже работает?
Я сам сталкивался с этой проблемой, когда был джуниором. Ты что-то делаешь на работе, но, бывает, очень сложно понять,
насколько это правильно. В больших компаниях у джуниоров и специалистов среднего уровня зачастую есть
ментор, который может подсказать, что и как. Однако существует огромный пласт компаний, в которых ребята пытаются построить автоматизацию самостоятельно.
Обычно - это самоучки, которые на собственном энтузиазме что-то изучали в интернете или ходили на курсы, а потом начали делать автоматизацию у себя на проекте.
Сталкиваясь с такими кейсами в процессе консультирования, я заметил, что автоматизация тестирования, &quot;построенная на энтузиазме&quot;,
без присмотра опытных людей, либо не работает вообще, либо работает не так эффективно, как могла бы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Именно таким ребятам я и решил помогать решать проблемы,так как имею определенный опыт и могу им поделиться.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Менторинг:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://spirogov.github.io/%D0%BE%D0%B1%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5/2018/06/08/mentor.html&quot;&gt;Менторинг&lt;/a&gt; - это отличный формат, с помощью которого человек может улучшить свои навыки.
У вас в компании нету надлежащей экспертизы и вы сталкиваетесь с какой-то проблемой? Путей решения у вас два.
Первый - неделями гуглить и лопатить книги. Второй - попросить опытного человека помочь.
Часто на курсах, к примеру, решают проблемы группы. Все учат один инструмент с одинаковым подходом. В моем же случае
менторинг предусматривает индивидуальный подход и, в первую очередь, направлен на решение проблемы конкретного человека.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Персональная консультация:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Следующий формат - &lt;a href=&quot;https://spirogov.github.io/%D0%BE%D0%B1%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5/2016/06/08/consulting.html&quot;&gt;персональная консультация&lt;/a&gt;.
Это удобно, если человеку нужно решить одну конкретную проблему.
К примеру, настроить CI или создать каркас проекта для автоматизации. Такая штука отлично подходит для людей,
которым просто нужно один раз дать толчок, а дальше они сами смогут разобраться. Мой кейс, когда Docker
только начинал набирать популярность, я не мог понять вообще, что это такое и как оно работает. Я заплатил 100$ и пошел на платный
мастер-класс, на котором мы подробно разобрали вопрос. Знания, полученные тогда, до сих пор помогают мне в моей работе и окупились уже неоднократно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Мастер-классы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну, и наконец я иногда провожу мастер-классы, на которых показываю некоторые практики и подходы, которые
помогают ребятам на их основной работе. Такой формат требует значительных затрат по времени, поэтому мастер-классы случаются редко.
Один из примеров - это мастер-класс по настройке &lt;a href=&quot;https://www.patreon.com/posts/jenkins-master-18271646&quot;&gt;Jenkins CI&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу отметить, что проведение консультаций требует нового уровня знаний и опыта, так как проблему нужно
решать быстро и давать результат. Если на обычной работе вы можете месяцами мудохать 5 тестов, то здесь такая тема не прокатит.
Как плюс для личностного развития - это возможность видеть подходы, решения и инструменты, с которыми раньше не работал.
Как пример &lt;a href=&quot;http://dredd.org/en/latest/&quot;&gt;Dredd&lt;/a&gt; или appium.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вам нужна помощь, смело обращайтесь через форму на &lt;a href=&quot;https://spirogov.github.io/&quot;&gt;сайте&lt;/a&gt;.
Пишите свои вопросы и я обязательно постараюсь вам помочь.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QA Guild Podcast: Дария Бондарева о том, как тестировать AR
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep12/index.html</link>
          <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep12/index.html</guid>
          <description>
                        QA Guild Podcast
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Очень интересный выпуск о тестировании AR приложений.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Какие реальности бывают и чем они отличаются&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как тестировать AR приложения&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Что такое хололенс, что он позволяет и какие приложения под него можно писать&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Интересные моменты и особенности при тестировании хололенс&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Кружится ли голова после тестов?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Можно ли автоматизировать тестирование AR приложений&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Какие проекты кроме порно, симуляторов и игр в топе&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как AR используют в IKEA&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Дария Бондарева - работает в MobiDev. Смотрела в другой мир через линзы хололенс&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Полезные ссылки&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/hololens&quot;&gt;Hololens&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rb.ru/story/vsyo-o-vr-ar/&quot;&gt;Все, что нужно знать про VR/AR-технологии&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.htc-cs.ru/post/dopolnennaya-realnost-kak-ehto-testirovat&quot;&gt;Дополненная реальность: как тестировать?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.qasource.com/virtual-reality-qa-testing-what-to-test-and-why&quot;&gt;Virtual Reality QA Testing: What to Test and Why&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/436461330&amp;color=%238c8c64&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Эрик Халимов, Виталий Закорчевный, Максим Денисов,
Павел Скворцов, Борис Осипов, Дмитрий Панасюк, Евгения Гнатюк,
Алексей Игнатюк, Илья Силантьев, Геннадий (без фамилии) ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отлельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вступайте в свободную &lt;a href=&quot;https://qaguild-slack.herokuapp.com/&quot;&gt;QA гильдию в Slack&lt;/a&gt; и следите за новостями.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QA Guild Podcast: Святослав Логин о том как войти в секьюрити тестирование и защититься от веб-бандитов
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep10/index.html</link>
          <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep10/index.html</guid>
          <description>
                        QA Guild Podcast
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Записали выпуск про интро в секьюрити тестрование.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Про безопасность в prom.ua&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;С чего начать самоучке&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Интро в тулы для тестирования безопасности&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как понять что вас взламывают&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Как писать код, чтобы вас не взломали&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Помогают ли &quot;белые хакеры&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Про метасплойт&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Сколько можно косить бабла на тестировании безопасности&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - заводила подкаста&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ярослав Пернеровский - бог звука в подкасте&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Святослав Логин - QA лид в EVO company. Вошел в секьюрити сам&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Полезные ссылки&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://haveibeenpwned.com/&quot;&gt;Проверить были ли вы хакнуты&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://loginsvyat.wixsite.com/loginsvyat&quot;&gt;Блог святослава&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://defcon.ru/tag/owasp/&quot;&gt;Сайт с инфой по инструментам&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=XcLI4cdWOCs&amp;amp;list=PLrTb7qqxTtPFxl8ZcAICTVXkSB34gCnma&quot;&gt;Видосики про этичный хакинг&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Промокод для QAFest - &lt;strong&gt;QAGUILD&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/433437720&amp;color=%23e0e01a&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;amp;mt=2&quot;&gt;Слушать в Itunes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Эрик Халимов, Виталий Закорчевный, Максим Денисов,
Павел Скворцов, Борис Осипов, Дмитрий Панасюк, Евгения Гнатюк,
Алексей Игнатюк, Илья Силантьев, Геннадий (без фамилии) ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отлельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вступайте в свободную &lt;a href=&quot;https://qaguild-slack.herokuapp.com/&quot;&gt;QA гильдию в Slack&lt;/a&gt; и следите за новостями.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Ansible для лучшей автоматизации
          </title>
          <link>http://automation-remarks.com/2018/ansible/index.html</link>
          <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/ansible/index.html</guid>
          <description>
                        Немного про Ansible и Selenoid
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Продолжаем наше путешествие по просторам мира автоматизации. В этот раз решил рассказать
об управлении инфраструктурой. Однажды на проекте мы решили попробовать &lt;a href=&quot;http://automation-remarks.com/2017/selenoid/index.html&quot;&gt;настроить Selenoid&lt;/a&gt;.
Время шло, количество тестов росло и стало понятно, что одного инстанса Selenoid уже не хватает. Первый инстанс я настроил ручками через
docker compose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но с ростом количества машин выяснилось, что настраивать все таким способом не очень удобно. Поэтому выбор пал на Ansible.
С его помощью можно очень легко все развернуть. Ниже смотрим пример.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Устанавливаем ansible:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;pip install ansible&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем папку с проектом:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;mkdir selenoid&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Внутри создаем файл hosts, в котором надо прописать адреса машин:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;[all:vars]
ansible_python_interpreter=/usr/bin/python3
ansible_user=ubuntu

[ggr]
172.28.28.17

[selenoid-nodes]
172.28.27.12
172.28.27.13
172.28.27.56&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На 3х нодах у нас будет selenoid, а на четвертой ggr.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для того, чтобы развернуть selenoid и ggr, можно написать свои плейбуки, но лучше использовать готовые роли &lt;a href=&quot;https://github.com/SergeyPirogov/gridrouter-docker&quot;&gt;gridrouter-docker&lt;/a&gt;
и &lt;a href=&quot;https://github.com/SergeyPirogov/selenoid-ansible&quot;&gt;selenoid-ansible&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Установить роли можно с помощью ansible-galaxy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;ansible-galaxy install --roles-path ./roles git+https://github.com/SergeyPirogov/gridrouter-docker.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;ansible-galaxy install --roles-path ./roles git+https://github.com/SergeyPirogov/selenoid-ansible.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь можно использовать роли. Создаем &lt;strong&gt;cluster.yml&lt;/strong&gt; плейбук:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;---
- hosts: ggr
  vars:
    grid_router_version: 1.5.0
    grid_router_path: &quot;{{ ansible_env.HOME }}/grid-router&quot;
    grid_router_qouta_path: &quot;{{ ansible_env.HOME }}/grid-router/quota&quot;
    grid_router_port: 4445

    grid_router_regions:
        - name: &quot;cluster&quot;
          hosts:
          - name: 172.28.27.12
            port: 4444
            browser_count: 4
          - name: 172.28.27.13
            port: 4444
            browser_count: 4
          - name: 172.28.27.56
            port: 4444
            browser_count: 4

    grid_router_browsers:
        - name: &quot;chrome&quot;
          defaultVersion: &quot;62.0&quot;
          versions:
            - &quot;62.0&quot;
            - &quot;63.0&quot;
  roles:
    - gridrouter-docker

- hosts: selenoid-nodes
  vars:
    selenoid_version: 1.5.2
    selenoid_cm_version: 1.4.0
    selenoid_docker_api_version: 1.35
    selenoid_limit: 4
    selenoid_tmpfs: 128
    selenoid_config_dir: &quot;{{ ansible_env.HOME }}/selenoid&quot;
    selenoid_listen_port: 4444
    selenoid_browsers_last_versions: 3
    selenoid_browsers:
      - chrome
  roles:
    - selenoid-ansible&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этот плейбук развернет ggr и три инстанса selenoid. Для большей красоты нужно еще поставить telegraf.
Создаем &lt;strong&gt;telegraf.conf&lt;/strong&gt; файл. Пример можно смотреть &lt;a href=&quot;https://raw.githubusercontent.com/aerokube/selenoid-grafana-example/master/telegraf.conf&quot;&gt;здесь&lt;/a&gt;:
Теперь создаем &lt;strong&gt;telegraf.yml&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;---
- hosts: selenoid-nodes
  tasks:
    - name: Copy telegraf config
      copy:
        src: telegraf.conf
        dest: &quot;{{ ansible_env.HOME }}/telegraf&quot;

    - name: Selenoid | Check selenoid container exist
      shell: &apos;docker ps -aq --filter &quot;name={{ item }}&quot;&apos;
      with_items:
        - &apos;telegraf&apos;
      register: found_containers

    - name: Selenoid | Remove selenoid container if exist
      shell: &apos;docker stop {{ item.item }} &amp;amp;&amp;amp; docker rm -fv {{ item.item }}&apos;
      with_items: &apos;{{ found_containers.results }}&apos;
      when: item.stdout

    - name: Start telegraf
      docker_container:
        image: telegraf:latest
        name: telegraf
        state: started
        links:
          - selenoid
        volumes:
          - &quot;{{ ansible_env.HOME }}/telegraf:/etc/telegraf/telegraf.conf:ro&quot;
        env:
          INFLUXDB_URI: &quot;http://172.28.28.17:8086&quot;
          HOST_IP: &quot;{{ hostvars[inventory_hostname][&apos;ansible_default_ipv4&apos;][&apos;address&apos;] }}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Здесь мы указываем, какой образ &lt;strong&gt;telegraf&lt;/strong&gt; брать, а также куда складывать. В данном примере указан &lt;strong&gt;influx&lt;/strong&gt;.
Дальше билдаем Grafana из этого &lt;a href=&quot;https://github.com/aerokube/selenoid-grafana-example&quot;&gt;репозитория&lt;/a&gt;.
Вжух и теперь вы можете легко развернуть &lt;strong&gt;selenoid&lt;/strong&gt; кластер. Становится достаточно просто увеличить количество инстансов и поменять конфиг.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Учим Gradle менять потоки в TestNG
          </title>
          <link>http://automation-remarks.com/2018/gradle-testng/index.html</link>
          <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/gradle-testng/index.html</guid>
          <description>
                        Костыли вокруг Gradle и TestNG
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Давно не постил какой-то технической годноты.
С появлением ребенка найти время на написание заметок становится сложно.
В этой заметке я расскажу, как я решал проблему параметризации TestNG xml и Gradle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В чем состоит проблема?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скажем, у меня есть стандартный TestNG xml:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE suite SYSTEM &quot;http://testng.org/testng-1.0.dtd&quot; &amp;gt;
&amp;lt;suite name=&quot;smoke.tests&quot; thread-count=&quot;3&quot; parallel=&quot;classes&quot;&amp;gt;
    &amp;lt;listeners&amp;gt;
        &amp;lt;listener class-name=&quot;com.tcoe.testrail.TestListener&quot;/&amp;gt;
        &amp;lt;listener class-name=&quot;com.jira.client.JiraTestListener&quot;/&amp;gt;
    &amp;lt;/listeners&amp;gt;
    &amp;lt;test name=&quot;Smoke tests&quot;&amp;gt;
        &amp;lt;groups&amp;gt;
            &amp;lt;run&amp;gt;
                &amp;lt;include name=&quot;smoke&quot;/&amp;gt;
            &amp;lt;/run&amp;gt;
        &amp;lt;/groups&amp;gt;

        &amp;lt;packages&amp;gt;
            &amp;lt;package name=&quot;com.demo.tests.*&quot;/&amp;gt;
        &amp;lt;/packages&amp;gt;
    &amp;lt;/test&amp;gt;
&amp;lt;/suite&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот в этом xml файле я хочу менять значение переменной &lt;code&gt;thread-count&lt;/code&gt;, чтобы потом иметь возможность
запускать тесты в CI с переменным количеством потоков.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Выглядит как простая задача. В мавене, к примеру, все работает &lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/examples/testng.html&quot;&gt;прям из коробки&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В Gradle чуваки почему-то не удосужились сделать хорошо, потому приходится городить костыли, которые я покажу ниже.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Значит, если мы берем xml, то в build.gradle файле нужно написать:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;test {
    useTestNG() {
        suites &apos;src/test/resources/smoke.xml&apos;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ок, а как теперь менять переменную в файле?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Тупое, но рабочее решение:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем файл темплейт &lt;code&gt;smoke_template.xml&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом файле прописываем такую штуку:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE suite SYSTEM &quot;http://testng.org/testng-1.0.dtd&quot; &amp;gt;
&amp;lt;suite name=&quot;smoke.tests&quot; thread-count=&quot;${thread.count}&quot; parallel=&quot;classes&quot;&amp;gt;
    &amp;lt;listeners&amp;gt;
        &amp;lt;listener class-name=&quot;com.tcoe.testrail.TestListener&quot;/&amp;gt;
        &amp;lt;listener class-name=&quot;com.jira.client.JiraTestListener&quot;/&amp;gt;
    &amp;lt;/listeners&amp;gt;
    &amp;lt;test name=&quot;Smoke tests&quot;&amp;gt;
        &amp;lt;groups&amp;gt;
            &amp;lt;run&amp;gt;
                &amp;lt;include name=&quot;smoke&quot;/&amp;gt;
            &amp;lt;/run&amp;gt;
        &amp;lt;/groups&amp;gt;

        &amp;lt;packages&amp;gt;
            &amp;lt;package name=&quot;com.demo.tests.*&quot;/&amp;gt;
        &amp;lt;/packages&amp;gt;
    &amp;lt;/test&amp;gt;
&amp;lt;/suite&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В нашем &lt;code&gt;build.gradle&lt;/code&gt; создаем две таски:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;task generateXml &amp;lt;&amp;lt; {
    def threadNum = System.getProperty(&quot;threadCount&quot;, &quot;2&quot;)

    def text = file(Paths.get(&apos;src/test/resources&apos;, &quot;smoke_template.xml&quot;))
            .text
            .replace(&apos;${thread.count}&apos;, threadNum)

    def file = file(Paths.get(&apos;src/test/resources&apos;, &quot;smoke_ready.xml&quot;))
    file.text = text

    print(&quot;Use &quot; + file.text)
}

task smokeTest(type: Test, dependsOn: generateXml) {
    useTestNG() {
        suites &apos;src/test/resources/smoke_ready.xml&apos;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Здесь мы просто считали файл &lt;code&gt;smoke_template.xml&lt;/code&gt;, реплейснули плейсхолдер и записали в новый файл, который потом используем для запуска тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Элегантное решение:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Внутри блока &lt;strong&gt;useTestNG()&lt;/strong&gt; можно использовать XmlBuilder():&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;task smokeTest(type: Test){
    useTestNG(){
        def threadCount = System.getProperty(&quot;threadCount&quot;, &quot;2&quot;)

        suiteXmlBuilder().suite(name: &apos;smoke.tests&apos;, parallel: &apos;classes&apos;, &apos;thread-count&apos;: threadCount) {
            test (name : &apos;Smoke tests&apos;) {
                groups {
                     run{
                       &apos;include&apos; (name:&apos;smoke&apos;)
                     }
                }

                packages {
                    &apos;package&apos; (name: &apos;com.demo.tests.*&apos;)
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом подходе мы используем силу &lt;strong&gt;Gradle build&lt;/strong&gt; файла и мощь &lt;strong&gt;Groovy&lt;/strong&gt;. Все елементы здесь
являются кодом, поэтому мы можем легко параметризовать любой параметр.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом все, теперь, когда вы будете решать подобную задачу, у вас будет пример решения.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P/S&lt;/strong&gt;: Если вы давно читаете блог и контент вам нравится, вы можете поддержать выход новых заметок,
став патроном &lt;a href=&quot;https://www.patreon.com/automation_remarks&quot; class=&quot;bare&quot;&gt;https://www.patreon.com/automation_remarks&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QA Guild Podcast: Многообещающий JavaScript
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep7/index.html</link>
          <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep7/index.html</guid>
          <description>
                        QA Guild Podcast
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Доступен очередной выпуск подкаста от свободной QA гильдии.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Темы:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Какой стек сейчас в тренде? (относительно тестов)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ES 5,6,7 + Flow vs TypeScript&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Компонентное тестирование для Angular or React&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WebdriverJS vs WebdriverIO vs Protractor vs NightwatchJS vs others&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Что такое CodeseptJS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;В чем писать код? VSCode, Webstorm, Notepad+, Atom, VIM?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сергей Пирогов - нулячий JS SDET&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Рома Маринский - не сумел выучить JS за 3 часа&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Александр Хотемской - @xotabu4 JS ниндзя&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Никита Галкин  - JS архитектор&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Михаил Боднарчук - @davert opensource maker. Автор CodeceptJS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Полезные ссылки&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hH39797J/javascript-videos-ru-2018&quot;&gt;Собрание видеозаписей докладов про JS за 2018 год&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLZ66c9_z3umNSrKSb5cmpxdXZcIPNvKGw&quot;&gt;Assert(js) Conf 2018&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/javascript-learning-landscape-2018&quot;&gt;The JavaScript Learning Landscape in 2018&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1A1daNePtWfk-GwD8BQ6LlscHxbp4lowIBpMWz5XQ5Ew/edit#gid=0&quot;&gt;Выбор фреймворка для тестирования фронтэнда 2018&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://node.green/&quot; class=&quot;bare&quot;&gt;https://node.green/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/galkin/testing-in-frontend-world-at-frontend-fwdays-17-conference&quot; class=&quot;bare&quot;&gt;https://speakerdeck.com/galkin/testing-in-frontend-world-at-frontend-fwdays-17-conference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/419490724&amp;color=%238cb092&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Спасибо патронам&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Эрик Халимов, Виталий Закорчевный, Максим Денисов,
Павел Скворцов, Борис Осипов, Дмитрий Панасюк, Евгения Гнатюк,
Алексей Игнатюк, Илья Силантьев, Геннадий (без фамилии) ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отлельное спасибо за монтаж звука Ярославу Пернеровскому&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вступайте в свободную &lt;a href=&quot;https://qaguild-slack.herokuapp.com/&quot;&gt;QA гильдию в Slack&lt;/a&gt; и следите за новостями.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Видео с SeleniumCamp 2018
          </title>
          <link>http://automation-remarks.com/2018/se-2018-video/index.html</link>
          <pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/se-2018-video/index.html</guid>
          <description>
                        Видео моего выступления с SeleniumCamp 2018
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Стали доступны записи выступлений с конференции SeleniumCamp 2018.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Запись моего доклад можно помсмотреть ниже:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/s48RA9SJ8t8&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как дополнение вы можете послушать записи подкастов по мотивам конференции:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;SeleniumCamp Day 1&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/407994264&amp;color=%238cb092&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;SeleniumCamp retro&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/411985032&amp;color=%238cb092&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Kotlin для автотестов: боевой опыт
          </title>
          <link>http://automation-remarks.com/2018/kotlin-autotest-2018/index.html</link>
          <pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/kotlin-autotest-2018/index.html</guid>
          <description>
                        Мой опыт написания автотестов на Котлине
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет, друг! Меня часто просят рассказать о нашей практике написания тестов на Котлине.
Наконец-то я нашел время и решил поделиться своим опытом.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начну с того, что еще в сентябре 2017 года я рассказывал &lt;a href=&quot;http://automation-remarks.com/2017/kotlin-without-marketing/index.html&quot;&gt;о Котлине на конференции QAFest&lt;/a&gt;.
С того времени утекло много воды, кое-что я переосмыслил.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давай сначала поясню мотивацию писать на Котлине. Джава подутомила. Реально, когда ты пишешь тесты, то некоторые
конструкции хотелось бы опустить. Для примера покажу типичный &lt;strong&gt;PageObject&lt;/strong&gt; в моих проектах:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@PageUrl(&quot;/&quot;)
class LoginPage {

  SelenideElement userNameInput = $(&quot;#userName&quot;);
  SelenideElement passwordInput = $(&quot;#password&quot;);
  SelenideElement signInBtn = $(&quot;#loginBtn&quot;)
  public SelenideElement errorMessage = s(&quot;#page__loginByEmail &amp;gt; div:nth-child(3) &amp;gt; div&quot;)

  public logisAs(User user){
   userNameInput.setValue(user.getName());
   passwordInput.setValue(user.getPassword());
   signInBtn.click();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Простой класс с полями и методами. Можно холиварить, хорошо так писать или плохо, но я так пишу везде. Для целостности картины
покажу тест:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class LoginTest {

  @Test
  public void testCanNotLoginWithWrongCredentials(){
     User user = TestData.getUser();

     LoginPage loginPage = open(LoginPage.class);

     loginPage.loginAs(user);
     loginPage.errorMessage.shouldHave(text(&quot;Bad credentials&quot;));
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все достаточто просто и без лишнего. Чтобы упростить написание тестов и убрать некоторые излишества, я &lt;a href=&quot;http://automation-remarks.com/2017/lombok/index.html&quot;&gt;пробовал использовать
Lombok&lt;/a&gt;. С ним, вроде как, все хорошо, кроме плагина для Idea. В общем, использовать можно, но будь готов к
сюрпризам.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом Котлин еще был выбран из-за желания попробовать его в реальном проекте. Хайпа вокруг языка достаточно,
да и опыт проб в домашних проектах показывал, что все будет хорошо.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для проекта я выбрал Kotlin + Selenide + Allure + Gradle. Имхо сейчас все инструменты, окромя Котлина, стандарт для
Джава проектов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Костыль первый!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Знак &lt;strong&gt;$&lt;/strong&gt; является зарезервированным в Котлине, поэтому пришлось написать две обертки:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;fun s(locator: String): SelenideElement {
    return Selenide.`$`(locator)
}

fun ss(locator: String): ElementsCollection {
    return Selenide.`$$`(locator)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь, значит, можно переписать наш &lt;strong&gt;PageObject&lt;/strong&gt; на Котлине:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class LoginPage : Page() {

    override val url: String = &quot;/&quot;

    val userNameInput = s(&quot;#username&quot;)
    val passwordInput = s(&quot;#password&quot;)
    val sighInBtn = s(&quot;#loginBtn&quot;)
    val errorMessage = s(&quot;#page__loginByEmail &amp;gt; div:nth-child(3) &amp;gt; div&quot;)

    fun loginAs(user: User): MainPage {
        userNameInput.value = user.name
        passwordInput.value = user.password
        sighInBtn.click()
        return MainPage()
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Тест будет выглядеть так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class LoginTest {

  @Test
  fun testCanNotLoginWithWrongCredentials() {
     val user = TestData.getUser()

     val loginPage = open(::LoginPage)

     loginPage.loginAs(user)
     loginPage.errorMessage.shouldHave(text(&quot;Bad credentials&quot;))
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ты можешь возразить, что ничего особенно не поменялось и будешь абсолютно прав. Для написания Web тестов
особого профита нет. Да, код становится писать чуть-чуть проще, используя &lt;strong&gt;val&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что неудобно с переходом на Котлин - нужно много делать &lt;strong&gt;static import&lt;/strong&gt;. Особенно в случаях с &lt;strong&gt;Conditions.text()&lt;/strong&gt;.
Пока что Idea не позволяет импортить это на лету, как в Джаве.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Эту штуку в принципе можно легко поправить, добавив BDD style ассерты для Selenide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пишем метод расширения и реализацию ассертов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;val SelenideElement.should:ExpextElement get() {
    return ExpextElement(this)
}

class ExpextElement(private val actual: SelenideElement){

    val have: Have = Have()
    val be: Be = Be()

    inner class Have{
        fun text(text:String){
            actual.shouldHave(Condition.text(text))
        }

        fun exactText(text: String?) {
            actual.shouldHave(Condition.exactText(text))
        }
    }

    inner class Be{
        val visible:Unit get() {
            actual.shouldBe(Condition.visible)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь проверки в Selenide можно писать как старым методом:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;loginPage.siteLogo.shouldBe(visible)
loginPage.errorMessage.shouldHave(text(&quot;Bad credentials&quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;так и более Котлин ориентированным:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;loginPage.siteLogo.should.be.visible
loginPage.errorMessage.should.have.text(&quot;Bad credentials&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мне такой варинт нравится по нескольким причинам:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;не нужно постоянно делать static import;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;работает автокомлит в Idea;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;коллегам, которые слабо знают Selenide, не нужно объяснять разницу между should, shouldBe и shouldHave.
Я встречал кейсы, где люди пишут &lt;code&gt;element.shouldHave(blank)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Так, с Web тестами вроде как понятно. Еще покажу пример использования для работы с базой.
Я уже писал &lt;a href=&quot;http://automation-remarks.com/2017/kotlin-db/index.html&quot;&gt;подобную заметку&lt;/a&gt;, но тогда это были первые шаги,
теперь же - как ретроспективка.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Значит, нормальной ORM я для Котлина не нашел. Пробовал и &lt;a href=&quot;https://github.com/JetBrains/Exposed&quot;&gt;Exposed&lt;/a&gt;, и
другие, которые можно найти на Github. Некоторые не поддерживают MS SQL Server, некоторые обладают каким-то
упоротым API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Короче говоря, пришлось писать свой велосипед. За основу я взял &lt;strong&gt;Apache DBUtils&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;fun QueryRunner.query(sql: String): List&amp;lt;Map&amp;lt;String, Any?&amp;gt;&amp;gt; {

    val resultSetHandler = ResultSetHandler&amp;lt;List&amp;lt;Map&amp;lt;String, Any?&amp;gt;&amp;gt;&amp;gt; { rs -&amp;gt;
        val meta = rs.metaData
        val cols = meta.columnCount
        val result = arrayListOf&amp;lt;Map&amp;lt;String,Any?&amp;gt;&amp;gt;()

        while (rs.next()) {
            val map = mutableMapOf&amp;lt;String, Any?&amp;gt;()
            for (i in 0 until cols) {
                val columnName = meta.getColumnName(i + 1)
                map[columnName] = rs.getObject(i + 1)
            }
            result.add(map)
        }

        result
    }

    return query(sql,resultSetHandler)
}

inline fun &amp;lt;reified T&amp;gt; QueryRunner.findOne(sql: String): T {
    return BeanHandler(T::class.java).run { query(sql, this) }
}

inline fun &amp;lt;reified T&amp;gt; QueryRunner.findAll(sql: String): MutableList&amp;lt;T&amp;gt; {
    return BeanListHandler(T::class.java).run { query(sql, this) }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создадим еще классы таблиц как пример:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;data class Suppliers(var id: String? = null,
                     var company: String? = null,
                     var currency: String? = null)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь можно работать с базой:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;fun selectAllSuppliers(): MutableList&amp;lt;Suppliers&amp;gt; {
        val sql = &quot;&quot;&quot;
             SELECT *
             FROM Suppliers;
             &quot;&quot;&quot;

        return queryRunner.findAll(sql)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Добавив библиотеку &lt;a href=&quot;https://github.com/winterbe/expekt&quot;&gt;Expekt&lt;/a&gt;, тесты можно писать так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class TestDB {

  val db = Database()

  @Test
  fun testCanGetAllSuppliers(){
    db.selectAllSuppliers().should.have.size(3)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом аспекте все значительно проще. Мне понадобилось добавить пару Extension методов для класса QueryRunner
и прикрутить готовую библиотеку для удобных ассертов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вывод: пока что впечатления о самом языке Котлин положительные. Интеграция с суровыми
Java библиотеками иногда может вызвать панику. Пару раз у нас Котлин не желал компилироваться и падал со странными
ошибками о том, что Gradle daemon умер. Оказалось, ему просто не хватало Heap памяти. По факту я нашел
в баг трекере тикет на эту проблему и, вроде бы, починилось оно переходом на самую свежую версию Котлина
и Грейдла. Сейчас такого не наблюдается. Тьфу-тьфу.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как видишь, большого преимущества перехода с Джавы на Котлин не наблюдается. Некоторые
вещи становится делать удобнее, но не намного. Буду ли я пробовать делать еще проекты на Котлине?
Пока не могу ответить - все упирается в рынок труда. Найти хороших автоматизаторов, которые могут делать
работу хорошо на Джаве, - сложно. Тех, кто хотя бы как-то видел Котлин, среди них еще меньше.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом я продолжаю следить за этим языком. Было бы полезно узнать опыт других ребят,
которые пробовали что-то делать на Котлине. Если у тебя такой опыт есть, пиши в комментарии или в личку. Подписывайся на
&lt;a href=&quot;https://t.me/automation_remarks&quot;&gt;телеграмм канал&lt;/a&gt;, чтобы получать самые свежие мысли и соображения на тему автоматизации тестирования.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              SeleniumCamp 2018: ретроспектива
          </title>
          <link>http://automation-remarks.com/2018/selenium-2018-retro/index.html</link>
          <pubDate>Thu, 8 Mar 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/selenium-2018-retro/index.html</guid>
          <description>
                        Отзыв о конференции SeleniumCamp 2018
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет, дружище! На прошлых выходных посетил конференцию SeleniumCamp 2018. Дальше опишу свои впечатления.
Уже третий год я прихожу на конференцию в качестве докладчика и второй раз входил в состав программного комитета.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/se2018.jpg&quot; alt=&quot;se2018&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом году количество участников возросло до 650 человек. Несмотря на большее количество посетителей, уровень подготовки и организации
не пострадал. Единственный момент, вызывающий удивление, - отсутствие спонсоров. Самая большая и качественная конференция
по автоматизации тестирования, а спонсоров нет. Этот аспект повлиял на то, что участники вместо общения с рекрутерами на стендах компаний чаще ходили выпить чайку-кофейку и поесть. Поэтому пирожков хватало не всем.
Но это все второстепенно. Конференция - это ж не про еду, а про нетворкинг. Во время перерывов я в основном общался с участниками и другими спикерами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;О программе и докладах&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Имхо программа была составлена достаточно насыщенно и каждый мог найти для себя что-то полезное. Я выступал с двумя докладами:
о построении инфраструктуры для тестов и с пазлерами. Оба доклада удались на достаточно хорошем уровне. Пока что официальных фидбеков нет,
поэтому могу судить, опираясь на собственные ощущения. Что меня удивило - я почему-то нервничал. Но это, скорее, не потому, что
я не знаю, что говорить и как - это страх не оправдать ожидания публики. Особенно переживательно было за пазлеры, которые
мы с моим другом Ярославом Пернеровским тренировали буквально за 30 минут до выхода на сцену. Если вы верите в то, что можно
сделать отличный доклад без прогона, вы ошибаетесь. Хотя нет, можно, но нужно быть очень крутым паблик спикером.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скажу честно, я успел посетить не много докладов и большинство смотрел уже в записи. Из тех, которые мне понравились, могу отметить следующие:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Nikita Makarov&lt;/strong&gt; - Pandora&amp;#8217;s white box: полезный доклад с набором советов и подходов к тестированию. Этот доклад я видел
в записи после Heisenbug 2017. Из него я узнал об инструменте &lt;a href=&quot;https://github.com/TNG/ArchUnit&quot;&gt;ArchUnit&lt;/a&gt;, который
помогает следить за качеством архитектуры ваших тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Alex Khursevich&lt;/strong&gt; - Dockerization of real mobile device farm and scalable QA automation ecosystem: хороший доклад, в
котором рассказано об опыте построения мобильной фермы, аппиуме на докерах и вот этом всем. Очень полезно
для таких профанов в мобильной автоматизации как я.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Andrei Solntsev&lt;/strong&gt; - Flaky tests are a pain: история борьбы Андрея с нестабильными тестами. Несмотря на то, что я видел
этот доклад в записи с Heisenbug, решил послушать еще раз в живую. Очень познавательно и полезно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Oleksandr Khotemskyi&lt;/strong&gt; - Scaling execution of ProtractorJS on AWS Lambda with Selenoid: доклад
о возможностях применения AWS Lambda для прогона тестов. Говорят, что serverless станет очередным хайпом, поэтому
полезно посмотреть, что оно и какими возможностями обладает.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В завершение первого дня мы выпили немного виски и записали отличный выпуск подкаста &lt;a href=&quot;http://automation-remarks.com/podcast/blog/qa-guild-ep4.html&quot; class=&quot;bare&quot;&gt;http://automation-remarks.com/podcast/blog/qa-guild-ep4.html&lt;/a&gt;.
Собственно, в нем вы можете услышать впечатления других спикеров и узнать некоторые недокументированные подробности
из жизни тестерского комьюнити.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В связи с тем, что в моей семье ожидается пополнение, я до осени ухожу в тень. Постараюсь писать заметки и
делать новые выпуски подкаста на регулярной основе. А в живую сможем увидеться уже осенью на конференции QAFest. До встречи!&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Видео: Test Automation Puzzlers
          </title>
          <link>http://automation-remarks.com/2018/qa-fest-automation-puzzlers/index.html</link>
          <pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-fest-automation-puzzlers/index.html</guid>
          <description>
                        Видео выступления с QAFest 2017
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Недавно организаторы QAFest выложили в общий доступ записи
всех выступлений с конференции 2017 года.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ранее я уже выкладывал &lt;a href=&quot;http://automation-remarks.com/2017/kotlin-without-marketing/index.html&quot;&gt;запись выступления&lt;/a&gt; о Котлине.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь вы можете насладиться Automation пазлерами:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/zIzGRbEBqig&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QA Guild Podcast - первый русскоязычный подкаст об автоматизации
          </title>
          <link>http://automation-remarks.com/2018/qa-guild/index.html</link>
          <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild/index.html</guid>
          <description>
                        QA Guild Podcast официалочка
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Решил поделиться с вами новостью о запуске первого русскоязычного подкаста об автоматизации - &lt;a href=&quot;http://automation-remarks.com/podcast/index.html&quot;&gt;QAGuild podcast&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Идея создания такого формата зрела давно, но не хватало смелости взять и сделать. Так уж сложилось, что в сообществе
автоматизаторов и тестировщиков, которые работают в Украине, России, Беларуси и других странах, нету источника получения
новых знаний. Да, мы читаем одни и те же статьи и блоги, учимся на них, но большинство из них - англоязычные. И да, мы обсуждаем новости сферы на отраслевых конференциях.
Но не все любят и имеют возможность ходить на конференции. Проблема также в том, что многие боятся выступать перед аудиторией. Это может быть вызвано страхом публичных выступлений либо недостаточным уровнем подготовки материала. Поэтому я вижу подкаст идеальной площадкой для обмена опытом.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;О чем это будет? Об автоматизации тестирования, трендах, TestOps, DevOps и о вот этом всем. Пилотные выпуски я публиковал
здесь - &lt;a href=&quot;http://automation-remarks.com/2017/qa-guild-ep1/index.html&quot;&gt;раз&lt;/a&gt; и &lt;a href=&quot;http://automation-remarks.com/2018/qa-guild-ep2/index.html&quot;&gt;два&lt;/a&gt;.
Сейчас у подкаста появился свой &lt;a href=&quot;http://automation-remarks.com/podcast/index.html&quot;&gt;официальный сайт&lt;/a&gt;, на котором уже доступен
третий выпуск, посвященный DevOps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для более удобного прослушивания мы добавили официальные каналы в &lt;a href=&quot;https://soundcloud.com/qaguild&quot;&gt;soundcloud&lt;/a&gt; и &lt;a href=&quot;https://itunes.apple.com/ua/podcast/qaguild/id1350668092?l=ru&amp;amp;mt=2&quot;&gt;itunes&lt;/a&gt;.
Впереди у нас запланировано много интересного и полезного.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вы можете задаться вопросом, чем этот подкаст отличается от других?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Здесь вы можете влиять на выпуски и темы. Присоединяйтесь к нашему свободному &lt;a href=&quot;https://qaguild-slack.herokuapp.com/&quot;&gt;Slack сообществу&lt;/a&gt; и предлагайте темы.
Особо стеснительные - пишите мне в личку :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Надеюсь, подкаст принесет многим такую же пользу, как и этот блог. До встречи в эфире ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P/S&lt;/strong&gt; Делать подкаст в разы сложнее, чем писать в блог. Если вам нравится то, что я делаю,
и вы хотели бы как-то поддержать эту инициативу, вы можете задонатить и &lt;a href=&quot;https://www.patreon.com/automation_remarks&quot;&gt;стать патроном&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Test Data Supplier - TestNG Dataprovider на стероидах
          </title>
          <link>http://automation-remarks.com/2018/test-data-supplier/index.html</link>
          <pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/test-data-supplier/index.html</guid>
          <description>
                        Об одной очень хорошей библиотеке для TestNG
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет, друзья! Сегодня хочу поделиться рецептом, который поможет сделать тесты еще лучше.
На большинстве своих проектов я сейчас использую связку инструментов Java/Kotlin + TestNG&lt;br&gt;
Allure + Gradle. Ранее я уже писал о некоторых подходах, которые позволяют нам более
удобно &lt;a href=&quot;http://automation-remarks.com/2017/json-randomizator/index.html&quot;&gt;готовить данные для тестов&lt;/a&gt;,
&lt;a href=&quot;http://automation-remarks.com/2017/kotlin-db/index.html&quot;&gt;работать с базой данных&lt;/a&gt; и &lt;a href=&quot;http://automation-remarks.com/2017/selenide-allure-2/index.html&quot;&gt;писать меньше аннотаций для Allure&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой заметке хочу рассказать о том, как улучшить Dataprovider. Очень часто в тестах приходится
оперировать различными наборами данных. В каких-то случаях данные проще захардкодить,
в каких-то - тащить из внешних источников. В большинстве случаев для оптимизации кода и
параметризации я использую TestNG Dataprovider.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте возьмем для примера простой тест - логин форма с тремя полями и валидацией.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test(dataProvider = &quot;Authentication&quot;)
public void errorMessageOnLoginWithBadCredentials(String email, String password, String errMsg) {
    User badUser = new User(email, password);

    at(LoginPage.class)
            .loginAs(badUser)
            .errorMessage
            .shouldHave(exactText(errMsg));
}

@DataProvider(name = &quot;Authentication&quot;)
public static Object[][] credentials() {
    return new Object[][]{
            {&quot; &quot;, &quot; &quot;, &quot;Username is required&quot;},
            {&quot;admin@gmail.com&quot;, &quot;UserTest@123&quot;, &quot;Login and / or password do not match&quot;},
            {&quot;admin@gmail.com&quot;, &quot; &quot;, &quot;Password is required&quot;},
            {&quot;ololo@ololo.com&quot;, &quot;admin&quot;, &quot;Login and / or password do not match&quot;}
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Очень простой сценарий: в разных случаях пользователю будут показываться разные сообщения об ошибке.
Здесь я применил Dataprovider, так как для каждой итерации у нас меняются лишь входные данные для теста.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вроде как все отлично и даже работает.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Есть ли что-то, что можно улучшить? (люблю этот вопрос на собеседовании =))&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Конечно, стоит посмотреть на уродливый дата провайдер. Вот этот &lt;strong&gt;Object[][]&lt;/strong&gt; - то прям боль.
Учитывая то, что мы живем в 2018 году, пишем на Java 8, которая поддерживает Stream API и имеет хороший Collection API.
Двухмерный массив объектов - это несерьезно!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И даже с помощью няшного Котлина нельзя особо улучшить ситуацию.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@DataProvider
fun data(): Array&amp;lt;Array&amp;lt;String&amp;gt;&amp;gt; {
   return arrayOf(
              arrayOf(&quot; &quot;, &quot; &quot;, &quot;Username is required&quot;),
              arrayOf(&quot;admin@gmail.com&quot;, &quot;UserTest@123&quot;, &quot;Login and / or password do not match&quot;),
              arrayOf(&quot;admin@gmail.com&quot;, &quot; &quot;, &quot;Password is required&quot;)
   )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Остается смириться и писать такой вот говнокод. Но на самом деле ситуацию можно поправить с помощью библиотеки
&lt;a href=&quot;https://github.com/sskorol/test-data-supplier&quot;&gt;Test Data Supplier&lt;/a&gt;. Ее автором является один мой друг - Сергей Король.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я о ней знал давно, но как-то попробовав ее еще на начальных этапах, не особо проникся идеей. Пока на днях не
решил внедрить ее в один из новых проектов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Подключение выполняется достаточно &lt;a href=&quot;https://github.com/sskorol/test-data-supplier#usage&quot;&gt;просто&lt;/a&gt;. Однако там есть один нюанс:
для корректной работы требуется подключение DataProviderTransformer лисенер. Так вот подключать
этот лисенер стоит либо через Gradle, либо через TestNG xml. Подключение через аннотацию &lt;strong&gt;@Listeners&lt;/strong&gt;
не даст желаемого результата. Учтите этот момент, я уже этот путь прострадал за вас=)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После подлючения вам станут доступны все плюшки этой библиотеки.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Можно легко переписать ваши унылые дейтапровайдеры на новый лад:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@DataSupplier
fun data(): Array&amp;lt;Array&amp;lt;String&amp;gt;&amp;gt; {
   return mapOf(
              User(&quot; &quot;, &quot; &quot;) to &quot;Username is required&quot;),
              User(&quot;admin@gmail.com&quot;, &quot;UserTest@123&quot;) to &quot;Login and / or password do not match&quot;),
              User(&quot;admin@gmail.com&quot;, &quot; &quot;) to &quot;Password is required&quot;
   )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Тест в таком случае трансформируется в такую штуку:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test(dataProvider = &quot;data&quot;)
fun errorMessageOnLoginWithBadCredentials(User user, String errMsg) {
    at(::LoginPage)
            .loginAs(user)
            .errorMessage
            .shouldHave(exactText(errMsg));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все становится прям огненно круто. Есть, правда, один досадный момент: для полной поддержки нужно
установить Idea плагин - &lt;strong&gt;test-data-supplier-plugin&lt;/strong&gt;. Сама библиотека поддерживает разные навороты, о которых можно почитать в документации.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В общем всем рекомендую как минимум посмотреть на эту библиотеку, как максимум - прикрутить ее к себе в проект и пробовать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Спасибо, что читали. Надеюсь, многим эта заметка поможет вывести тесты на новый уровень.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Видео с XPDays 2017
          </title>
          <link>http://automation-remarks.com/2018/xpdays-2017/index.html</link>
          <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/xpdays-2017/index.html</guid>
          <description>
                        Видео моего выступления с XPDays 2017
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Новый год еще только начался и сразу хорошая новость - стали доступны записи всех
докладов XPDays 2017.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я уже &lt;a href=&quot;http://automation-remarks.com/2017/xpdays-2017/index.html&quot;&gt;писал о своих впечатлениях&lt;/a&gt; от посещения этой конференции.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Запись моего доклада:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/8hFq1UErNJA&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QA Guild Podcast EP-2: Автоматизация мобильных приложений
          </title>
          <link>http://automation-remarks.com/2018/qa-guild-ep2/index.html</link>
          <pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2018/qa-guild-ep2/index.html</guid>
          <description>
                        QA Guild Podcast
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Доступен второй выпуск подкаста от свободной QA гильдии.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом выпуске говорили о подходах и инструментах, которые применяются
для тестирования мобильных приложений.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/a9U4yzs26HU&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://t.me/automation_remarks&quot;&gt;Telegram&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/automationremarks/&quot;&gt;Facebook&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.patreon.com/automation_remarks&quot;&gt;Поддержите подкаст&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Гости&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Сергей Пирогов&lt;/strong&gt; - 0 без палочки в автоматизации мобильников&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ярослав Пернеровский&lt;/strong&gt; - получил детскую травму после работы с Appium&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Артем Никитин&lt;/strong&gt; - обмазывался Robotium и Espresso и настраивает CI для Android/IOS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Алексей Панащенко&lt;/strong&gt; - работает с Appium IOS/Android,  делал CI и пытается бороться со скоростью IOS тестов&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Евгения Гнатюк&lt;/strong&gt; - работала с Appium Android/IOS +/- Cucumber.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Денис Яременко&lt;/strong&gt; - работает с мобильниками почти с пеленок&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Дмитрий Лемешко&lt;/strong&gt; - знает, как писать нормальные тесты под Appium&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Андрей Яременко&lt;/strong&gt; - Appium+Cucumber Android/IOS, тот еще краб и нуб.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Полезные ссылки&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://appium.io/docs/en/about-appium/intro/&quot;&gt;Cамая основная дока по Appium&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://appiumconf.com/speakers&quot;&gt;Конференция про Appium&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://mobiletestingblog.com/2018/01/07/continuous-testing-principals-for-cross-browser-testing-and-mobile-apps&quot;&gt;
DevOps для мобильников&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?time_continue=5&amp;amp;v=MS7GN2Lgdas&quot;&gt;Познавательная лекция от Яндекс&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Предыдущий выпуск можно послушать &lt;a href=&quot;http://automation-remarks.com/2017/qa-guild-ep1/index.html&quot;&gt;здесь&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вступайте в свободную &lt;a href=&quot;https://qaguild-slack.herokuapp.com/&quot;&gt;QA гильдию в Slack&lt;/a&gt; и следите за новостями.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              DelEx - первая конференция про DevOps в Минске
          </title>
          <link>http://automation-remarks.com/2017/delex-conferece/index.html</link>
          <pubDate>Sun, 7 Jan 2018 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/delex-conferece/index.html</guid>
          <description>
                        Анонс конференции DelEx
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DelEx Conference 2018 - самая ожидаемая конференция этой зимы по DevOps и Test Automation, которая пройдет в Минске
17 февраля.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/delex.png&quot; alt=&quot;delex&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DevOps и автоматизация тестирования, на первый взгляд, покрывают вопросы разных областей.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Культура DevOps позволяет сокращать время поставки билдов, однако не следует забывать и о качестве.
Чем быстрее мы хотим деливерить продукт, тем больший уровень автоматизации нам требуется внедрять. В таком случае
возрастает ценность автоматизированного тестирования.
Эти практики неотъемлемо связаны в ближайшем будущем.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Основной целью конференции DelEx  является развитие площадки для обмена опытом в DevOps и автоматизации тестирования с привлечением практики зарубежных коллег.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Это конференция advanced уровня, собирающая лучших экспертов из разных стран мира.
Наполняющуюся программу можно найти на официальном сайте мероприятия &lt;a href=&quot;http://delex-conf.com/&quot; class=&quot;bare&quot;&gt;http://delex-conf.com/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что ждет участников помимо полезного контента?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Зона &quot;Спроси эксперта&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Это уголок, где спикеры будут отвечать на вопросы слушателей, которые не обязательно должны касаться доклада. Программа этой зоны скоро появится на сайте мероприятия.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Стенды партнеров&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Представители партнеров конференции будут работать на своих стендах, где вы сможете принять участие в различных играх, а также задать интересующие вас вопросы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Активности&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Во время конференции оргтим DelEx Confrence и партнеры будут разыгрывать различные призы - не пропустите!
Весь день будет работать фото-зона и зона отдыха.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Питание&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В течение всего дня будут организованы кофе-паузы и полноценный обед. А по завершении конференции все участники и спикеры приглашены на afterparty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я буду выступать с докладом. Приглашаю всех на DelEx Conference 2018, уверен - будет круто.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хорошая новость для читателей блога - у вас есть возможность купить билет со скидкой 15% используя промокод &lt;strong&gt;automation-remarks-rulez&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QA Guild Podcast EP-1: Тестирование микросервисов
          </title>
          <link>http://automation-remarks.com/2017/qa-guild-ep1/index.html</link>
          <pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/qa-guild-ep1/index.html</guid>
          <description>
                        QA Guild Podcast
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Доступен первый выпуск подкаста о тестировании микросервисов&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fyrg7QlNR9Y&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Подписывайтесь на каналы:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://t.me/automation_remarks&quot;&gt;#telegram&lt;/a&gt; &lt;a href=&quot;https://www.facebook.com/automationremarks/&quot;&gt;#facebook&lt;/a&gt; &lt;a href=&quot;https://www.patreon.com/automation_remarks&quot;&gt;#стать патроном&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом выпуске обсуждались подходы и инструменты которые применяются
для тестирования приложений на основе микросервисной архитектуры.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Гости:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Дмитрий Гуменюк&lt;/strong&gt; - владыка репорт портала&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Николай Алименков&lt;/strong&gt; - знает все о микросервисах&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Ярослав Пернеровский&lt;/strong&gt; - обладает диванной экпертизой в области тестирования
микросервисов&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Александр Романов&lt;/strong&gt; - об микросервисах знает не понаслышке&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Сергей Пирогов&lt;/strong&gt; - видел микросервисы еще до того как это стало мейнстримом&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Полезные ссылки:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://martinfowler.com/articles/microservice-testing/&quot;&gt;Статья Мартина Фаулера&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://swagger.io/&quot;&gt;Swagger&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gaia-adm/pumba&quot;&gt;Pumba&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/SimianArmy/wiki/Chaos-Monkey&quot;&gt;Chaos-Monkey&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.pact.io/&quot;&gt;PACT&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-contract/&quot;&gt;Spring cloud contract&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/swagger-api/swagger-codegen&quot;&gt;Swagger codegen&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мы получили достаточно много положительных отзывов, поэтому первым выпуском все не ограничится.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вступайте в свободную &lt;a href=&quot;https://qaguild-slack.herokuapp.com/&quot;&gt;QA гильдию в Slack&lt;/a&gt; и следите за новостями.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Allure2: убираем аннотации @Step и интеграция с Selenide
          </title>
          <link>http://automation-remarks.com/2017/selenide-allure-2/index.html</link>
          <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/selenide-allure-2/index.html</guid>
          <description>
                        Просто крутой лайфхак
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет, друзья! В преддверии Нового года решил поделиться еще одним замечательным советом,
который поможет вам в повседневной работе. В этот раз речь пойдет об интеграции &lt;strong&gt;Allure2&lt;/strong&gt; и &lt;strong&gt;Selenide&lt;/strong&gt;,
а также я покажу, как можно отказаться от аннотаций &lt;strong&gt;@Step&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В августе я уже писал статью о том, как можно убрать аннотации &lt;strong&gt;@Step&lt;/strong&gt; для &lt;strong&gt;Allure1&lt;/strong&gt;.
О мотивации и подходе можете почитать в &lt;a href=&quot;http://automation-remarks.com/2017/allure-without-annotations/index.html&quot;&gt;архивной заметке&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После той статьи многие просили показать пример для Allure2. На своих проектах я давно им пользуюсь,
но количество наших тестов было настолько мало (до 100), что кастомизации нам были просто не нужны.
Теперь наш тест-сьют вырос до больших размеров и без информативного отчета жизнь стала грустной.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пришло время разбираться, как же там это все сделать для второй версии отчета. Ниже вы можете наблюдать работающий код примеров.
Как и для первой версии пишем кастомный AspectJ класс:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import io.qameta.allure.Allure;
import io.qameta.allure.AllureLifecycle;
import io.qameta.allure.model.Status;
import io.qameta.allure.model.StepResult;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;

import java.util.Objects;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static io.qameta.allure.Allure.getLifecycle;
import static io.qameta.allure.util.ResultsUtils.getStatus;
import static io.qameta.allure.util.ResultsUtils.getStatusDetails;

@SuppressWarnings(&quot;unused&quot;)
@Aspect
public class CustomAspect {

    private static AllureLifecycle lifecycle;

    @Pointcut(&quot;execution(* com.pages.*.*(..))&quot;)  // -&amp;gt; &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
    public void anyMethod() {
        //pointcut body, should be empty
    }

    @Around(&quot;anyMethod()&quot;)
    public Object step(ProceedingJoinPoint joinPoint) throws Throwable {
        final MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();
        final String name = joinPoint.getArgs().length &amp;gt; 0
                ? String.format(&quot;%s (%s)&quot;, methodSignature.getName(), arrayToString(joinPoint.getArgs())) // -&amp;gt; &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
                : methodSignature.getName();
        final String uuid = UUID.randomUUID().toString();
        final StepResult result = new StepResult()
                .withName(name);
        getLifecycle().startStep(uuid, result);
        try {
            final Object proceed = joinPoint.proceed();
            getLifecycle().updateStep(uuid, s -&amp;gt; s.withStatus(Status.PASSED));
            return proceed;
        } catch (Throwable e) {
            getLifecycle().updateStep(uuid, s -&amp;gt; s
                    .withStatus(getStatus(e).orElse(Status.BROKEN))
                    .withStatusDetails(getStatusDetails(e).orElse(null)));
            throw e;
        } finally {
            getLifecycle().stopStep(uuid);
        }

    }

    public static AllureLifecycle getLifecycle() {
        if (Objects.isNull(lifecycle)) {
            lifecycle = Allure.getLifecycle();
        }
        return lifecycle;
    }

    private static String arrayToString(final Object... array) {
        return Stream.of(array)
                .map(object -&amp;gt; {
                    if (object.getClass().isArray()) {
                        return arrayToString((Object[]) object);
                    }
                    return Objects.toString(object);
                })
                .collect(Collectors.joining(&quot;, &quot;));
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Строчка, в которой происходит форматирование имени метода и параметров&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Место, в котором нужно указать имя пакета с классами PageObject&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее, как и в первой версии отчета, в папке &lt;strong&gt;src/main/resources/META-INF&lt;/strong&gt; создаем файл &lt;strong&gt;aop-ajc.xml&lt;/strong&gt; c содержанием:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&amp;lt;aspectj&amp;gt;
    &amp;lt;aspects&amp;gt;
        &amp;lt;aspect name=&quot;com.aspect.CustomAspect&quot;/&amp;gt;
    &amp;lt;/aspects&amp;gt;
&amp;lt;/aspectj&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все, теперь можно запускать тесты и наслаждаться отчетом. Достаточно просто, нужно еще что-то подкрутить! Крутые пацаны не останавливаются на
достигнутом. Хотим, чтобы методы Selenide логировались в Allure отчет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Благо, что такую фичу тоже достаточно легко сделать. В репозитории &lt;a href=&quot;https://github.com/allure-framework/allure-java/blob/master/allure-selenide/src/main/java/io/qameta/allure/selenide/AllureSelenide.java&quot;&gt;allure-java&lt;/a&gt; уже есть
пример. Все, что вам нужно, - это в своем проекте создать такой класс:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.codeborne.selenide.WebDriverRunner;
import com.codeborne.selenide.logevents.LogEvent;
import com.codeborne.selenide.logevents.LogEventListener;
import io.qameta.allure.Allure;
import io.qameta.allure.AllureLifecycle;
import io.qameta.allure.model.Status;
import io.qameta.allure.model.StatusDetails;
import io.qameta.allure.model.StepResult;
import io.qameta.allure.util.ResultsUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;

import java.nio.charset.StandardCharsets;
import java.util.UUID;

public class AllureSelenide implements LogEventListener {

    private final AllureLifecycle lifecycle;

    public AllureSelenide() {
        this(Allure.getLifecycle());
    }

    public AllureSelenide(final AllureLifecycle lifecycle) {
        this.lifecycle = lifecycle;
    }

    @Override
    public void onEvent(final LogEvent event) {
        lifecycle.getCurrentTestCase().ifPresent(uuid -&amp;gt; {
            final String stepUUID = UUID.randomUUID().toString();
            lifecycle.startStep(stepUUID, new StepResult()
                    .withName(event.toString())
                    .withStatus(Status.PASSED));

            lifecycle.updateStep(stepResult -&amp;gt; stepResult.setStart(stepResult.getStart() - event.getDuration()));

            if (LogEvent.EventStatus.FAIL.equals(event.getStatus())) {
                lifecycle.addAttachment(&quot;Screenshot&quot;, &quot;image/png&quot;, &quot;png&quot;, getScreenshotBytes());
                lifecycle.addAttachment(&quot;Page source&quot;, &quot;text/html&quot;, &quot;html&quot;, getPageSourceBytes());
                lifecycle.updateStep(stepResult -&amp;gt; {
                    final StatusDetails details = ResultsUtils.getStatusDetails(event.getError())
                            .orElse(new StatusDetails());
                    stepResult.setStatus(Status.FAILED);
                    stepResult.setStatusDetails(details);
                });
            }
            lifecycle.stopStep(stepUUID);
        });
    }


    private static byte[] getScreenshotBytes() {
        return ((TakesScreenshot) WebDriverRunner.getWebDriver()).getScreenshotAs(OutputType.BYTES);
    }

    private static byte[] getPageSourceBytes() {
        return WebDriverRunner.getWebDriver().getPageSource().getBytes(StandardCharsets.UTF_8);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем этот класс нужно зарегистрировать в Selenide:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@BeforeClass
public void setUp() throws Exception {
   SelenideLogger.addListener(&quot;allure&quot;, new AllureSelenide());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь смотрим на все в куче. Пишем класс страницы:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Calculator&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Calulator {

    public Calulator open() {
        Selenide.open(&quot;http://juliemr.github.io/protractor-demo/&quot;);
        return this;
    }

    public void add(String one, String two) {
        $(&quot;input[ng-model=&apos;first&apos;]&quot;).setValue(one);
        $(&quot;input[ng-model=&apos;second&apos;]&quot;).setValue(two);
        $(&quot;#gobutton&quot;).click();
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пишем тест:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TestCalculator&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class TestCalculator extends BaseTest {

    @org.testng.annotations.Test
    public void testName() throws Exception {
        new Calulator()
                .open()
                .add(&quot;1&quot;, &quot;2&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Запускаем тест и тешимся результатами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом на сегодня все. Оставайтесь на связи, подписывайтесь на группу &lt;a href=&quot;https://www.facebook.com/automationremarks/&quot;&gt;в фейсбуке&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Kotlin без маркетинга
          </title>
          <link>http://automation-remarks.com/2017/kotlin-without-marketing/index.html</link>
          <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/kotlin-without-marketing/index.html</guid>
          <description>
                        Видео моего выступления с QAFest 2017
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Запись моего доклада:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/2For6QVZqsg&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;P/S&lt;/em&gt; Если видео не отображается просто перезагрузите страницу&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              JSON рандомизатор
          </title>
          <link>http://automation-remarks.com/2017/json-randomizator/index.html</link>
          <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/json-randomizator/index.html</guid>
          <description>
                        История о рандомизации JSON
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Подоспела очередная порция годноты. В этот раз
расскажу о проблеме рандомизации JSON и способе ее решения.
Сразу спойлер: описанный способ подходит не только для JSON, поэтому можно дочитывать заметку до конца.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9yXDTICCdyVcv--Xdule6W_utrnacgseImIMaasrXqo4sqKfD&quot; alt=&quot;images?q=tbn:ANd9GcR9yXDTICCdyVcv  Xdule6W utrnacgseImIMaasrXqo4sqKfD&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте для начала определимся с проблемой, которую я буду решать. Представим проект, у которого есть
фронтенд, который общается с бекендом посредством REST API. На таком проекте REST API мы используем для прекондишинов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
public void testCanEditUser(){
    String userEmail = UserApi.createUserForTest()

    User newUserData = User()
        .withName(&quot;Ivan&quot;)
        .withEmail(&quot;test@gmail.com&quot;)
        .withPhone(&quot;+456789453&quot;)

    open(EditUserPage.class)
        .findUser(userEmail)
        .toEditMode()
        .setData(newUserData)
        .save()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На первый взгляд, все достаточно удобно и просто. Суть проблемы кроется именно в прекондишине &lt;code&gt;UserApi.createUserForTest()&lt;/code&gt;.
В моем случае для создания юзера на эндпоинт нужен запрос с таким  &lt;strong&gt;body&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;emails&quot;: [
    {
      &quot;emailTypeId&quot;: 82,
      &quot;email&quot;: &quot;test_person@email.com&quot;,
      &quot;comment&quot;: &quot;&quot;,
      &quot;isDefault&quot;: true
    }
  ],
  &quot;addresses&quot;: [
    {
      &quot;isShippingDefault&quot;: true,
      &quot;isBillingDefault&quot;: true,
      &quot;addressTypeId&quot;: 80,
      &quot;countryId&quot;: 3,
      &quot;cityId&quot;: 2,
      &quot;isGeneralInfo&quot;: true
    }
  ],
  &quot;confidenceId&quot;: 120,
  &quot;income&quot;: 0,
  &quot;languageCode&quot;: &quot;en&quot;,
  &quot;lastName&quot;: &quot;Ivanov&quot;,
  &quot;name&quot;: &quot;Test&quot;,
  &quot;netWorth&quot;: 0,
  &quot;nickName&quot;: &quot;Ivan&quot;,
  &quot;sexId&quot;: 130,
  &quot;liquidAssets&quot;: 0,
  &quot;employeeId&quot;: 1
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Достаточно сложная структура с кучей полей. Наверное, на многих проектах можно встретить такую ситуацию.
Для того, чтобы сделать тест, описанный выше, перезапускаемым, нам нужно некоторые значения полей, например, email, делать
уникальными, иначе мы получим ошибку валидации.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Можно рандомизировать поле имейл:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;UserDto userDto = JsonUtils.getUser(&quot;user.json&quot;,UserDto.class);
userDto.setEmails(Arrays.asList(EmailDto().withEmail(RandomUtils.nextEmail())));

UserApi.addNewUser(userDto);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Такой подход работает, если нам нужно рандомизировать одно поле. Если мы хотим делать все рандомно, то тут - дрова.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Упершись в эту проблему, я начал искать решение. Мне хотелось сделать так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;emails&quot;: [
    {
      &quot;emailTypeId&quot;: 82,
      &quot;email&quot;: &quot;{{ email }}&quot;,
      &quot;comment&quot;: &quot;&quot;,
      &quot;isDefault&quot;: true
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Просто ставить плейсхолдер, а при диссериализции получать JAVA-объект с уже рандомизованным email.
Конечно, можно было это легко сделать: &lt;strong&gt;.replaceAll(&quot;{{ email }}&quot;,RandomUtils.nextEmail())&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Приколько, но недостаточно гибко. А если я захочу рандомизиовать поле phone? Мне что теперь идти и дописывать код?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Гуглеж натолкнул меня на один интересный сайт &lt;a href=&quot;https://www.json-generator.com/&quot;&gt;https://www.json-generator.com/&lt;/a&gt;.
Отличная идея и реализация, но у него нету API, а подобное я нашел только для NodeJS. Мне же нужно для Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Присмотревшись к своей хотелке, я подумал: блин, так можно же взять template engine и дело в шляпе.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Покумекав еще пару дней, я нашел отличный инструмент &lt;a href=&quot;http://jtwig.org/&quot;&gt;jTwig&lt;/a&gt;. Очень простой и легковесный
template engine для Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пример работы с ним выглядит так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;JtwigTemplate template = JtwigTemplate.classpathTemplate(&quot;templates/user.json&quot;);
JtwigModel model = JtwigModel.newModel()
            .with(&quot;faker&quot;, new Faker());

String json = template.render(model);

UserDto userdto = getEntity(json, User.class);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Во второй строке я применил библиотеку &lt;a href=&quot;https://github.com/DiUS/java-faker&quot;&gt;java-faker&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Темплейты теперь можно писать так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;name&quot;: &quot;{{ faker.name().firstName() }}&quot;,
  &quot;lastName&quot;: &quot;{{ faker.name().lastName() }}&quot;,
  &quot;addresses&quot;: [
    &quot;{{ faker.address().streetAddress() }}&quot;,
    &quot;{{ faker.address().streetAddress() }}&quot;
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Да-да, jTwig умеет вызывать Java методы - мегафича.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь, имея такую функциональность, те поля, которые нужно, мы параметризуем и после диссериализации
получаем готовые Java-объекты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P/S&lt;/strong&gt; Описанный способ отлично работает на моем проекте. К сожалению, jTwig не умеет вызывать java-методы с параметрами:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;id&quot;: &quot;{{ randomIntBetween(7, 10) }}&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В таких случаях мы велосипедируем, но я знаю, что эту проблему можно решить, используя вместо jTwig
какой-то другой template engine. К примеру, &lt;strong&gt;Freemarker&lt;/strong&gt;, &lt;strong&gt;Thymeleaf&lt;/strong&gt; или &lt;strong&gt;Pebble&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом у меня все. Оставайтесь на связи, подписывайтесь на мою группу в &lt;a href=&quot;https://www.facebook.com/automationremarks/&quot;&gt;Facebook&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Заметки автоматизатора: три года спустя
          </title>
          <link>http://automation-remarks.com/2017/automation-remarks-universary/index.html</link>
          <pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/automation-remarks-universary/index.html</guid>
          <description>
                        История создания блога
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;16 ноября 2014 года я написал этот &lt;a href=&quot;http://automation-remarks.com/first-post/index.html&quot;&gt;пост&lt;/a&gt;.
Да-да, три года назад, сидя в своей квартире в Харькове, я задумался над созданием личного блога. Зачем?
В тот момент я не мог дать четкий ответ. Мне было интересно, как это все работает. А сегодня
 я готов поделиться со своими читателями историей создания Automation Remarks и дальнейшими планами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/old-logo.jpg&quot; alt=&quot;old logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В далеком 2014-ом, когда я уже работал джуниором в ЕПАМе, мне стало любопытно, как работает мир IT-блогерства:
как люди покупают доменное имя, как развернуть сайт, где, на чем и как его создать и т.д. Большое желание
и время - все, что у меня было на тот момент.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Однажды, листая ленту в Твиттер, я наткнулся на статью о движке &lt;a href=&quot;https://ghost.org/ru/&quot;&gt;Ghost&lt;/a&gt;.
 Собственно, на нем и была создана первая версия блога,
 которая до сих пор еще &lt;a href=&quot;http://spirogov.github.io/&quot;&gt;жива&lt;/a&gt;. В самом начале там был ужасный самописный темплейт,
который я писал долгими ночами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Купив доменное имя &lt;strong&gt;&lt;a href=&quot;http://automation-remarks.com&quot; class=&quot;bare&quot;&gt;http://automation-remarks.com&lt;/a&gt;&lt;/strong&gt;, я вывел блог в лайв и был бесконечно рад тому, что теперь
в интернете есть что-то лично мое. Толку от него было мало, но все же. В течение недели после запуска я опубликовал еще парочку
заметок.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Откуда я знал, что писать и как?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Естественно, я не знал и не умел этого делать. Я просто описывал свои мысли и наработки, которые использовал на тот
момент на проекте. По факту и название &quot;Заметки автоматизатора&quot; пошло от того, что я делился какими-то мелкими
идеями и полезностями.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Так я и жил до момента, пока мне в руки не попалась книга &lt;a href=&quot;https://pragprog.com/cart/add/skus?sku_id=460_461&quot;&gt;Technical bloging&lt;/a&gt;,
в которой рассказывалось, как создать блог и заработать на нем денег. Тогда мной двигала идея монетизации, но
сейчас я понимаю - это была худшая стратегия. В принципе, она очень быстро провалилась после того, как
я повесил баннер от Google ads и спустя пару месяцев понял, что там не накопилось и &lt;strong&gt;10$&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После этого я пересмотрел свою позицию, убрал всю рекламу и сфокусировался на читателях. Я решил, что блог будет
местом, куда я могу без цензуры и модерации писать то, что я хочу и считаю нужным. Кто хочет - читает, кто не хочет или не
согласен - проходит мимо.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;С таким настроением я продолжал писать новые статьи. Реальную пользу я почувствовал, когда вместо объяснений чего-то
своим знакомым скидывал ссылку на статью, в которой уже все было расписано. Они и были моими первыми читателями.
 В цифрах это примерно 10 хостов в неделю.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Первый реальный наплыв читателей был вызван тем, что одну из моих заметок разместили в &lt;a href=&quot;https://dou.ua/lenta/digests/qa-digest-5/&quot;&gt;QA дайджесте на dou.ua&lt;/a&gt;.
У меня был шок. Как так? Моя статья на DOU? Не может быть! Это меня мотивировало продолжать писать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;С того момента прошло 2 года&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сейчас блог читает &lt;strong&gt;6000 человек&lt;/strong&gt; в месяц.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Опубликовано &lt;strong&gt;105 заметок&lt;/strong&gt;, включая эту =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ссылки на заметки были включены в &lt;strong&gt;19 из 31&lt;/strong&gt; qa дайджестов на DOU.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самая читаемая заметка - &lt;a href=&quot;http://automation-remarks.com/nastraivaiem-selenium-grid-za-5-minut/index.html&quot;&gt;о настройке Selenium Grid&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На написание одной заметки трачу в среднем 1-2 часа.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;У меня есть замечательный редактор (боец невидимого фронта), который делает тексты сносными для чтения.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На официальной странице блога в &lt;a href=&quot;https://www.facebook.com/automationremarks/&quot;&gt;facebook&lt;/a&gt; - &lt;strong&gt;637 подписчиков&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Блог является инфопартнером конференций  &lt;strong&gt;QAFest&lt;/strong&gt;, &lt;strong&gt;SQA days&lt;/strong&gt;, &lt;strong&gt;SeleniumCamp&lt;/strong&gt;, &lt;strong&gt;Гейзенбаг&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В завершение.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На страницах блога и в заметках никогда не было и не будет рекламных или проплаченных статей. В этом году я начал
заниматься &lt;a href=&quot;http://automation-remarks.com/course/&quot;&gt;индивидуальными консультациями&lt;/a&gt; и планирую развивать это дело. Знаю, что у многих ребят,
которые хотят заниматься автоматизацией, нету менторов и они не знают, у кого просить о помощи.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Надеюсь, что у меня по-прежнему будет достаточно времени, чтобы продолжать писать заметки и приносить пользу
всему комьюнити тестировщиков. Спасибо всем, что читаете! До новых встреч на страницах блога и конференциях =)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Мастер-класс: Automation in Action. Kharkov
          </title>
          <link>http://automation-remarks.com/2017/master-class/index.html</link>
          <pubDate>Wed, 15 Nov 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/master-class/index.html</guid>
          <description>
                        Анонс мастер-класса
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;3 декабря&lt;/strong&gt; 2017 года в 12.00 буду проводить мастер-класс в Харькове - Automation in Action.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://scontent-waw1-1.xx.fbcdn.net/v/t1.0-9/22090090_1587838701266856_1363163954399701490_n.jpg?oh=473223b1cac17f8f6a2bd6ec436366e5&amp;oe=5A9148DA&quot; alt=&quot;22090090 1587838701266856 1363163954399701490 n&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Последний в 2017 году мастер-класс из серии Automation in Action.
В этот раз мы посмотрим на автоматизацию тестирования в разрезе DevOps и разберемся, когда же начать автоматизировать,
с помощью каких инструментов это делать и как же все-таки встроить автоматизацию в Delivery pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Тренyинг будет полезен всем, кто работает на текущих проектах, но не имеет опыта
старта проекта с нуля.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Из технических аспектов мы рассмотрим настройку CI, попрактикуемся автоматизировать
разворачивание инфраструктуры для автоматизации. Уделим время теме автоматического
тестирования инфрастуктуры, посмотрим на современные инструменты: Selenoid, Selenide и Report Portal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я всегда открыт к общению, поэтому помимо основной программы, вы сможете задать
интересующие вас вопросы и получить на них ответы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Длительность &lt;strong&gt;4 часа&lt;/strong&gt;.
Стоимость посещения - &lt;strong&gt;80$&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для регистрации заполните форму ниже:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe src=&quot;https://docs.google.com/forms/d/e/1FAIpQLSekGtRxvAQvfvI3kXeZbJeBpjnBfp_Fv8tnaIPvxKEGB8JMpw/viewform?embedded=true&quot; width=&quot;760&quot; height=&quot;1000&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;Загрузка...&lt;/iframe&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              XP Days 2017: впечатления
          </title>
          <link>http://automation-remarks.com/2017/xpdays-2017/index.html</link>
          <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/xpdays-2017/index.html</guid>
          <description>
                        Отзыв о конференции XP Days 2017
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Сегодня делюсь своими впечатлениями от посещения конференции &lt;a href=&quot;http://xpdays.com.ua&quot;&gt;XP Days 2017&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://pbs.twimg.com/profile_images/636481850190467072/b_qnPt2X.png&quot; alt=&quot;b qnPt2X&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Конференция проводится уже не первый год, я постоянно смотрел записи выступлений, но ни разу не присутствовал
лично. В этот же раз решил исправить эту ошибку и сходил. Хочу отметить, что эта конференция отличается
от типичных QA конференций типа &lt;a href=&quot;http://automation-remarks.com/seleniumcamp-2016-rietrospiektiva/index.html&quot;&gt;SeleniumCamp&lt;/a&gt;,
либо &lt;a href=&quot;http://automation-remarks.com/2017/qafest2017/index.html&quot;&gt;QAFest&lt;/a&gt;. Здесь в основном говорят о процессной
стороне разработки ПО и о каких-то инфраструктурных вещах. В этом году было очень много докладов про хайповый
DevOps и облака.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По организации никаких вопросо не возникло. Еды хватало всем, атмосферка способствовала общению и нетворкингу.
Три потока с кучей полезных докладов, часть из которых я прокомментирую ниже.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я ходил на конференцию не просто послушать и повтыкать, а выступить с докладом, основанным на реальном опыте построения и тестирования
инфраструктуры. Достаточно полезный опыт и интересные подходы, основанные на Ansible, Docker и Testinfra.
Все, кому эта тема интересна, смогут узнать более подробную информацию на предстоящем &lt;a href=&quot;https://www.facebook.com/events/309093552900074/&quot;&gt;мастер-классе в Харькове&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если говорить о самых интересных докладах, которые я посетил, то рейтинг будет таким:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;1) Transformation practices&lt;/strong&gt; (Dmitriy Yefimenko)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сложно было выделить самый классный доклад, но именно этот мне понравился больше всего. Дима рассказал о том, каким должен
быть человек-трансформатор. Очень живо. Когда выйдет видео, обязательно посмотрите.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2) Bots on guard of SDLC&lt;/strong&gt; (Alexey Tokar)
В этом докладе Алексей рассказал о чат-боте, который они написали в своей компании с целью автоматизации некоторых бизнесс
процессов в компании. Очень познавательно и наталкивает на интересные мысли и идеи.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;3) Teaching Elephants to Dance&lt;/strong&gt; (Burr Sutter)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вдохновляющий кейноут на тему DevOps, процессов и трансформаций. Очень крутая форма подачи и оформления слайдов. Для
меня это яркий пример того, как нужно выступать на публике.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;4) Funny stories and anti-patterns from DevOps landscape&lt;/strong&gt; (Mikalai Alimenkou)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Коля в свойственной ему манере рассказал о DevOps и проблемах, которые есть в головах людей и на рынке Украины. В докладе приведены
типичные ошибки из мира DevOps и возможные пути их решения. Легкий доклад для просмотра в один из зимних вечеров =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;5) A better approach for testing microservices: introducing test kits in practice &lt;/strong&gt; (Maxim Novak)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В докладе Максим показал интересный подход к тестированию микросервисной архитектуры на основе Test Kits. Для меня эта идея была
нова и очень познавательна. Не уверен, что мы ее сможем применить, но, как минимум, теперь есть идея и понимание, как это работает
в Wix. Дальше ее можно развивать и пробовать делать что-то у себя.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так выглядит мой топ-5. На самом деле интересных докладов было намного больше. Я уверен, что посетители не пожалели о
потраченном времени и деньгах, посетив это мероприятие. Конференция будет проходить и в следюущем году. Если у меня будет возможность,
я постараюсь обязательно ее посетить. Спасибо организаторам и коллегам-докладчикам. Увидимся ;)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Отзыв об Agile and Automation days
          </title>
          <link>http://automation-remarks.com/2017/aadays-feedback/index.html</link>
          <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/aadays-feedback/index.html</guid>
          <description>
                        О том, как я ездил в Польшу
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Хочу поделиться своими впечатлениями и мыслями после посещения первой для
меня европейской конференции &lt;a href=&quot;http://aadays.pl/&quot;&gt;Agile and Automation days&lt;/a&gt;, которая проходила 9-10 октября в Кракове.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://pbs.twimg.com/media/DHV55q9XcAAqRb-.png&quot; alt=&quot;DHV55q9XcAAqRb &quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Об этой конференции узнал случайно на просторах интернета. Я уже давно хотел поехать
в европейскую страну, чтобы посмотреть, как там делают конференции.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В один прекрасный день я подал заявку на участие в качестве спикера и был принят в число избранных. Это был
примерно июнь. Да-да, хорошие конференции ищут спикеров задолго до начала.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;8го октября я оказался в Кракове и после прогулки по городу и поселения в отель вечером отправился на ужин
со спикерами. Для тех, кто не часто бывает на таких тусовках, поясню: это вечер перед конференцией, когда всех спикеров
собирают вместе для знакомства в неформальной обстановке. У нас такие мероприятия тоже практикуются.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Первый день конференции. Открытие было стандартным: с благодарностями и речами
от организаторов. В первый день нас ждало два трека с докладами на английском и на польском языках. Перед началом
я делал &lt;a href=&quot;https://www.facebook.com/spirogov/videos/1643411595689719/&quot;&gt;стрим&lt;/a&gt; на своей странице facebook.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Открывал конференцию кейноут от &lt;a href=&quot;https://github.com/cheezy&quot;&gt;Jeff Morgan&lt;/a&gt;. В своем докладе он рассказал о тестировании и Continuous Delivery.
По сути, обычный кейноут без каких-либо новинок.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее следовали доклады от обычных пацанов. В первый день мне больше всего понравился доклад от &lt;strong&gt;David Piper&lt;/strong&gt;, в котором
он рассказал, как они в Atlasian тестируют UI без использования Selenium Webdriver. Достаточно интересный подход с использованием JS и Pact.
Об остальных докладах ничего впечатляющего сказать не могу.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом первый день прошел очень живо. Весь день я подытожил &lt;a href=&quot;https://www.facebook.com/spirogov/videos/1643720315658847/&quot;&gt;стримом&lt;/a&gt;.
Вечером все 300 участников отправились в паб на неформальную часть. Много об этом говорить не буду, но пьянка удалась на славу.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Второй день начался уже не так бодро, как первый (не удивительно, ведь большинство участников вернулось с пати в отель около 2 часов ночи).
Второй день отличался тем, что помимо докладов участники могли посетить ряд воркшопов. Я проводил воркшоп
по &lt;a href=&quot;http://automation-remarks.com/2017/python-training/index.html&quot;&gt;построению системы автоматизации на Python&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Своим выступлением я доволен. Понятно, что с первого раза в другой стране выдать 110% сложно, но я получил
хорошие отзывы и среднюю оценку 4.5. Кстати, относительно оценок. У конференции есть свое официальное приложение для
мобильных телефонов. Вы можете его скачать и посмотреть. Сделано прикольно и вполне удобно. На наших конференциях аналог я видел только на &lt;a href=&quot;http://automation-remarks.com/2017/testing-stage-retro/index.html&quot;&gt;Testing Stage&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По окончании спикерам подарили книги (на польском :)). Тут уж все стали прощаться с обещаниями вернуться в следующем году.
Напоследок я снял еще один &lt;a href=&quot;https://www.facebook.com/spirogov/videos/1644776268886585/&quot;&gt;видосик&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По итогу у меня остались очень хорошие впечатления. Если в следующем году будет возможность, я обязательно поеду снова. Теперь-то там у меня
есть связи :).&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Гейзенбаг Москва 2017. Что нас ждет?
          </title>
          <link>http://automation-remarks.com/2017/heisenbug-moscow-2017/index.html</link>
          <pubDate>Sat, 14 Oct 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/heisenbug-moscow-2017/index.html</guid>
          <description>
                        Анонс конференции &quot;Гейзенбаг Москва 2017&quot;
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет, друзья! Наконец-то я добрался до анонса конференции по тестированию
&quot;Гейзенбаг&quot;, которая состоится 8-9 декабря в Москве.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://pp.userapi.com/c841534/v841534593/5fe9/SNqQ08RnhUw.jpg&quot; alt=&quot;SNqQ08RnhUw&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Предыдущую конференцию в Питере я смотрел онлайн. &lt;a href=&quot;http://automation-remarks.com/2017/heisenbug-2017-piter-retro/index.html&quot;&gt;Отзыв можно почитать здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом году будет два полноценных дня, что подразумевает еще больше годноты, общения и
полезной информации.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В Москву приедут ведущие российские и мировые эксперты по тестированию и подходам к разработке:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Николай Алименков&lt;/strong&gt; - завсегдатай различных конференций, эксперт в подходах и паттернах;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simon Stewart&lt;/strong&gt;, который расскажет о масштабировании Selenium;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ilari Henrik Aegerter&lt;/strong&gt;, уже выступавший на двух Гейзенбагах. На этот раз Илари приготовит что-то новое;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Артем Ерошенко&lt;/strong&gt;, доклад которого стал первым в рейтинге среди докладов предыдущего Гейзенбага;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Владимир Ситников&lt;/strong&gt;, хардкорный перфоманс-инженер, коммитил в JMeter (Java-инструмент для нагрузки веб-серверов);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Алексей Лавренюк&lt;/strong&gt;, известный по Яндекс.Танку и нагрузочному тестированию;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Антон Архипов&lt;/strong&gt; выступит с докладом про TestContainers;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Программа уже опубликована на сайте &lt;a href=&quot;https://heisenbug-moscow.ru&quot; class=&quot;bare&quot;&gt;https://heisenbug-moscow.ru&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично я очень жду &lt;strong&gt;Selenide Puzzlers&lt;/strong&gt; и доклада о &lt;strong&gt;Flaky tests&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Чтобы узнать подробности и зарегистрироваться уже сейчас по низкой цене, переходите на сайт: &lt;a href=&quot;https://heisenbug-moscow.ru/tickets/#tickets&quot; class=&quot;bare&quot;&gt;https://heisenbug-moscow.ru/tickets/#tickets&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;P/S. Для всех читателей блога у меня есть приятная новость - скидочный купон на покупку билетов.
Чтобы применить скидку, просто используйте &lt;strong&gt;QARemarksPromo&lt;/strong&gt;. Рекомендую поспешить, так как билетов становится все меньше и меньше.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QA Fest 2017: ретроспектива
          </title>
          <link>http://automation-remarks.com/2017/qafest2017/index.html</link>
          <pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/qafest2017/index.html</guid>
          <description>
                        Отзыв о посещении конференции QAFest 2017
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В эти выходные посетил конференцию QAFest 2017. Пока свежи впечатления, решил
написать свой отзыв. Конференция проходит уже 4й год подряд в Киеве. В этом году QAFest посетило более 800
человек, что является абсолютным рекордом для конференций по тестированию в Украине.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/qafest2017_1.jpg&quot; alt=&quot;qafest2017 1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Об организации:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как и в прошлые годы, конференция проходила в БЦ &quot;Космополит&quot;. Нужно отметить, что, несмотря на масштаб, организация находится на достаточно высоком уровне. О том, что волнует всех:
еды хватало всем, чай, кофе и печеньки в неограниченном количестве =)) Конференция с самого начала задумывалась
как фестиваль тестирования, дабы атмосфера способствовала общению и новым знакомствам.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;О докладах:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как бы там ни было, но на конференцию люди приходят послушать интересные доклады и узнать что-то полезное для себя.
В этом году я лично приложил руку к формированию сетки докладов, так как был участником программного комитета.
Я отвечал за подбор докладов в поток автоматизации тестирования. Хочу заметить, что это достаточно интересный опыт, так
как есть возможность увидеть закулисье конференции.
Из докладов, которые мне понравились, отмечу следующие:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Алексей Буль&lt;/strong&gt;. Тестирование геолокационных систем
Достаточно интересный опыт с наводками на ресурсы и инструменты, которые помогают в тестировнии ГИС.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Николай Алименков&lt;/strong&gt;. Разработчик + тестировщик=качество
Очередной Колин доклад о пользе взаимодействия разных ролей в команде.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Дмитрий Гуменюк&lt;/strong&gt;. ReportPortal.io
Димин доклад в первую очередь запомнился фразами &quot;Сухие логи&quot; и &quot;Грязный зайчик&quot;. В целом - очередной доклад о
новых возможностях &lt;a href=&quot;http://automation-remarks.com/2017/report-portal/index.html&quot;&gt;RP&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Александр Неделяев&lt;/strong&gt;. Тестирование и мониторинг производительности фронтенда с помощью sitespeed.io
Самый интересный и полезный доклад лично для меня. Саша показал основные возможности инструмента, привел хорошие примеры.
Я с помощью этой штуки тестировал свой блог, но инструмент обрел дополнительные фичи.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;О себе:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как и в &lt;a href=&quot;http://automation-remarks.com/qafest-2016-rietrospiektiva/index.html&quot;&gt;прошлом году&lt;/a&gt;
я выступал дважды: с Test Automation Pazzlers и докладом, который я назвал `Kotlin без маркетинга&apos;. Судя по отзывам, пазлеры, которые мы сделали вместе с Ярославом Пернеровским, стали фишкой первого дня. Спасибо Ярику, что согласился и помог реализовать мою идею.
Идея воплотилась в полной мере. Когда появится видео, рекомендую посмотреть, хотя камера не передаст той атмосферы, которая царила в зале. Говорят, я там даже матерился =) really??
Доклад о Котлине был тоже хAрош, но я его заведомо сделал не таким задорным и драйвовым как обычно. После первого
дня не было сил. Но все же на парочку перлов меня хватило. Своими выступлениями я полностью доволен.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/qafest2017_2.jpg&quot; alt=&quot;qafest2017 2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;В целом:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично для меня конференция прошла очень круто: много живого общения и новые знакомства со старыми друзьями =)) Приятно было встретить старых знакомых, с которыми я работал и общался в Харькове.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;О будущем:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В процессе общения я постоянно интересовался мнением других участников. Говорят, что среди докладов, на которые я не ходил, было уныло, но
в целом всем все понравилось. На закрытии организаторы анонсировали QAFest 2018 следующей осенью. А
это значит, что мы снова соберемся вместе в 2018 году, чтобы обсудить новости мира тестирования.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом у меня все. Я пошел отдыхать и готовиться к еще двум очень значимым для меня конференциям, на которых буду выступать этой осенью. Подписывайтесь на мою &lt;a href=&quot;https://www.facebook.com/automationremarks/&quot;&gt;страницу в фейсбуке&lt;/a&gt;, чтобы быть
в курсе событий. Па-па&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Kotlin и базы данных
          </title>
          <link>http://automation-remarks.com/2017/kotlin-db/index.html</link>
          <pubDate>Tue, 5 Sep 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/kotlin-db/index.html</guid>
          <description>
                        Работаем с базами данных
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Продолжаем серфить на волнах хайпа вокруг Kotlin. В этот раз я покажу пример
работы с базами данных.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На одном из проектов мы пишем автотесты для ETL сервисов, которые перегоняют данные из
одной MSSQL базы в другую. Для работы с базой данных мы используем ванильную Java 8 и Apache DBUtils.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;С применением DBUtils все получается достаточно неплохо. Мы создаем доменные объекты
и потом с помощью &lt;strong&gt;BeanHandler&lt;/strong&gt; можем конвертировать ответы в JavaPojo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;@Data
class User{
    String firstName;
    String lastName;
    int age;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для более приятной работы мы написали парочку полезных методов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;private &amp;lt;T&amp;gt; T execute(String query, ResultSetHandler&amp;lt;T&amp;gt; handler, Object... params) {
   try {
     return queryRunner.query(query, handler, params);
   } catch (SQLException e) {
     throw new RuntimeException(e);
   }
}

private &amp;lt;T&amp;gt; T findOne(Class&amp;lt;T&amp;gt; tClass, String query, Object... params) {
   return execute(query, new BeanHandler&amp;lt;&amp;gt;(tClass), params);
}

private &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; findAll(Class&amp;lt;T&amp;gt; tClass, String query, Object... params) {
   return execute(query, new BeanListHandler&amp;lt;&amp;gt;(tClass), params);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В итоге код обращения к базе выходит таким:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;final String query = &quot;SELECT * &quot;+
                     &quot;FROM users &quot;+
                     &quot;WHERE userId = 1;&quot;

User user = database.findOne(User.class,query)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вроде бы, достаточно неплохо и лаконично, если это все завернуть еще в какой-то UserService,
то будет прям:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;User user = userService.findById(1);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все в этом коде хорошо, но мне лично не нравится, как выглядит SQL запрос. Объединения и переносы строк.
Запрос нельзя просто так взять, скопировать и выполнить в каком-то менеджере для баз данных.
Увы, в Java нету поддержки форматированных строк, как в Groovy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну да ладно с Java, а давайте попробуем реализовать то же самое на Kotlin. У них и
форматирование строк есть, и еще пара фишек, которые могут упростить код.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пробуем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;data class User(var id: Long, var firstName: String, var lastName:String) {
    constructor() : this(0, &quot;&quot;,&quot;&quot;)
}

val sql = &quot;&quot;&quot;
    SELECT *
    FROM users
    WHERE userId = 1;&quot;
&quot;&quot;&quot;

val handler = BeanHandler(User::class.java)
val user = runner.query(sql, handler)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пока, естественно, мы можем все завернуть так же, как и в Java варинте, но можно сделать намного
лучше.
Пишем extension метод для класса QueryRunner:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;inline fun &amp;lt;reified T&amp;gt; QueryRunner.findOne(sql: String): T {
    return BeanHandler(T::class.java).run { query(sql, this) }
}

inline fun &amp;lt;reified T&amp;gt; QueryRunner.findAll(sql: String): MutableList&amp;lt;T&amp;gt; {
    return BeanListHandler(T::class.java).run { query(sql, this) }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;С помощью этих методов мы теперь можем писать так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;val sql = &quot;&quot;&quot;
    SELECT *
    FROM users
    WHERE userId = 1;&quot;
&quot;&quot;&quot;


val user = runner.findOne&amp;lt;User&amp;gt;(sql)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;или так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;val user:User = runner.findOne(sql)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для того, чтобы понять, как это все работает, рекомендую почитать вот этот &lt;a href=&quot;https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters&quot;&gt;раздел документации&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Получается достаточно удобно и лаконично. Думаю, в следующий раз, используя полученный опыт,
будем уже экспериментировать с конвертацией в Json. Об этом всем я буду
рассказывать на конференции &lt;a href=&quot;http://qafest.com/&quot;&gt;QAFest 2017&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Как перестать писать @Step аннотации для Allure
          </title>
          <link>http://automation-remarks.com/2017/allure-without-annotations/index.html</link>
          <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/allure-without-annotations/index.html</guid>
          <description>
                        Просто лайфхак
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! В этой заметке хочу поделиться лайфхаком, который позволит перестать ставить аннотации &lt;code&gt;@Step&lt;/code&gt; в коде тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте сначала обрисуем суть проблемы. При построении проектов автоматизции нам зачастую приходится прикручивать какие-то логеры или репортеры.
Для меня репортером по умолчанию является &lt;a href=&quot;https://github.com/allure-framework&quot;&gt;Allure&lt;/a&gt;. С его помощью можно генерировать достаточно информативные
и понятные отчеты. Но есть у него один небольшой недостаток - если мы хотим логировать шаги теста, то над методами нужно ставить аннотацию &lt;strong&gt;@Step&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пример:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;class LoginPage{

    private SelenideElement email = $(&quot;#email&quot;);
    private SelenideElement password = $(&quot;#password&quot;)
    private SelenideElement submitBtn = $(&quot;.btnLogin&quot;)

    @Step
    public void loginAs(String name, String password){
        email.setValue(name)
        password.setValue(password)
        submitBtn.click()
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь метод &lt;code&gt;loginAs&lt;/code&gt; будет отображаться в отчете, так как мы указали над ним аннотацию &lt;code&gt;@Step&lt;/code&gt;. Все бы ничего, да вот когда в классе страницы
не один метод, а 5 или 10, уже становится не так радостно расставлять эти аннотации. К тому же, бывает, пишешь тест, описываешь поведение
страниц, запускаешь тесты, а потом &quot;Аx, я же забыл поставить аннотации для аллюра&quot;. А когда в команде 2-3 человека, приходится следить за этими аннотациями
в PR, что никак не радует. В один прекрасный день я подумал: можно ведь как-то сделать без аннотаций?..&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Оказалось, что можно. Allure в своей работе использует &lt;a href=&quot;http://www.baeldung.com/aspectj&quot;&gt;Aspectj&lt;/a&gt;, который мы и можем попробовать хакнуть и использовать для своих целей.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пробуем написать свой класс аспектов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;/**
 * Created by sergey on 05.06.17.
 */
@SuppressWarnings(&quot;unused&quot;)
@Aspect
public class CustomAspect {

  private static Allure ALLURE = Allure.LIFECYCLE;

  @Pointcut(&quot;execution(* com.automation.remarks.video.service.pages.*.*(..))&quot;)
  public void anyMethod() {
    //pointcut body, should be empty
  }

  @Pointcut(&quot;execution(* com.codeborne.selenide.SelenideElement.should*(..))&quot;)
  public void selenide() {
    //pointcut body, should be empty
  }

  @Before(&quot;anyMethod() || selenide()&quot;)
  public void stepStart(JoinPoint joinPoint) {
    String stepTitle = createTitle(joinPoint);

    MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();
    StepStartedEvent startedEvent = new StepStartedEvent(
        getName(methodSignature.getName(), joinPoint.getArgs())
    );

    if (!stepTitle.isEmpty()) {
      startedEvent.setTitle(stepTitle);
    }

    ALLURE.fire(startedEvent);
  }

  @AfterThrowing(pointcut = &quot;anyMethod() || selenide()&quot;, throwing = &quot;e&quot;)
  public void stepFailed(JoinPoint joinPoint, Throwable e) {
    ALLURE.fire(new StepFailureEvent().withThrowable(e));
    ALLURE.fire(new StepFinishedEvent());
  }

  @AfterReturning(pointcut = &quot;anyMethod() || selenide()&quot;, returning = &quot;result&quot;)
  public void stepStop(JoinPoint joinPoint, Object result) {
    ALLURE.fire(new StepFinishedEvent());
  }

  public String createTitle(JoinPoint joinPoint) {
    MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();
    Step step = methodSignature.getMethod().getAnnotation(Step.class);
    return step == null ? &quot;&quot; : getTitle(step.value(), methodSignature.getName(), joinPoint.getThis(), joinPoint.getArgs());
  }


  /**
   * For tests only
   */
  static void setAllure(Allure allure) {
    CustomAspect.ALLURE = allure;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Наверное, для неподготовленного читателя выглядит очень &quot;вырвиглазно&quot;. Что я вообще написал? AspectJ оперирует понятиями &lt;strong&gt;Pointcut&lt;/strong&gt;,
которые я и объявил в самом начале класса.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;@Pointcut(&quot;execution(* public com.automation.remarks.video.service.pages.*.*(..))&quot;)
public void anyMethod() {
    //pointcut body, should be empty
}

@Pointcut(&quot;execution(* public com.codeborne.selenide.SelenideElement.should*(..))&quot;)
public void selenide() {
    //pointcut body, should be empty
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Говоря проще, я написал селекторы, с помощью которых указал AspectJ учитывать только публичные методы из пакета &lt;code&gt;public com.automation.remarks.video.service.pages&lt;/code&gt; и
методы Selenide, которые начинаются со слова &lt;code&gt;should&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее я объявил условия @Before, @After, @AfterThrowing и @AfterReturning. В @Before мы извлекаем имя метода и его параметры, а в @After либо завершаем
шаг успешно, либо маркаем, как неуспешный, и прикрепляем к нему текст ошибки. Все достаточно просто.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее, чтобы это все заработало, нам нужно в папке &lt;strong&gt;src/main/resources/META-INF&lt;/strong&gt; создать файлик под названием &lt;strong&gt;aop-ajc.xml&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;&amp;lt;aspectj&amp;gt;
    &amp;lt;aspects&amp;gt;
        &amp;lt;aspect name=&quot;com.automation.remarks.video.service.pages.utils.CustomAspect&quot;/&amp;gt;
    &amp;lt;/aspects&amp;gt;
&amp;lt;/aspectj&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По факту мы в этом файле просто подключаем наш новый аспект. Теперь можно просто запускать тесты и смотреть на результат точно так же, как мы делали
это раньше. Таким образом мы избавились от аннотаций в Page объектах и значительно упростили себе жизнь. В целом эта идея работает и имеет право на жизнь.
Вы можете ее либо переиспользовать, либо развить и поделиться решением со всем миром автоматизации.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P/S&lt;/strong&gt; Конечно, в таком подходе есть ряд недостатков. Первый: мы жестко завязались на жизненный цикл аллюра. Код, приведенный выше, работает только
с первой версией, для второй версии нужно будет переписать вызовы &lt;code&gt;ALLURE.fire(new StepFailureEvent().withThrowable(e));&lt;/code&gt;.
Второе: дебажить аспекты практически невозможно (по крайней мере, я не нашел толковых примеров). Есть только упоминания, что вот в Eclipse как-то можно.
Из-за этого код приходится писать почти вслепую. И третье: с Котлином эта тема не работает, так как сам AspectJ нормально не поддерживает Котлин.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Как мы перешли на Selenoid
          </title>
          <link>http://automation-remarks.com/2017/selenoid/index.html</link>
          <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/selenoid/index.html</guid>
          <description>
                        История нашего перехода на Selenoid
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Наконец-то я добрался до написания заметки о &lt;a href=&quot;https://github.com/aerokube/selenoid&quot;&gt;Selenoid&lt;/a&gt;. Расскажу о том, как и зачем мы его внедрили и что это
нам дало.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще со времен, когда я только вошел в IT в целом и в мир автоматизации в частности, я знал о таком инструменте, как Selenium Grid. Достаточно полезная
штука и, по всей видимости, очень популярная, так как заметка о &lt;a href=&quot;http://automation-remarks.com/nastraivaiem-selenium-grid-za-5-minut/index.html&quot;&gt;настройке грида&lt;/a&gt;
является одной из самых читаемых.
Сам грид - штука прикольная, но очень нестабильная. Многие проекты и компании научились танцевать с бубном и настраивать грид так, чтобы он не падал.
Скажем, ребята из Яндекса наваяли свой &lt;a href=&quot;https://www.youtube.com/watch?v=ULcE3993cZg&quot;&gt;грид роутер&lt;/a&gt;, ребята из Альфа-лаборатории придумали свой
&lt;a href=&quot;https://habrahabr.ru/company/alfa/blog/331434/&quot;&gt;кластер&lt;/a&gt;. Когда же пришло наше время настроить инфраструктуру для запуска UI тестов, мы решили не
изобретать велосипед и взять готовое решение - &lt;strong&gt;Selenoid&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Почему именно Selenoid?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все просто: его очень легко настроить, там есть докер и хорошая производительность.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я уже давно играюсь с докером. На одном из проектов мы внедрили &lt;a href=&quot;http://automation-remarks.com/ganiaitie-tiesty-v-kontieinierie-s-testcontainers/index.html&quot;&gt;тест контейнеры&lt;/a&gt;,
на другом просто запускали браузер в докере. На текущем проекте мы изначально планировали запускать тесты в безголовом хроме, но в тот момент эта функциональность
работала не так хорошо, как бы нам хотелось, да и дебажить тесты в невидимом режиме не так уж и круто.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Selenoid же был решением, которое очень хотелось попробовать в реальной работе. Его плюс в том, что настроить его очень просто  при
помощи &lt;a href=&quot;http://aerokube.com/cm/latest/&quot;&gt;Configuration Manager&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Выполняете пару команд:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ curl -L -o cm https://github.com/aerokube/cm/releases/download/1.2.3/cm_linux_amd64
$ chmod +x ./cm
$ ./cm selenoid start --vnc
$ ./cm selenoid-ui start&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;и у вас уже все настроено и работает. У нас это все заняло 10 минут (версия докера не подходила и нам его пришлось обновлять) =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Всего через неделю использования мы забыли о том, что такое локальный запуск браузера. При наличии VNC можно абсолютно спокойно дебажить тесты прямо на удаленной
машине. Огромным преимуществом, из-за которого я вообще посмотрел в сторону Selenoid, является запуск контейнера по запросу и повторяемость окружения.
У вас всегда известна версия браузера, в котором будут бежать тесты. Всегда создается новый контейнер под новую сессию. Больше нету неожиданных автообновлений
хрома или файрфокса. Более того, мы полечили синдром &quot;А у меня локально работает!&quot;, так как все запускают тесты только удаленно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Минусы есть?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пока что у нас почему-то проскакивает ошибка &lt;code&gt;Could not create remote session&lt;/code&gt;. Случается она редко и лечится банальным перезапуском, но все же неприятно.
Да и проблема, скорее всего, у нас в коде. Еще в контейнере не работает команда driver.manage.window.maximize(), поэтому приходится ставить размер окна явно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мы используем Selenide (на Kirk мы пишем пока только один проект) и написали свой &lt;code&gt;SelenoidDriverProvider&lt;/code&gt;.
Специально приведу пример кода, так как многие часто задают один и тот же вопрос: а как настроить? Так как у Selenide с документацией, скажем откровенно,
&quot;проблемы&quot;, можете опираться на пример ниже:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public class SelenoidWebDriverProvider implements WebDriverProvider {
  @Override
  public WebDriver createDriver(DesiredCapabilities capabilities) {
    DesiredCapabilities browser = new DesiredCapabilities();
    browser.setBrowserName(&quot;chrome&quot;);
    browser.setVersion(&quot;59.0&quot;);
    browser.setCapability(&quot;enableVNC&quot;, true);

    try {
      RemoteWebDriver driver = new RemoteWebDriver(
              URI.create(&quot;http://172.28.27.17:4444/wd/hub&quot;).toURL(),
              browser
      );
      driver.manage().window().setSize(new Dimension(1280, 1024));
      return driver;
    } catch (MalformedURLException e) {
      throw new RuntimeException(e);
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В коде это можно использовать так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;Configuration.browser = &quot;com.tests.utils.SelenoidWebDriverProvider&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом я очень доволен и мы получаем реальный профит. Что мы еще не пробовали, так это обновляться. В новой версии Selenoid добавили возможность
сетить имя для контейнера, чтобы можно было по имени легко определить нужную VNC сессию. Вот это мы пока не тестили, так что все еще гадаем, на какой табке кино смотреть =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P/S&lt;/strong&gt; Приятная новость: автор Selenoid будет выступать с докладом на конференции &lt;a href=&quot;http://qafest.com/&quot;&gt;QAFest&lt;/a&gt;, поэтому у всех посетителей
будет возможность не только послушать доклад, но и познакомиться лично. Собственно, это я и собираюсь сделать. Тоже буду там
выступать, но об этом уже в следующей заметке.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Kirk + chrome devtools
          </title>
          <link>http://automation-remarks.com/2017/kirk-chrome-devtools/index.html</link>
          <pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/kirk-chrome-devtools/index.html</guid>
          <description>
                        о возможности использовать devtools в тестах
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет, друзья-айтишники. Сегодня хочу поделиться с вами очередной порцией полезной
информации из мира автоматизации тестирования. Поговорим более детально о возможностях использования
Сhrome developer tools во время прогонов автотестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://tutorialdock.altervista.org/wordpress/wp-content/uploads/2011/06/chrome-dev-tool.png&quot; alt=&quot;chrome dev tool&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://automation-remarks.com/2017/video-recorder-update/index.html&quot;&gt;Записывать видео&lt;/a&gt; мы уже давно научились,
а вот использовать такой мощный инструмент, как devtools, пока еще нет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Developer tools обладает обширным кругом возможностей. Мы с вами используем его каждый день: для поиска элеметов,
для того, чтобы посмотреть в network, возможно, даже попытаться &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/network-conditions&quot;&gt;замедлить браузер&lt;/a&gt;, чтобы посмотреть на поведение вашего сайта.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Использование devtools в тестах было невозможно, пока на одной из конференций не был
показан инструмент &lt;a href=&quot;https://github.com/bayandin/devtools-proxy&quot;&gt;devtools proxy&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сам прокси написан на Python, но это не ограничивает нас от использования его в Java проектах.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Перед тем, как перейти к основной части, я поясню, чем вообще может помочь devtools именно во время прогона тестов.
Во-первых, вы можете смотреть сорс HTML страницы прямо во время исполнения тестов. Во-вторых, можно
смотреть табу network, все запросы и ответы. Это позволяет быстрее понять, что во время теста пошло не так и почему же он упал.
Хочу отметить, что возможность записывать трафик общения между браузером и бекендом уже давно
можно реализовать с помощью &lt;a href=&quot;http://www.seleniumeasy.com/selenium-tutorials/browsermob-proxy-selenium-example&quot;&gt;browsermob proxy&lt;/a&gt;.
Но proxy накладывает свои ограничения и вы не можете так прям в live режиме смотреть, что же там происходит.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я уже давно играюсь с DevTools proxy и буквально недавно сделал интеграцию devtools + &lt;a href=&quot;https://github.com/SergeyPirogov/kirk&quot;&gt;Kirk&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Выглядит это так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class DevToolsDemo {

    @Test fun testCanAddTwoNumbersListener() {
        val chrome = Browser(listener = DevTools())
        chrome.to(&quot;http://juliemr.github.io/protractor-demo/&quot;) {
            element(&quot;input[ng-model=&apos;first&apos;]&quot;) value &quot;1&quot;
            element(&quot;input[ng-model=&apos;second&apos;]&quot;) value &quot;2&quot;
            select(&quot;select[ng-model=&apos;operator&apos;]&quot;).selectOption(&quot;+&quot;)
            element(&quot;#gobutton&quot;).click()
            element(&quot;h2.ng-binding&quot;).shouldHave(text(&quot;3&quot;))
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В Kirk класс &lt;strong&gt;Browser&lt;/strong&gt; умеет принимать два параметра в конструкторе: &lt;strong&gt;WebDriver&lt;/strong&gt; и реализацию интерфейса &lt;strong&gt;KirkListener&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этим мы и воспользуемся:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class DevTools : AbstractEventListener() {
    override fun onStart() {
        openDevTools()
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Результат смотрим на видео:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/CHW03-L_bI4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На видео вы видели только один браузер потому, что тесты бежали в headless chrome. Эту возможность Kirk тоже поддерживает
&quot;из коробки&quot;.
Я специально сделал пример с &quot;безголовым хромом&quot;, чтобы более ярко продемонстрировать возможности. С наличием
такой фичи мы можем дебажить тесты, которые бегут на другой машине или в CI (*).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом я очень доволен появлением такой фичи: теперь команда может более эффективно дебажить тесты и анализировать
результаты. Я уверен, что мы еще будем обкатывать эту функциональность и найдем много полезных фишек, о которых
можно будет рассказать обществу автоматизаторов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;BTW: Ближайшее событие, на котором можно будет услышать о тестах на Котлине Kirk + DevTools и получить еще
кучу полезной информации - &lt;a href=&quot;http://qafest.com/&quot;&gt;QAFest&lt;/a&gt;. Не пропустите! Всех посетителей ждет очень много интересного -
это я могу гарантировать как член программного коммитета.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(*) Для нормального подключения удаленно нужно делать &lt;a href=&quot;https://stackoverflow.com/questions/18506233/using-chromium-remote-debugging-from-external-device&quot;&gt;port forwarding&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Video Recorder v1.6
          </title>
          <link>http://automation-remarks.com/2017/video-recorder-update/index.html</link>
          <pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/video-recorder-update/index.html</guid>
          <description>
                        Вышел апдейт видеорекордера
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Добрый день, уважаемые друзья-айтишники. Очередная заметка с техническим
хардкором уже на вашем экране =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этот раз хочу поделиться с вами новостями о &lt;a href=&quot;http://automation-remarks.com/java-video-recorder-1-0-8/index.html&quot;&gt;Java Video Recorder&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Судя по статистике, которую предоставляет Maven Central, c момента выхода в свет библиотека обрела определенную популярность:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Общее число скачиваний в месяц&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/selection_006.png&quot; alt=&quot;selection 006&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Общее число уникальных ip&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/selection_007.png&quot; alt=&quot;selection 007&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Буквально пару дней назад я выпустил версию 1.6. Так как в этом апдейте есть изменения,
которые поломают ваш старый код, я решил написать именно об этом.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что поменялось?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В версии 1.6 была удалена возможность устанавливать конфигурацию в коде.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;VideoREcorder.conf().withRecorderType(RecorderType.FFMPEG)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь конфигурация осуществляется через конфигурационный файл &lt;strong&gt;video.properties&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;video.folder= ${user home}/video
video.enabled=false               // default true
video.mode=ALL                    // default ANNOTATED
recorder.type=FFMPEG              // default MONTE
video.save.mode=ALL               // default FAILED_ONLY
video.frame.rate=1                // default 24&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Почему так?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Конфигурация хранится в одном месте, поэтому не нужно бегать и искать, не поменял
ли кто в коде значение. Переопределить значения, указанные в конфиг-файле, можно через System properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;System.setProperty(&quot;video.enabled&quot;,&quot;false&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Или через cmd:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;mvn test -Dvideo.enabled=false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Второе нововведение - поддержка Junit 5. Я &lt;a href=&quot;http://automation-remarks.com/2017/video-recroder-junit5/index.html&quot;&gt;писал&lt;/a&gt; об этом еще в феврале,
но теперь в Maven Central появился официальный модуль &lt;strong&gt;video-recorder-junit5&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вам вообще не нужно заморачиваться - просто подключаете его и можете писать&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Video
void testIsFlaky(){
   open(LoginPage.class)
   element(&quot;#name&quot;) value &quot;name&quot;
   element(&quot;#password&quot;) value &quot;password&quot;
   element(&quot;#loginBtn&quot;).click()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В связи с переходом на новый формат конфигурации немного поменялась внутренняя реализация, но это
не задевает уже существующие адаптеры для JUnit и TestNG. Надеюсь, эти улучшения будут полезными
для пользователей библиотеки.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P/S&lt;/strong&gt; Перед выходом версии 1.6 была еще версия 1.5, но она оказалась неудачной, так как я забыл исключить
зависимость JUnit5-api из сборки, поэтому у всех обновившихся полезли проблемы. Извините, натупил, с кем не бывает?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;BTW: С &lt;a href=&quot;http://automation-remarks.com/2017/kotlin/index.html&quot;&gt;Котлином&lt;/a&gt; Video Recorder тоже работает =)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Используем супер силу Kotlin в тестах
          </title>
          <link>http://automation-remarks.com/2017/kotlin-power/index.html</link>
          <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/kotlin-power/index.html</guid>
          <description>
                        о применении котлин в деле
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Продолжаем наше знакомство с миром kotlin. В &lt;a href=&quot;http://automation-remarks.com/2017/kotlin/index.html&quot;&gt;прошлый раз&lt;/a&gt;
я писал о первых впечатлениях. Все глубже изучая язык, на данный
момент я успел прочитать 80% книги &lt;a href=&quot;https://www.manning.com/books/kotlin-in-action&quot;&gt;kotlin in action&lt;/a&gt;
и понять идиомы языка и основные, заложенные в него, идеи.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мнение: если вы начинающий тестировщик или совсем мало работаете с Java, вам будет
сложно понять смысл Котлина. Если вы пробовали С#, Groovy и Python, то многие вещи
покажутся уже знакомыми.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Просто читать книги и статьи о котлине не достаточно. В интернете появляется все больше материалов,
в которых пишут о том, какой он классный, что он &lt;a href=&quot;https://medium.com/@bladecoder/exploring-kotlins-hidden-costs-part-1-fbb9935d9b62&quot;&gt;почти не тормозит&lt;/a&gt;,
и вообще совместим с джавой просто на ура.
Маркетинг и хайп - это хорошо, но давайте посмотрим на реальность.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ИМХО самой крутой фишкой являются &lt;a href=&quot;https://kotlinlang.org/docs/reference/extensions.html&quot;&gt;extension&lt;/a&gt; методы.
С их помощью можно легко нафигачить дополнительных методов в любой java класс.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;ext.kt&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;fun webdriver.open(url: string, autoclose: boolean? = true) {
    autoclose(autoclose)
    get(url)
}

fun webdriver.autoclose(enabled: boolean? = true) {
    if (enabled!!) {
        runtime.getruntime().addshutdownhook(object : thread() {
            override fun run() = quit()
        })
    }
}

fun webdriver.find(cssselector: string): webelement {
    return findelement(by.cssselector(cssselector))
}

fun webelement.setvalue(value: any) {
    clear()
    sendkeys(value.tostring())
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И потом использовать все это в своем коде:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;val driver = chromedriver()
driver.open(&quot;http://juliemr.github.io/protractor-demo/&quot;)
driver.apply {
    find(&quot;input[ng-model=&apos;first&apos;]&quot;).set(1)
    find(&quot;input[ng-model=&apos;second&apos;]&quot;).set(2)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мегакруто! В джаве такого можно добиться с помощью &lt;a href=&quot;http://automation-remarks.com/2017/lombok/index.html&quot;&gt;lombok&lt;/a&gt;,
но для этого нужно понаставить плагинов в idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;А как этот код можно вызвать в джава классе? Смотрим:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.driver.extkt;

webdriver driver = new chromedriver();
extkt.open(driver, &quot;http://juliemr.github.io/protractor-demo/&quot;, true);
extkt.find(driver,&quot;input[ng-model=&apos;first&apos;]&quot;).sendkeys(&quot;1&quot;);
extkt.find(driver,&quot;input[ng-model=&apos;second&apos;]&quot;).sendkeys(&quot;2&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Красота, не правда ли? =)) Такова уж природа джавы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте глянем еще на один пример c лямбдами. В котлине их реализовали схожим образом с Groovу.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;val userlist = listof(user(&quot;ivan&quot;, 26),user(&quot;dima&quot;, 12))
assert userlist.filter { it.name == &quot;ivan&quot; }.first().age == 26&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Намного лучше и удобнее джавы. Но как на счет такого кода? Скажем, мы пишем такой DSL&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;browser.drive {
    to(::calculatorpage) {
        first.setvalue(10)
        second.setvalue(2)
        command.set(&quot;/&quot;)
        gobtn.click()
        result.shouldbe(5)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Джава эквивалент будет таким:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Browser.Companion.drive(browser -&amp;gt; {
      browser.to(Calculator::new, calculator -&amp;gt; {
      calculator.getFirst().setValue(&quot;10&quot;);
      calculator.getSecond().setValue(&quot;2&quot;);
      сalculator.getSelect().deselectByVisibleText(&quot;/&quot;);
      calculator.getGoBtn().click();
      calculator.getResult().should(new Have().text(&quot;5&quot;));
      return Unit.INSTANCE;
   });
   return Unit.INSTANCE;
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Неплохая попытка. Я считаю, это - следующий убийца &lt;strong&gt;Selenide&lt;/strong&gt; =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На самом деле (без шуток) это все - часть моих безумных экспериментов. Чтобы понять язык, нужно с ним поиграться
и попробовать разные идеи. Конечно же, максимальная совместимость Котлин и Джава задумывалась для более простой
миграции на этот самый Котлин, а не наоборот.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На деле язык оставляет хорошее впечатление и облегчает решение повседневных задач. Да, есть проблемы
с идиоматичными Котлин библиотеками, так как местами приходится строить костыли, делая вызовы в стиле&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;toJson(KotlinUser.klass.javaClass)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но взамен вы получаете лаконичный синтаксис и ежедневный фан при работе с языком в Idea.
Продолжаем погружение в яркий мир Котлин! Проект &lt;a href=&quot;http://automation-remarks.com/kirk/&quot;&gt;Kirk&lt;/a&gt; обрастает
новыми фишками и идеями и даже появился в &lt;a href=&quot;https://search.maven.org/#artifactdetails%7Ccom.automation-remarks%7Ckirk%7C0.7.1%7Cjar&quot;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P/S&lt;/strong&gt; Так на Котлине ж &lt;a href=&quot;https://www.jetbrains.com/research/devecosystem-2017/&quot;&gt;пишут всего 2%&lt;/a&gt; разрабочиков?
А, пофиг. Если что, пойдем формошлепить на джаваскрипте =))&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Все будет Kotlin
          </title>
          <link>http://automation-remarks.com/2017/kotlin/index.html</link>
          <pubDate>Sun, 2 Jul 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/kotlin/index.html</guid>
          <description>
                        Имхо о хайповом языке
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ахой, ну вот пришло и мое время хайпить по поводу Kotlin. Регулярные подписчики и
читатели блога знают, что я Java-пацан, ходивший в мир Groovy, который мне безумно нравится. Я писал
о его применении &lt;a href=&quot;http://automation-remarks.com/ssh/index.html&quot;&gt;для работы с SSH&lt;/a&gt;, и
&lt;a href=&quot;http://automation-remarks.com/groovy-page/index.html&quot;&gt;в UI тестировании&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но, увы, многие игнорируют Groovy и отдают предпочтение старой кляче Java с аргументами:
- Groovy тормозит (хотя в тестах это пофиг)
- А где мы возьмем людей? (хотя его можно выучить за неделю).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь настал мой черед сходить в мир &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;Kotlin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://habrastorage.org/files/a52/453/729/a52453729bd64cb3b5ca8a4892e45cc1.png&quot; alt=&quot;a52453729bd64cb3b5ca8a4892e45cc1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вокруг языка ходит много хайпа, особенно после того, как Google официально начал поддерживать Kotlin, о чем
было объявлено на &lt;a href=&quot;https://www.theverge.com/2017/5/17/15654988/google-jet-brains-kotlin-programming-language-android-development-io-2017&quot;&gt;Google IO 2017&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скажу честно, я уже подустал от Java. Именно поэтому в какой-то момент меня понесло в &lt;a href=&quot;http://automation-remarks.com/2016/python-webdriver-manager/index.html&quot;&gt;Python&lt;/a&gt;.
Но там мне не особо понравилось, поэтому я все еще пишу на Java 8, иногда даже с лямбдами балуюсь =).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На Kotlin я смотрел еще до релиза 1.0 и тогда многое для меня в нем было не понятным. Сейчас же решил основательно
в нем разобраться, чтобы понять, можно ли на нем делать что-то внятное или нафиг-нафиг и &lt;a href=&quot;http://automation-remarks.com/2017/lombok/index.html&quot;&gt;Java 8 + Lombok&lt;/a&gt; - наше все.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Окончательным толчком послужил выход Gradle 4.0, в котором стали нормально поддерживать &lt;a href=&quot;https://github.com/gradle/kotlin-dsl&quot;&gt;Kotlin Gradle DSL&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я, значит, как реальные Early adopters, сел и начал смотреть, что да как. Спустя пару часов смог сделать &lt;a href=&quot;https://github.com/SergeyPirogov/kotlin_demo&quot;&gt;проект&lt;/a&gt; на
Gradle 4, сконфигурированный с помощью Kotlin Gradle DSL + Selenide + Allure 2. Правда, я бы не справился, если бы не
сходил в Kotlin Slack чатик и не спросил у пацанвы, как там этот Gradle DSL писать. Документации пока что нет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но разобраться с языком, не пописав на нем что-то внятное, практически нереально. Именно поэтому я начал
писать &lt;a href=&quot;https://github.com/SergeyPirogov/kirk&quot;&gt;Kirk&lt;/a&gt;. Пока что это все находится на начальном этапе, но мне
нравится то, что с помощью Kotlin можно создавать очень классный DSL c минимальными затратами по времени.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test fun testCanDeactivateTask() {
        Browser.drive {
            to(::TodoPage) {
                addTasks(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)
                deactivateTask(&quot;A&quot;)
                counter.should(have.text(&quot;2&quot;))
                goToCompletedTab()
                taskList.should(have.exactText(&quot;A&quot;))
            }
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом я пока очень доволен языком и его возможностями. Реально писать намного приятнее и удобнее, чем на Java, особенно
лямбды:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;list.stream()
    .filter(e -&amp;gt; e.isDisplayed())
    .collect(toList())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;и в Котлине:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;list.filter{it.isDisplayed()}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Погружаюсь в мир Котлин и мне нравится. Теперь заметок о применении Котлин вместо Java станет больше =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;BTW:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Больше о Котлин + Gradle можно найти в видосиках с недавнего &lt;a href=&quot;https://www.youtube.com/playlist?list=PLLQbIfXVLZqEFMPsWijGR043NBxwPvgtI&quot;&gt;Gradle Summit 2017&lt;/a&gt;.
Ну и, конечно же, самые отборные материалы я размещаю в группе в &lt;a href=&quot;https://www.facebook.com/automationremarks/&quot;&gt;Facebook&lt;/a&gt;. Присоединяйтесь!&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Переходим на Allure2 без Gradle плагина
          </title>
          <link>http://automation-remarks.com/2017/allure-gradle-without-plugin/index.html</link>
          <pubDate>Sun, 18 Jun 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/allure-gradle-without-plugin/index.html</guid>
          <description>
                        Способ интеграции Allure2 и Gradle
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После пары заметок о конференциях &lt;a href=&quot;http://automation-remarks.com/2017/testing-stage-retro/index.html&quot;&gt;Testing Stage&lt;/a&gt; и &lt;a href=&quot;http://automation-remarks.com/2017/heisenbug-2017-piter-retro/index.html&quot;&gt;Гейзенбаг&lt;/a&gt;
пришла пора возвращаться к техническому хардкору. В этот раз я вам расскажу о способе интеграции Allure2 и Gradle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://automated-testing.info/uploads/default/original/2X/3/3a722f96e5c6db7ef7a54773d73a81633ba2f828.png&quot; alt=&quot;3a722f96e5c6db7ef7a54773d73a81633ba2f828&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скажу сразу, данный способ будет валиден до выхода в релиз официального плагина Allure2 для Gradle. Пока же работающего плагина нет, придется позаниматься извращением.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Настраивать будем для Gradle 3 и TestNG. В принципе, все необходимое можно найти в &lt;a href=&quot;https://docs.qameta.io/allure/2.0/&quot;&gt;официальной документации&lt;/a&gt; по Allure2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Добавляем настройки в build.gradle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;apply plugin: &apos;java&apos;

configurations {
    agent
}

dependencies {
    agent &quot;org.aspectj:aspectjweaver:1.8.10&quot;
    compile &quot;io.qameta.allure:allure-testng:2.0-BETA10&quot;
}

test.doFirst {
    jvmArgs &quot;-javaagent:${configurations.agent.singleFile}&quot;
}

test {
    useTestNG()
    systemProperty &apos;allure.results.directory&apos;, &apos;build/allure-results&apos;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь при прогоне тестов через command line или CI c помощью команды:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;./gradlew clean test&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;У вас в папке &lt;code&gt;build/allure-results&lt;/code&gt; будут создаваться *.json файлы, из которых потом и будет генерироваться отчет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этого вполне достаточно, если вы запускаете тесты на CI и используете Allure2 плагин для генерации отчета. Увы, ставить плагины и обновлять
не всегда выдается возможным, так как наш Jenkins содержат дяди с тайтлом &quot;DevOps&quot;. Благо, уже давно есть HTML Publisher плагин, который позволяет рендерить
сгенерированный отчет. Именно им мы и пользуемся.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для того, чтобы сгенерировать отчет, нужно использовать &lt;a href=&quot;https://docs.qameta.io/allure/2.0/#_installing_a_commandline&quot;&gt;allure command line&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но я уже привык к тому, что вызываю &lt;code&gt;gradle clean test&lt;/code&gt;, и у меня после прогона тестов всегда генерируется отчет. Чтобы такого добиться с Allure2,
нужно самим пописать код.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Идем, значит, в &lt;a href=&quot;https://bintray.com/qameta/generic/allure2&quot;&gt;bintray&lt;/a&gt; и качаем allure command line binary архив.
Распаковываем и ложим в корень нашего проекта.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Дальше делаем свой таск в build.gradle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;task generateAllure(type: Exec) {
    workingDir &quot;$projectDir/allure/bin&quot;
    if (System.getProperty(&apos;os.name&apos;).toLowerCase(Locale.ROOT).contains(&apos;windows&apos;)) {
        commandLine &apos;cmd&apos;, &apos;/c&apos;, &apos;allure.bat&apos;, &apos;generate&apos;, &apos;-c&apos;, &apos;../../integration/build/allure-results&apos;
    } else {
        commandLine &apos;bash&apos;, &apos;-c&apos;, &apos;allure&apos;, &apos;generate&apos;, &apos;-c&apos;,&quot;$projectDir/integration/build/allure-results&quot;
    }
}

tasks.withType(Test)*.finalizedBy generateAllure&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Собственно, на этом и все. Теперь при выполнении &lt;code&gt;gradlew clean test&lt;/code&gt; у нас будут прогоняться тесты и генерироваться отчет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Про Allure2 и Python вы сможете послушать на &lt;a href=&quot;http://automation-remarks.com/2017/python-training/index.html&quot;&gt;мастер-классе&lt;/a&gt;, который назначен на 24.06.17.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Мастер-класс: Automation in Action With Python
          </title>
          <link>http://automation-remarks.com/2017/python-training/index.html</link>
          <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/python-training/index.html</guid>
          <description>
                        Анонс воркшопа
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;24 июня&lt;/strong&gt; 2017 года в 16.00 буду проводить ОНЛАЙН мастер-класс - Automation in Action With Python&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом мастер-классе я покажу на реальном примере, как можно построить систему автоматизированного
тестирования с использованием языка &lt;strong&gt;Python 3&lt;/strong&gt; и технологий, указанных ниже:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist skills-list&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Selenium&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allure 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Testcontainers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Travis CI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Report Portal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Cloud&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;За четыре часа участников ждет много кода на Python и полезных советов.
Мастер-класс подойдет инженерам различного уровня. Новички увидят на деле работу с технологиями,
старички же увидят, как мы используем
Travis, Docker и Allure 2. Разберемся, как можно за считанные часы создать полноценное окружение
для запуска тестов и настроить запуск в CI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Участие в мастер-классе платное. &lt;strong&gt;Стоимость - 1500 грн (60$)&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Всех интересующихся прошу регистрироваться, используя форму ниже:&lt;/p&gt;
&lt;/div&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../../css/bootstrap-iso.css&quot; /&gt;
&lt;div class=&quot;bootstrap-iso&quot; style=&quot;
    width: 90%;
    padding-left: 15px;
&quot;&gt;
&lt;!-- Any HTML here will be styled with Bootstrap CSS --&gt;
&lt;form class=&quot;form-horizontal&quot; method=&quot;POST&quot; action=&quot;http://formspree.io/automationremarks@gmail.com&quot;&gt;
    &lt;div class=&quot;form-group&quot;&gt;

        &lt;div class=&quot;col-sm-10&quot;&gt;
           &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;inputEmail3&quot; name=&quot;email&quot; placeholder=&quot;Ваш email&quot; style=&quot;width: 320px;&quot;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;

            &lt;div class=&quot;col-sm-10&quot;&gt;
               &lt;input class=&quot;form-control&quot; id=&quot;inputName3&quot; name=&quot;name&quot; placeholder=&quot;Ваше имя&quot; style=&quot;width: 320px;&quot;&gt;
            &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
                &lt;div class=&quot;col-sm-10&quot;&gt;
                   &lt;textarea class=&quot;form-control&quot; rows=&quot;3&quot; name=&quot;message&quot; placeholder=&quot;Сообщение:&quot;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
         &lt;div class=&quot;col-sm-10&quot;&gt;
            &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Отправить&lt;/button&gt;
         &lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Гейзенбаг Питер 2017: ретроспектива
          </title>
          <link>http://automation-remarks.com/2017/heisenbug-2017-piter-retro/index.html</link>
          <pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/heisenbug-2017-piter-retro/index.html</guid>
          <description>
                        Мои впечатления от просмотра данной конференции
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Делюсь впечатлениями от просмотра конференции &lt;a href=&quot;https://heisenbug-piter.ru/&quot;&gt;Гейзенбаг 2017 Питер&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://thetime4.net/static/images/events/logo_6w9q74lhp3sh9zk_Bg35NVDERRE.png&quot; alt=&quot;logo 6w9q74lhp3sh9zk Bg35NVDERRE&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я смотрел все выступления онлайн, поэтому комментировать организацию и место проведения не могу.
Зачастую хорошая организация, вкусное печенье и бесплатный кофе затмевают слабые доклады. А так как я
там не был и это все меня не отвлекало, говорить буду сугубо о контенте и крутости онлайн трансляции.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Об онлайн трансляции:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скажу честно, это была первая конференция, которую я смотрел онлайн. К трансляции
у меня вопросов нет - высокое качество, ничего не сбоило и не зависало.
Одно замечание: музыка в перерывах между докладами была немного депрессивная, но это вопрос вкуса.
Для меня большим преимуществом также является то, что записи всех докладов доступны через пару дней.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;О программе:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По сравнению с программой дебютной конференции доклады  были намного сильнее. До того, как писать отзыв,
я просмотрел все доклады и мой личный топ 5 выглядит так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;1) &lt;strong&gt;Паттерны проектирования в автоматизации тестирования&lt;/strong&gt; (Николай Алименков)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Коля четко и без лишних поводов для холивара назвал проблемы и показал паттерны, которые потенциально
могут помочь решить эти самые проблемы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;NB: этот доклад с небольшими дополнениями был повтором &lt;a href=&quot;https://www.youtube.com/watch?v=SEWa5_RW2BM&amp;amp;index=4&amp;amp;list=PLa7q-VITePQUz8H8_if3BcV4MCrYldYFy&quot;&gt;доклада на Selenium Camp&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;2) &lt;strong&gt;Тестирование в мире данных&lt;/strong&gt; (Игорь Хрол)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Настоящий хардкор и лайвкодинг. Игорь показал, как TopTal тестируют аналитику.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;NB: этот же доклад был прочитан на конференции &lt;a href=&quot;https://www.youtube.com/watch?v=nFpZQOrZQfw&quot;&gt;CAMAQA Spring 2017&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3) &lt;strong&gt;Allure 2&lt;/strong&gt; (Артем Ерошенко)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично я долго ждал релиза новой версии отчетов Allure, поэтому слушал этот доклад с особенным интересом.
Несмотря на то, что все фичи и переработки уже давно были слиты, хотелось услышать официальную версию
от разработчиков. Вышло достаточно информативно. Жду релиз Gradle плагина, так как сейчаc у меня все
настроено через вызов кастомного Gradle exec таска.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;4) &lt;strong&gt;Учимся анализировать результаты нагрузочного тестирования&lt;/strong&gt; (Алексей Лавренюк)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Очень круто и полезно, особенно людям, которые делают перформанс. После доклада я прям поставил себе
цель познакомиться с Яндекс Танком и возможно даже &quot;пострелять&quot; в наш бекенд. Так или иначе - очень советую.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;5) &lt;strong&gt;Кодогенерация как способ решения проблем автоматизатора&lt;/strong&gt; (Кирилл Меркушев)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом докладе сыграло и мастерство спикера, и материал, о котором он говорил. Много чего из рассказанного
я использую на своих проектах. Например, генерацию &lt;a href=&quot;http://automation-remarks.com/2017/code-generation/index.html&quot;&gt;кода&lt;/a&gt;
и &lt;a href=&quot;http://automation-remarks.com/2017/assert-generation/index.html&quot;&gt;ассертов&lt;/a&gt; для тестирования API.
В докладе упоминалась еще пара полезных инструментов, которые стоит попробовать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;NB: хоть и с некоторыми переработками, но этот доклад был &lt;a href=&quot;https://www.youtube.com/watch?v=wDqZke0Iu7Q&quot;&gt;повтором&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В 10ку я бы включил еще доклад о Котлине. Хайп и новости о том, что
Гугл поддержал язык, делают свое грязное дело. Говорят, что на докладе яблоку негде было упасть.
Но, увы, и он тоже был &lt;a href=&quot;https://www.youtube.com/watch?v=DLXoEmw2lzQ&amp;amp;index=40&amp;amp;list=PLa7q-VITePQUz8H8_if3BcV4MCrYldYFy&quot;&gt;повтором&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Итог&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Можно смело утверждать, что Гейзенбаг потенциально очень достойная конференция. То, что ребята
делают упор на автоматизацию, не может не радовать, так как размазывание соплей о тест-кейсах и ISTQB,
менеджменте больших и маленьких команд уже немного подутомило. Слегка опечалило количество докладов,
которые уже были засвечены в сети. Да, они были немного переделаны, но все же это не был совершенно уникальный контент.
Также немного расстраивают заморские спикеры. В прошлом году Рекс Блек, в этом году Илари.
Имхо в докладах много воды и очевидных фактов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Из финального интервью организаторов известно, что следующий Гейзенбаг пройдет в Москве уже в декабре этого года,
и планируется расширение на 2 дня.
Поживем-увидим, а пока у меня все. Сезон конференций по тестированию закончен. Новый сезон начнется в сентябре с конференции &lt;a href=&quot;http://www.qafest.com/&quot;&gt;QAFest 2017&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Testing Stage 17: ретроспектива
          </title>
          <link>http://automation-remarks.com/2017/testing-stage-retro/index.html</link>
          <pubDate>Mon, 5 Jun 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/testing-stage-retro/index.html</guid>
          <description>
                        О конференции
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Поделюсь своими впечатлениями от конференции &lt;a href=&quot;http://testingstage.com&quot;&gt;Testing Stage 17&lt;/a&gt;.
Хочу отметить, что конференция проходила впервые, поэтому, если вы ни разу о ней не слышали, - это нормально.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://s.dou.ua/img/announces/testing-stage-630.png&quot; alt=&quot;testing stage 630&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В Украине уже есть глобальные конференции по тестированию: &lt;a href=&quot;http://seleniumcamp.com&quot;&gt;SeleniumCamp&lt;/a&gt; и &lt;a href=&quot;http://qafest.com&quot;&gt;QAFest&lt;/a&gt;.
Также проводится много локальных митапов, подобных IT Weekend Lviv и BAQ Lviv.
И тут вдруг очередная конференция?!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте по порядку:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Местом проведения был выбран НСК &quot;Олимпийский&quot; - достаточно неплохая локация, недалеко от станции метро.
Залы 2 и 3 нареканий не вызывают, так как это были конференц-холлы, а вот по залу 1 есть замечания.
Он был &quot;сконструирован&quot; из тонких временных стен и был рядом с галдящей толпой - местами было много шума.
Да и брусчатка под ногами создавала ощущение присутствия на выступлении уличных музыкантов 😊&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом по организации было заметно, что конференция дебютная - много косяков и пробелов.
Еды не было, но было много кофе. Лично я от этого не особо страдал, но при цене билета в &lt;strong&gt;150$&lt;/strong&gt; посетители имеют право требовать больше, чем просто интересные доклады.
Ведь есть с чем сравнивать: на SeleniumCamp и QAFest при такой же цене все получается намого лучше.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По контенту у меня вопросов не возникает. Программа была составлена достаточно сбалансированно: были и доклады для начинающих, и доклады для бывалых бородачей. Естественно, конфереция привлекла посетителей докладом и мастер-классом Рекса Блека. Я не испытываю особого восторга по этому поводу и не понимаю, за что его так любят. Особенно теперь, после личного присутвия на его докладе. Одним словом - нудотина и переливание &apos;из пустого в порожнее&apos;. Я уже привык, что на конференции мне нравится всего пара докладов. Здесь я могу отметить эти:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;1) &lt;strong&gt;YOU ARE DOING IT WRONG ALL THE TIME&lt;/strong&gt; (Yaroslav Pernerovskyy)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ярик четко рассказал об ожиданиях в Selenium. Было пару набросов в сторону Selenide, но все они безосновательны 😉&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;2) &lt;strong&gt;HOW KNOWING SYSTEM INTERNALS CAN IMPROVE YOUR TESTING&lt;/strong&gt; (Андрей Дзиня)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Андрей провел доклад в интересном формате и показал приемы, которые можно использовать при тестировнии на реальных проектах.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;О себе:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я выступал и с докладом, и с мастер-классом. Исходя из отзывов участников, все получилось досточно хорошо.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;В целом:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что касается успехов, то на &apos;отлично&apos; сработала идея мобильных приложений для Android и IOS, с помощью которых участники и спикеры могли общаться и обмениваться мнениями. Задумка мне понравилась.
С одной стороны, можно сделать скидку на то, что конференция проводилась впервые и в следующий раз организаторы сделают все лучше, но, с другой стороны, уже есть много конференций и напрашиваются логичные вопросы: зачем еще одна конференция о тестировании в Киеве? что ее отличает от подобных? в чем ее преимущество?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Личное мнение и пожелания:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Из IT конференций нужно убирать мотоциклы и автомобили.
В первый раз лучше жертвовать количеством посетителей в пользу лучшей подготовки и организации.
Да и вообще, летом конференцию нужно увозить из Киева в сторону моря или делать ближе к воде и природе,
а не заковывать ее в бетонные стены стадиона 😊&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Fast and robust test automation with Selene + Python
          </title>
          <link>http://automation-remarks.com/2017/python-selene-workshop/index.html</link>
          <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/python-selene-workshop/index.html</guid>
          <description>
                        Мастер-класс
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом мастер-классе я покажу на реальном примере, как можно построить систему автоматизированного тестирования с использованием стека, описанного в названии доклада. Посетителей ждет два часа хардкора и много кода на Python. Мастер-класс будет полезен инженерам различного уровня, так как я покажу свой опыт в построении автоматизации тестирования на проектах. Новички увидят на деле работу с технологиями, старички увидят, как мы используем Travis, Docker и Allure 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Всех интересующихся прошу присылать заявки на почту &lt;a href=&quot;mailto:automationremarks@gmail.com&quot;&gt;automationremarks@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Запись воркшопа Automation in Action
          </title>
          <link>http://automation-remarks.com/2017/workshop-online/index.html</link>
          <pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/workshop-online/index.html</guid>
          <description>
                        Запись воркшопа
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хорошая новость - доступны видеозаписи воркшопа Automation in Action. Почти 10 часов видео c примерами написания тестов на Selenide и Rest Assured, отчетами Allure и Report Portal. Вы можете получить доступ ко всем частям,
можно &lt;a href=&quot;http://automation-remarks.us10.list-manage.com/subscribe?u=d24f95005c1b66c13389aceb9&amp;amp;id=ce47ec0c3f&quot;&gt;подписавшись на email рассылку&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/QYA2V4gVGk4?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Аттачим RestAssured логи к Allure
          </title>
          <link>http://automation-remarks.com/2017/rest-assured-allure-log/index.html</link>
          <pubDate>Fri, 5 May 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/rest-assured-allure-log/index.html</guid>
          <description>
                        О том, как прикрепить логи к отчету
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;История о том, как прикрепить логи к отчету и сделать всех счастливыми. Эта заметка является
продолжением серии о &lt;a href=&quot;http://automation-remarks.com/2017/code-generation/index.html&quot;&gt;быстром написании тестов&lt;/a&gt;
и &lt;a href=&quot;http://automation-remarks.com/2017/assert-generation/index.html&quot;&gt;проверок&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В свободное от работы время я занимаюсь &lt;a href=&quot;http://automation-remarks.com/course/&quot;&gt;консультациями&lt;/a&gt; по вопросам
построения автоматизации тестирования. Однажды ко мне обратились с вопросом о возможности
прикреплять к Allure отчетам логи от RestAssured. Так как на просторах интернета сложно
найти качественный пример реализации, я решил поделиться решением данной задачи.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По умолчанию RestAssured выводит логи в консоль, но существует механизм перехвата с помощью фильтров.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;RestAssured.filters(new ResponseLoggingFilter(LogDetail.ALL, printStream),
        new RequestLoggingFilter(LogDetail.ALL, printStream));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Именно этот механизм мы и можем использовать для своих целей.
Для того, чтобы прикреплять логи к отчетам, нам нужно написать TestNG лисенер:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public class LogListener implements ITestListener {
  private ByteArrayOutputStream request = new ByteArrayOutputStream();
  private ByteArrayOutputStream response = new ByteArrayOutputStream();

  private PrintStream requestVar = new PrintStream(request, true);
  private PrintStream responseVar = new PrintStream(response, true);


  public void onStart(ITestContext iTestContext) {
    RestAssured.filters(new ResponseLoggingFilter(LogDetail.ALL, responseVar),
            new RequestLoggingFilter(LogDetail.ALL, requestVar));
  }

  public void onTestSuccess(ITestResult iTestResult) {
    logRequest(request);
    logResponse(response);
  }

  public void onTestFailure(ITestResult iTestResult) {
      onTestSuccess(iTestResult)
  }

  @Attachment(value = &quot;request&quot;)
  public byte[] logRequest(ByteArrayOutputStream stream) {
    return attach(stream);
  }

  @Attachment(value = &quot;response&quot;)
  public byte[] logResponse(ByteArrayOutputStream stream) {
    return attach(stream);
  }

  public byte[] attach(ByteArrayOutputStream log) {
    byte[] array = log.toByteArray();
    log.reset();
    return array;
  }

  public void onTestStart(ITestResult iTestResult) {
  }

  public void onTestSkipped(ITestResult iTestResult) {

  }

  public void onTestFailedButWithinSuccessPercentage(ITestResult iTestResult) {

  }

  public void onFinish(ITestContext iTestContext) {

  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь нужно просто использовать этот лисенер в своих тестах:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;@Listeners(LogListener.class)
class SignInTest {

   @Test
   public void testCanSignIn(){
       CredentialsForResetPass credentialsRes = new CredentialsForResetPass(&quot;test@mail.com&quot;);
       given()
               .contentType(&quot;application/json&quot;)
               .body(credentialsRes)
               .when()
               .post(&quot;http://localhost:8085/auth/reset&quot;)
               .then()
               .assertThat()
               .statusCode(200)
               .and()
               .assertThat().body(&quot;code&quot;, equalTo(&quot;OK&quot;));
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь ваши логи будут отображаться в виде аттачментов к тестам. Я на своем проекте
тоже использую такой подход. Это позволяет значительно упростить жизнь, так как в случае
ошибки вся команда знает, что нужная информация хранится в отчете.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Блеск и нищета Report Portal
          </title>
          <link>http://automation-remarks.com/2017/report-portal/index.html</link>
          <pubDate>Mon, 1 May 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/report-portal/index.html</guid>
          <description>
                        Об опенсорс проекте Report Portal
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой заметке я опишу свои впечатления от использования &lt;a href=&quot;https://rp.epam.com/ui/&quot;&gt;Report Portal&lt;/a&gt; - опенсорс проекта, который призван облегчить жизнь автоматизаторов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://dev.by/ckeditor_assets/pictures/22979/content_rp_plate.png&quot; alt=&quot;content rp plate&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что такое репорт портал?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Смотрим, что говорят разработчики в &lt;a href=&quot;http://reportportal.io/#documentation&quot;&gt;документации&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;Report Portal is a service, it provides great capabilities for speeding up results
analysis and reporting by means of built-in analytical features.
Report Portal is the great addition to the
Continuous Integration and Continuous Testing process.
It seamlessly integrates with mainstream platforms such as Jenkins, Jira,
BDD process, majority of Functional and Unit testing frameworks.
Real-time integration allows to manage and track execution status directly from Report Portal.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сервис, который ускоряет анализ результатов прогона автоматических тестов и предоставляет возможность репортинга. Звучит достаточно полезно.
Может интегрироваться со всеми мейнстримными тулами и xUnit фреймворками - тоже многообещающе.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Зачем я вообще на него смотрел?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;О репорт портале я слышал еще до того, как это стало мейнстримом. В сентябре 2016 года я пробовал запустить одну из первых версий, вышедных в open-source.
Тогда мне не понравилось то, что портал потребляет очень много ресурсов (&amp;gt;8GB RAM), да и интеграция с TestNG и Junit не выглядела так легко. Тогда я потратил примерно час,
чтобы все поднять.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Прошло уже прилично времени, вышла версия 3.0.0 и я, как технический лидер проекта, хотел выяснить, чем конкретно Report Portal может помочь нам, насколько сложно его поставить
и сколько времени нужно потратить на интеграцию.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что из этого получилось? Давайте смотреть.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Установка:&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Здесь все достаточно неплохо.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Берем докер, делаем &lt;code&gt;docker-compose up&lt;/code&gt;, ждем пару минут и сервис благополучно поднимается. Это, конечно, большой плюс. По этому пункту замечаний нет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Интеграция с xUnit фреймворками:&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сначала я решил подключить портал к одному из проектов, написанных на Python + Pytest. В официальном репозитории есть соответсутвующий
&lt;a href=&quot;https://github.com/reportportal/agent-python-pytest&quot;&gt;агент&lt;/a&gt;, в котором сказано сделать следующее:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;pip install pytest-reportportal&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Не взлетело - завел &lt;a href=&quot;https://github.com/reportportal/agent-python-pytest/issues/3&quot;&gt;баг&lt;/a&gt;. Такое поведение сразу отталкивает, но так как желание попробовать было выше обычного,
я поставил его через Github:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;pip install git+https://github.com/reportportal/agent-python-pytest.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Дальше нужно создать &lt;code&gt;pytest.ini&lt;/code&gt; файл:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;[pytest]
mandatory fields
rp_uuid = uid reportportal
rp_endpoint = http://ip:port
rp_project = Project of ReportPortal&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот тут у меня есть замечание: в документации &quot;очень мелким шрифтом&quot; прописано, куда нужно пойти и взять эти вот значения.
Это указано в документации к модулю для TestNG. Такой вот момент.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну да ладно, давайте попробуем запустить тесты:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;py.test ./tests --rp-launch selene_blog_test&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все классно: тесты пробегают, в портале создаются соответствующие записи.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/pytest_rp.png&quot; alt=&quot;pytest rp&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Однако, есть досадные минусы, которые пока что делают интеграцию портала с pytest практически бессмысленным занятием. Для упавших тестов нету ни стектрейса, ни причины падения.
И это расходится со словами &quot;provides great capabilities for speeding up results analysis&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/pytest_rp_no_trace.png&quot; alt=&quot;pytest rp no trace&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я честно пытался понять, как их туда запихнуть. Про логи есть, а вот про такую стандартную вещь, как стектрейс, нету. Я уже не говорю о скриншотах.
&lt;strong&gt;Allure умеет собирать такую информацию без лишних приседаний.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Мой вывод:&lt;/strong&gt; пока что Report Portal для пайтон проектов бесполезен по причинам, указанным выше.
Имея &lt;strong&gt;Jenkins&lt;/strong&gt; и &lt;strong&gt;Allure&lt;/strong&gt;, мы получаем всю нужную информацию без каких-либо накладных расходов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем я решил настроить Report Portal + TestNG.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Весь процесс занял у меня 30 минут. В документации нету примера интеграции для проектов на &lt;strong&gt;Gradle&lt;/strong&gt;. Из-за этого мне пришлось потратить определенное время на то, чтобы разобраться.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ниже описание &lt;code&gt;build.gradle&lt;/code&gt; файла с настройками:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;apply plugin: &apos;java&apos;

repositories {
    jcenter()
    maven {
        url  &quot;http://dl.bintray.com/epam/reportportal&quot;
    }
}

dependencies {
    compile &apos;com.epam.reportportal:agent-java-testng:3.0.0&apos;
    compile &apos;com.epam.reportportal:logger-java-logback:2.6.0&apos;
    compile &apos;com.epam.reportportal:logger-java-log4j:2.6.1&apos;
    compile group: &apos;org.testng&apos;, name: &apos;testng&apos;, version: &apos;6.11&apos;
}

test {
    useTestNG()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом с TestNG все обстоит в разы лучше. Здесь и логи собираются, и стектрейсы. Однако, в документации не хватает явного примера крепления скриншотов для упавших тестов.
За Java часть можно поставить зачет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Из хорошего:&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Портал работает достаточно шустро;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Красивый интерфейс;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Есть возможность настроить информативные графики и фильтры.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Что имеем в итоге:&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Шероховатости заметны. Да, это опенсорс, но все же хотелось бы иметь plug&amp;amp;play. Когда смотришь на презентации и скринкасты, все
выглядит, как новый майбах&amp;#8230;&amp;#8203; но салон местами как у новой девятки =) На данный момент более предпочтительной я считаю связку &lt;code&gt;Jenkins + Allure&lt;/code&gt;. Степень красивости,
возможно, ниже, но информативность и легковесность выше.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Киллер-фичей Report Portal является алгоритм, который умеет автоматически анализировать результаты фейлов
и маркать их как баг/ не баг. Секунду! Allure умеет это делать еще с первых дней. Более того, для правильно построенной системы автоматизации время на разбор занимает пару минут, так
как на своих проектах я предпочитаю принцип &lt;code&gt;Zero failed tests&lt;/code&gt;. У нас не очень большой проект: суммарный объем тестов, которые пишут автоматизаторы, до 200. Мы стараемся всегда держать тесты зелеными и любой фейл становится причиной разбирательств.
Именно поэтому такая штука, как репорт портал, нам не нужна.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Кому может пригодиться Report Portal?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я думаю, что такую штуку нужно внедрять на проектах с оооочень большим объемом тестов и огромными командами,
которые ковыряются в упавших тестах и тратят много времени на стабилизацию.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот такие впечатления от Report Portal. Если вы уже успели его попробовать или успешно внедрили, пишите в комментариях - будем обсуждать и давать фидбек разработчикам. Ведь
опенсорс успешным делает только комьюнити.
В следующий раз в вам расскажу об инструменте &lt;strong&gt;Selenoid&lt;/strong&gt;, но это уже будет совсем другая история. Па-па =)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              JUnit 5 vs TestNG battle video
          </title>
          <link>http://automation-remarks.com/2017/selenium-camp-2017/index.html</link>
          <pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/selenium-camp-2017/index.html</guid>
          <description>
                        Видео моего выступления с SeleniumCamp 2017
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Запись моего доклада:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vRmVZV0fjK8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Как писать проверки быстро
          </title>
          <link>http://automation-remarks.com/2017/assert-generation/index.html</link>
          <pubDate>Sat, 8 Apr 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/assert-generation/index.html</guid>
          <description>
                        О способах ускорить процесс написания проверок в автотестах
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сегодня продолжу разговор о том, как &lt;a href=&quot;http://automation-remarks.com/2017/code-generation/index.html&quot;&gt;писать автотесты быстро&lt;/a&gt;.
Мы уже разобрались, как очень быстро и эффективно конвертировать REST ответы в Java объекты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пришло время научиться так же быстро проверять данные, которые хранятся в этих объектах. Не так давно я делился
&lt;a href=&quot;http://automation-remarks.com/davaitie-poghovorim-pro-asserty/index.html&quot;&gt;подборкой полезных библиотек&lt;/a&gt;, которые
значительно упрощают процесс написания проверок в тестах.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще пару лет назад для написания ассертов я активно использовал библиотеку &lt;a href=&quot;http://www.vogella.com/tutorials/Hamcrest/article.html&quot;&gt;Hamcrest Matchers&lt;/a&gt;.
Классная библиотека, которая отлично справляется со своими задачами, пока дело не доходит до создания матчеров
для своих кастомных классов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот, к примеру, у нас есть класс:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;class User{
    String name;
    String password;
    List&amp;lt;String&amp;gt; phoneNumbers;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Используя Hamcrest, мы можем написать:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public void testUserInfo(){
    User user = when().get(&quot;/users&quot;).then().extract().response().as(User.class);

    assertThat(user.name, equalTo(&quot;name&quot;))
    assertThat(user.password, equalTo(&quot;test&quot;))
    assertThat(user.phoneNumbers, hasItem(&quot;+1(234)567&quot;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Достаточно неплохо, если вам нужно написать такой код в одном тесте и для одного объекта. Hamcrest позволяет
&lt;a href=&quot;http://automation-remarks.com/custom-matcher/index.html&quot;&gt;писать кастомные матчеры&lt;/a&gt;. Но писать матчеры руками - занятие унылое.
Поверьте мне, я пробовал. Польза в этом одна: вы начинаете понимать, как библиотека работает внутри. Благо, в Github
можно найти &lt;a href=&quot;https://github.com/yandex-qatools/hamcrest-pojo-matcher-generator&quot;&gt;утилиту&lt;/a&gt;, которая позволяет генерировать матчеры.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Работает она достаточно просто: берем свой класс, ставим над нужными полями аннотацию &lt;code&gt;@GenerateMatcher&lt;/code&gt;, запускаем генерилку
и на выходе получаем готовые матчеры.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Используя эту супервозможность, мы можем написать такой код:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public void testUserInfo(){
    User user = when().get(&quot;/users&quot;).then().extract().response().as(User.class);

    assertThat(user, hasName(&quot;name&quot;))
    assertThat(user, hasPassword(&quot;test&quot;))
    assertThat(user, hasPhoneNumberItem(&quot;+1(234)567&quot;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хорошо. Но идти и руками ставить аннотации - скукотища! Да и генерилка работает только в связке с Maven.
Можно сделать гораздо круче, но для этого нужно сменить знакомый нам Hamcrest на Assertj.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отмечу, что синтаксис &lt;a href=&quot;http://joel-costigliola.github.io/assertj/&quot;&gt;assertj&lt;/a&gt; отличается от того, который мы писали с Hamcrest.
Поэтому при переходе вам нужно будет переписать много кода.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assertj тоже позволяет генерировать матчеры для Java классов. Радует, что для этого есть плагины как для Maven, так и для Gradle.
В документации &lt;a href=&quot;http://joel-costigliola.github.io/assertj/assertj-assertions-generator.html&quot;&gt;достаточно хорошо описаны&lt;/a&gt; способы подключения плагинов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;С помощью assertj assertion generator мы можем генерировать матчеры для любого класса, просто указав путь к пакету, без
какой-либо надобности ставить дополнительные аннотации. Для меня это архиважно, так как не всегда есть возможность
менять код доменных объектов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте посмотрим, как изменится код тестов при использовании assertj:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public void testUserInfo(){
    User user = when().get(&quot;/users&quot;).then().extract().response().as(User.class);

    UserAssert.assertThat(user)
                .hasName(&quot;user&quot;)
                .hasPassword(&quot;test&quot;)
                .hasPhoneNumberItem(&quot;+1(234)567&quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Чем такой подход круче?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вы генерируете 80% кода автоматически. Остается написать вызов нужных методов RestAssured и соответствующих проверок.
В случае, если ваша доменная модель меняется - скажем, какое-то поле удаляется или меняет тип - все, что нужно будет сделать, -
это вызвать &lt;strong&gt;./gradlew generateJsonSchema2Pojo assertjGen&lt;/strong&gt; и код автоматически обновится. Вам останется немного подправить тесты.
Я такой подход успешно использую на своем текущем проекте - работает просто шикарно. Рекомендую попробовать - вам понравится.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Как писать автотесты быстро
          </title>
          <link>http://automation-remarks.com/2017/code-generation/index.html</link>
          <pubDate>Sun, 26 Mar 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/code-generation/index.html</guid>
          <description>
                        О способах ускорить процесс написания автотестов
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Спешу поделиться очередной порцией полезностей. Сегодня хочу поговорить о подходах,
которые позволяют экономить время создания автотестов. Задумывались ли вы когда-нибудь
о скорости написания автотестов? Сколько времени вы тратите на их создание?
Я для себя определил: автотесты - это такая штука, которую мы должны уметь
быстро создать и быстро выбросить. Насчет выбрость - это понятно, а вот насчет создать?
Есть ли способы ускорить процесс создания автотестов? О том, как я ускоряю процесс написания
UI тестов, я уже писал в заметке о &lt;a href=&quot;http://automation-remarks.com/2017/locators/index.html&quot;&gt;хороших локаторах&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой же заметке хочу поделиться секретами тестирования REST сервисов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я уже писал о &lt;a href=&quot;http://automation-remarks.com/rest-clients/index.html&quot;&gt;полезных библиотеках&lt;/a&gt; для тестирования REST и, тем не менее, у меня есть еще парочка советов, которые
могут вам пригодиться.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Первый секрет: я использую &lt;strong&gt;Rest Assured&lt;/strong&gt; и точка. Отличный инструмент, который полностью
покрывает все потребности автоматизаторов. С &lt;strong&gt;Rest Assured&lt;/strong&gt; писать тесты - одно удовольствие.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;@Test
public void shouldGetLuke() {
        when().get(&quot;http://swapi.co/api/people/1/&quot;)
                .then().statusCode(200)
                .and()
                .assertThat()
                .body(&quot;name&quot;, equalTo(&quot;Luke Skywalker&quot;));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все вроде отлично, но мне лично больше нравится конвертировать json ответы от сервера в
Java объекты. Но у такого подхода есть недостаток - нужно описывать json структуру в виде Java POJO.
Достаточно тоскливое занятие, особенно если нужно обрабатывать большие ответы. Скажем, ответ от сервера
из примера выше будет выглядеть так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;{
    &quot;name&quot;: &quot;Luke Skywalker&quot;,
    &quot;height&quot;: &quot;172&quot;,
    &quot;mass&quot;: &quot;77&quot;,
    &quot;hair_color&quot;: &quot;blond&quot;,
    &quot;skin_color&quot;: &quot;fair&quot;,
    &quot;eye_color&quot;: &quot;blue&quot;,
    &quot;birth_year&quot;: &quot;19BBY&quot;,
    &quot;gender&quot;: &quot;male&quot;,
    &quot;homeworld&quot;: &quot;http://swapi.co/api/planets/1/&quot;,
    &quot;films&quot;: [
        &quot;http://swapi.co/api/films/6/&quot;,
        &quot;http://swapi.co/api/films/3/&quot;,
        &quot;http://swapi.co/api/films/2/&quot;,
        &quot;http://swapi.co/api/films/1/&quot;,
        &quot;http://swapi.co/api/films/7/&quot;
    ],
    &quot;species&quot;: [
        &quot;http://swapi.co/api/species/1/&quot;
    ],
    &quot;vehicles&quot;: [
        &quot;http://swapi.co/api/vehicles/14/&quot;,
        &quot;http://swapi.co/api/vehicles/30/&quot;
    ],
    &quot;starships&quot;: [
        &quot;http://swapi.co/api/starships/12/&quot;,
        &quot;http://swapi.co/api/starships/22/&quot;
    ],
    &quot;created&quot;: &quot;2014-12-09T13:50:51.644000Z&quot;,
    &quot;edited&quot;: &quot;2014-12-20T21:17:56.891000Z&quot;,
    &quot;url&quot;: &quot;http://swapi.co/api/people/1/&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Можно потратить какое-то время, чтобы описать такую структуру с помощью Java, но можно пойти
более оптимальным путем и сгенерировать нужные нам классы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Секрет второй: Как? Все очень просто: есть отличный инструмент &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;json2pojo&lt;/a&gt;.
Берем свой json, вставляем в текстовое поле, жмем кнопку - вжууух! Классы сгенерировались. Копируем их
себе в проект и наслаждаемся.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вы заметили недостатки? Слишком много ручной работы - копировать туда, потом обратно. Можно же это
заавтоматизировать. Для этого есть отличнейший плагин для &lt;a href=&quot;https://github.com/joelittlejohn/jsonschema2pojo/tree/master/jsonschema2pojo-gradle-plugin&quot;&gt;Gradle&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Подключаем его себе в проект:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;apply plugin: &apos;java&apos;
apply plugin: &apos;jsonschema2pojo&apos;
buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath &apos;org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:${js2p.version}&apos;
  }
}

repositories {
  jcenter()
}

dependencies {
  compile &apos;commons-lang:commons-lang:2.6&apos;
  compile &apos;javax.validation:validation-api:1.1.0.CR2&apos;
  compile &apos;com.fasterxml.jackson.core:jackson-databind:2.1.4&apos;
}

jsonSchema2Pojo {
  // Location of the JSON Schema file(s). This may refer to a single file or a directory of files.
  source = files(&quot;${sourceSets.main.output.resourcesDir}/json&quot;)

  // Target directory for generated Java source files. The plugin will add this directory to the
  // java source set so the compiler will find and compile the newly generated source files.
  targetDirectory = file(&quot;${project.buildDir}/generated-sources/js2p&quot;)

  // Package name used for generated Java classes (for types where a fully qualified name has not
  // been supplied in the schema using the &apos;javaType&apos; property).
  targetPackage = &apos;&apos;

  // The type of input documents that will be read. Supported values:
  //  - jsonschema (schema documents, containing formal rules that describe the structure of json data)
  //  - json (documents that represent an example of the kind of json data that the generated Java types
  //          will be mapped to)
  sourceType = &apos;json&apos;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В папку &lt;code&gt;src/java/resources/json&lt;/code&gt; складываем нужные нам json файлы. Открываем консольку
и выполняем команду:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;./gradlew generateJsonSchema2Pojo&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В папке &lt;code&gt;build/generated-sources&lt;/code&gt; появляются сгенерированные классы со всеми нужными нам атрибутами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь мы можем спокойно перенести их в нужный нам пакет и использовать в тестах:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;@Test
public void shouldGetLuke() {
        Person = when().get(&quot;http://swapi.co/api/people/1/&quot;)
                .then().extract().body().as(Person.class)
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Получаем полноценнный Java объект, заполненный данными, с которым мы вольны делать все что угодно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Надеюсь, мои советы будут полезными для вас и вы, как и я, будете тратить сэкономленное время на написание тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В следующий раз я покажу вам, как можно экономить время на написании assert`ов.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              pipenv или замена pip + virtualenv
          </title>
          <link>http://automation-remarks.com/2017/pipenv/index.html</link>
          <pubDate>Sat, 11 Mar 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/pipenv/index.html</guid>
          <description>
                        Заметка об интересной Python библиотеке
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Занесло меня в питонячий мир. Эта заметка посвящена небольшой, но очень полезной утилите,
которая значительно упрощает управление виртуальными средами и менеджмент зависимостями.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ранее я уже писал заметку &lt;a href=&quot;http://automation-remarks.com/2017/python-world-after-java/index.html&quot;&gt;о том, как выжить в Python мире после Java&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Стандартный сценарий создания пайтон проекта:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;mkdir python_project
cd python_project
virtualenv .venv
source .venv/bin/activate
pip install webdriver_mamanger selenium requests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На первый взгляд, все достаточно просто и понятно. Но на самом деле есть несколько неудобств,
которые поначалу не вызывают особого дискомфорта, но с течением времени начинают надоедать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Зависимости, которые вы установили с помощью &lt;code&gt;pip&lt;/code&gt;, не записываются в &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В пайтон проектах принято хранить все необходимые зависимости в файле &lt;code&gt;requirements.txt&lt;/code&gt;.
Записывать их туда можно руками, а потом сделать &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;.
В целом вроде бы не плохо, но бывает, что поставил зависимость с помощью &lt;code&gt;pip install&lt;/code&gt;, но забыл
прописать его в &lt;code&gt;requirements.txt&lt;/code&gt; и на CI все попадало.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Можно сначала наставить зависимостей с помощью &lt;code&gt;pip&lt;/code&gt;, а потом сделать &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;.
В таком случае в файл &lt;code&gt;requirements.txt&lt;/code&gt; записываются все пакеты, которые установлены, и их версия жестко фиксируется.
В общем удобно, но, если мы хотим всегда скачивать и устанавливать последнюю версию
&lt;code&gt;selenium&lt;/code&gt;, нам нужно идти и ручками править файл.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще одним неудобством является выполнение команды активации &lt;strong&gt;virtualenv&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;source .venv/bin/activate&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Особенно если вам нужно переходить из одного проекта в другой. К счастью, эту проблему можно
частично решить, используя магический bash скрипт:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock virtualenv-auto-activate sh&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;#!/bin/bash
# virtualenv-auto-activate.sh
#
# Installation:
#   Add this line to your .bashrc or .bash-profile:
#
#       source /path/to/virtualenv-auto-activate.sh
#
#   Go to your project folder, run &quot;virtualenv .venv&quot;, so your project folder
#   has a .venv folder at the top level, next to your version control directory.
#   For example:
#   .
#   ├── .git
#   │   ├── HEAD
#   │   ├── config
#   │   ├── description
#   │   ├── hooks
#   │   ├── info
#   │   ├── objects
#   │   └── refs
#   └── .venv
#       ├── bin
#       ├── include
#       └── lib
#
#   The virtualenv will be activated automatically when you enter the directory.

# Check for virtualenvwrapper
if type workon &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then
  VENV_WRAPPER=true
else
  VENV_WRAPPER=false
fi

function _virtualenv_auto_activate() {
    if [ -e &quot;.venv&quot; ]; then
        # Check for symlink pointing to virtualenv
        if [ -L &quot;.venv&quot; ]; then
          _VENV_PATH=$(readlink .venv)
          _VENV_WRAPPER_ACTIVATE=false
        # Check for directory containing virtualenv
        elif [ -d &quot;.venv&quot; ]; then
          _VENV_PATH=$(pwd -P)/.venv
          _VENV_WRAPPER_ACTIVATE=false
        # Check for file containing name of virtualenv
        elif [ -f &quot;.venv&quot; -a $VENV_WRAPPER = &quot;true&quot; ]; then
          _VENV_PATH=$WORKON_HOME/$(cat .venv)
          _VENV_WRAPPER_ACTIVATE=true
        else
          return
        fi

        # Check to see if already activated to avoid redundant activating
        if [ &quot;$VIRTUAL_ENV&quot; != $_VENV_PATH ]; then
            if $_VENV_WRAPPER_ACTIVATE; then
              _VENV_NAME=$(basename $_VENV_PATH)
              workon $_VENV_NAME
            else
              _VENV_NAME=$(basename `pwd`)
              VIRTUAL_ENV_DISABLE_PROMPT=1
              source .venv/bin/activate
              _OLD_VIRTUAL_PS1=&quot;$PS1&quot;
              PS1=&quot;($_VENV_NAME)$PS1&quot;
              export PS1
            fi
            echo Activated virtualenv \&quot;$_VENV_NAME\&quot;.
        fi
    fi
}

export PROMPT_COMMAND=_virtualenv_auto_activate
if [ -n &quot;$ZSH_VERSION&quot; ]; then
  function chpwd() {
    _virtualenv_auto_activate
  }
fi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Эту всю радость нужно сохранить в файл &lt;strong&gt;.virtualenv-auto-activate.sh&lt;/strong&gt;. Я использую &lt;a href=&quot;http://ohmyz.sh/&quot;&gt;ohmyzsh&lt;/a&gt;,
поэтому в файл .zshrc я должен добавить такую строчку:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;source .virtualenv-auto-activate.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После этого &lt;code&gt;virtualenv&lt;/code&gt; будет автоматически активироваться при переходе в папку с проектом.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот как-то так я и жил, пока не увидел в &lt;a href=&quot;https://twitter.com/s_pirogov&quot;&gt;Twitter&lt;/a&gt; ссылку на
проект &lt;a href=&quot;http://docs.pipenv.org/en/latest/&quot;&gt;pipenv&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pipenv - это обертка над &lt;code&gt;pip virtualenv и  Pipfile&lt;/code&gt;. Он значительно упрощает работу с проектом.
С его помощью мы можем создавать виртуальные среды и устанавливать зависимости. Но при этом
будет создаваться &lt;code&gt;Pipfile&lt;/code&gt;, в который все установленные зависимости будут заноситься автоматически:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;pipenv --three
pipenv shell
pipenv install webdriver_mamanger selenium requests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pipfile:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;[[source]]
url = &quot;https://pypi.org/simple&quot;
verify_ssl = true

[packages]
requests = &quot;*&quot;
webdriver_manager = &quot;*&quot;
selenium = &quot;*&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Это очень удобно! Правда, чтобы научиться им пользоваться, мне потребовалось задать пару-тройку
вопросов разработчикам. Увы, в документации некоторые вещи не совсем очевидны. Итак:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;1) Если вы хотите, чтобы &lt;code&gt;pipenv&lt;/code&gt; создавал папку &lt;code&gt;.venv&lt;/code&gt; непосредственно в корне вашего
проекта, нужно в файл &lt;code&gt;.zshrc&lt;/code&gt; прописать такую строчку:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;export PIPENV_VENV_IN_PROJECT=1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;2) Чтобы подключить автодополнение в консоли, нужно в .zshrc написать&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;eval &quot;$(env _PIPENV_COMPLETE=source-zsh pipenv)&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3) Я долго не мог скрестить &lt;code&gt;pipenv&lt;/code&gt; и &lt;code&gt;tox&lt;/code&gt;. Оказалось, что обязательно нужно прописывать
переменную &lt;code&gt;HOME&lt;/code&gt; через &lt;code&gt;passenv&lt;/code&gt; &lt;a href=&quot;https://github.com/kennethreitz/pipenv/issues/256&quot;&gt;Github issue&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tox.ini&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;[tox]
envlist=py27,py34

[testenv]
passenv = HOME
deps =
    pipenv
commands=
    pipenv lock
    pipenv install --dev
    pipenv run py.test&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;4) pipenv не мог установить некоторые зависимости &lt;a href=&quot;https://github.com/kennethreitz/pipenv/issues/261&quot;&gt;Github issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;5) При запуске тестов через tox в Travis CI я получал ошибку
&lt;code&gt;In --require-hashes mode, all requirements must have their versions pinned with ==.&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Оказалось, что нужно сначала выполнить команду &lt;code&gt;pipenv lock&lt;/code&gt; и закомитить файл &lt;code&gt;Pipfile.lock&lt;/code&gt;
в репозиторий.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Решив все эти проблемы, я успешно перевел проект &lt;a href=&quot;https://github.com/SergeyPirogov/webdriver_manager&quot;&gt;webdriver_manager&lt;/a&gt; на &lt;code&gt;pipenv&lt;/code&gt;.
Штука классная - сам использую и вам рекомендую на нее посмотреть.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Мой взгляд на &quot;хорошие&quot; локаторы в Selenium
          </title>
          <link>http://automation-remarks.com/2017/locators/index.html</link>
          <pubDate>Sat, 4 Mar 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/locators/index.html</guid>
          <description>
                        Почему я не сильно много времени трачу на написание локаторов
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пост о том, как я пересмотрел свое отношение к локаторам и при этом никто не пострадал.
Всем начинающим автоматизаторам советуют изучать css и xpath локаторы. Без знания локаторов
сложно писать UI автотесты. Большинство курсов, книг и статей глаголят, что вот, мол, нужно
уметь писать &quot;хорошие&quot; локаторы. При этом понятие &quot;хороший локатор&quot; не имеет четкого опеределения.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте посморим, например, какой из этих локаторов &quot;хорош&quot;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;1) #push &amp;gt; article:nth-child(1) &amp;gt; div
2) //*[@id=&quot;push&quot;]/article[1]/div&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Считаю, что вариант #1 лучше, так как он более лаконичный, да и вообще я
предпочитаю использовать css локаторы вместо xpath. Почему?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще пример:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;1) article.post
2) //article[@class=&apos;post &apos;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Здесь четко видно, что css более читабельный и писать его проще. Вывод: css локаторы более предпочтительны
для использования в наших Selenium тестах.
Казалось бы, вопрос можно закрывать и расходиться делать проекты, но мы же так и не определили
понятие &quot;хороший локатор&quot;. Приведенные выше локаторы хороши, но достаточно ли, чтобы
претендовать на звание &quot;лучший локатор&quot;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Когда я только начинал заниматься автоматизацией, следуя всем наставлениям своих менторов,
старался учить и писать максимально хорошие локаторы. Радовало, что в то время в файрфоксе
еще работали Firebug и FirePath. Но проект мой открывался только в IE8 и мне такие блага были недоступны.
Поэтому я работал в убогом &lt;code&gt;Internet Explorer Dev Tools&lt;/code&gt; и тогда еще парился по
поводу &quot;хороших&quot; локаторов.
После у меня был проект, на котором UI рендерился с помощью фреймворка &lt;code&gt;Vaadin&lt;/code&gt;. Тогда я
не стеснялся просто скопировать локатор, который мне предлагал FirePath и без оглядки его использовать.
Но вопрос &quot;хороших локаторов&quot; по-прежнему не давал покоя.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Локатор получался местами длинным:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;.v-verticallayout.v-verticallayout-invoice-detail-view-main.invoice-detail-view-main

или

//*[@id=&apos;ordermgmtui-1932176413&apos;]//table/tbody/tr[2]/td[@class=&apos;v-formlayout-contentcell&apos;]/input&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но эти локаторы были хороши, потому что работали стабильно. Почему я не сильно старался
сделать их лучше или переписать? А зачем? Они дались мне практически даром: два клика в браузере
и все. Важно понимать, что локаторы - это не нечто архиавжное. Иногда говорят: &quot;Мы так пишем
локаторы, чтобы тесты были стабильнее, вдруг завтра верстка поменяется&amp;#8230;&amp;#8203;&quot;
Если верстка поменяется, вы сделаете два клика и поменяете локатор.
Нет смысла сейчас тратить 5-10 минут на то, что может никогда и не случиться.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Именно поэтому я перестал обращать внимание на возгласы по поводу правильных и красивых
локаторов. Правый клик мышкой на элементе &amp;#8594; Copy selector и поехали.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пример c &lt;a href=&quot;http://inbox.google.com&quot; class=&quot;bare&quot;&gt;http://inbox.google.com&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;def setup_module(m):
    (LoginPage()
        .open()
        .login_as(email,password))

def test_can_add_reminder():
    (MainPage()
     .add_new_reminder(&quot;call Mama&quot;)
     .reminder.should(have.text(&quot;Call Mama&quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вполне читабельные тесты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Реализации PageObject:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;from selene.api import *

class LoginPage(object):
    def __init__(self):
        self.email = s(&quot;#Email&quot;)
        self.next_btn = s(&quot;#next&quot;)
        self.password = s(&quot;#Passwd&quot;)
        self.sign_in_btn = s(&quot;#signIn&quot;)
        self.city_input = s(&quot;#answer&quot;)
        self.ready_btn = s(&quot;#submit&quot;)


    def open(self):
        browser.visit(&quot;https://inbox.google.com/&quot;)
        return self

    def login_as(self, email, password):
        self.email.send_keys(email)
        self.next_btn.click()
        self.password.send_keys(password)
        self.sign_in_btn.click()

class MainPage(object):

    def __init__(self):
        self.plus_btn =  s(&quot;#aVMuZe &amp;gt; div.nPQzwd.iP &amp;gt; div.jB &amp;gt; button&quot;)
        self.create_new_reminder_btn = s(&quot;#aVMuZe &amp;gt; div.nPQzwd.iP &amp;gt; div.jp &amp;gt; div.S &amp;gt; button&quot;)
        self.reminder_input = s(&quot;body &amp;gt; div.eG.f &amp;gt; div &amp;gt; div.nY.na &amp;gt; div.od &amp;gt; div.k0 &amp;gt; div&quot;)
        self.reminder_save_btn = s(&quot;body &amp;gt; div.eG.f &amp;gt; div &amp;gt; div.nY.na &amp;gt; div.od &amp;gt; div.ft &amp;gt; div.dy.qj.ev&quot;)
        self.reminder = s(&quot;#Nr &amp;gt; div &amp;gt; div &amp;gt; div.No &amp;gt; div.bg.summTaskTitle &amp;gt; span&quot;)


    def add_new_reminder(self, text):
        self.plus_btn.hover()
        self.create_new_reminder_btn.click()
        self.reminder_input.send_keys(text)
        self.reminder_save_btn.click()
        return self&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Да, некоторые локаторы длинные и нечитабельные, но они &quot;хорошие&quot;, потому что они работают стабильно и дались мне практически даром.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Вывод:&lt;/strong&gt; Для меня &quot;лучший локатор&quot; - тот, который работает стабильно и на создание
которого я потратил максимум 10 секунд. Из личных наблюдений: &lt;strong&gt;Chrome Dev Tools&lt;/strong&gt;
позволяет в &lt;strong&gt;80%&lt;/strong&gt; случаев получать именно такие локаторы.
Поэтому я не стесняюсь просто брать и копировать локатор прямо оттуда.
Мой опыт показывает, что гораздо важнее уметь быстро создавать тесты, чем изначально
тратить кучу времени на локаторы, которые вы все равно рано или поздно будете менять.
И все же обязательно нужно думать головой и принимать только взвешенные решения.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              SeleniumCamp 2017: ретроспектива
          </title>
          <link>http://automation-remarks.com/2017/sel-camp-2017-retro/index.html</link>
          <pubDate>Sun, 26 Feb 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/sel-camp-2017-retro/index.html</guid>
          <description>
                        О конференции
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Спешу поделиться впечатлениями от участия в конференции SeleniumCamp 2017.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/scamp2017speaker.jpg&quot; alt=&quot;scamp2017speaker&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом году формат конференции был изменен:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;новая локация - КВЦ &quot;Парковый&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;количество участников 500+ человек&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;три параллельных секции&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;добавлены билеты &quot;для начинающих&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу заметить, что эти изменения пошли только на пользу конференции. У посетителей появился более широкий выбор докладов.
Можно было пойти на главную сцену и послушать иностранных гостей, посетить секцию B, чтобы услышать доклады на более узкие темы
о мобильной автоматизации и автоматизации на JavaScript и PHP, либо же пойти в секцию С и послушать &quot;доклады для начинающих&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Помимо того, что выступал с докладом, я был в составе программного комитета, поэтому не все доклады видел вживую. Потому
опишу лишь те, которые успел посетить:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Locution: Grading Your Selenium Tests (Marcus Merrell)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Достаточно интересный доклад, в котором Marcus описал подход к оценке качества автотестов. Очень рекомендую посмотреть его в записи -
наталкивает на интересные мысли.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Smart Integration Tests with Smart Mocks&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Доклад об &lt;strong&gt;open-source&lt;/strong&gt; решении &lt;strong&gt;Smartmock&lt;/strong&gt;. Если вам нужно мокать SOAP сервисы - вам сюда.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;ReportPortal.io – visibility of test automation status, metrics, AI in testing, open source&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Очередной доклад от ребят из EPAM об их &lt;strong&gt;open-source&lt;/strong&gt; поделке. Тем, кто еще не слышал о ReportPortal, настоятельно рекомендую
посмотреть запись, чтобы понять, нужно оно вам или нет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Excuse me, sir, do you have a moment to talk about tests in Kotlin?&lt;/strong&gt;
Очень классный доклад о языке Kotlin. Если вы хотите узнать больше об этом языке и понять, как его можно использовать для написания тестов, вам следует посмотреть запись.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;QA Livecoding Battle “Typed Element Framework (JDI) VS Untyped Elements Framework (Selenide)”&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Доклад, которого многие ждали, в реальности оставил неоднозначное впечатление. В течение первых 15 минут казалось,
что докладчики не успели договориться и синхронизировать свои действия на сцене. Но в целом вышло неплохо.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Better Bullshit Driven Development&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Доклад, в котором  Iuliia Iliukhina еще раз рассказала о недостатках BDD тестирования. В докладе показан
личный опыт ребят из Automician и их подход к решению данной проблемы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Extending GitHub Flow with practical testing&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Посетить этот доклад лично мне не удалось, так как я выступал в параллельном потоке. Но из разговоров с Андреем Солдатенко в кулуарах следует, что доклад должен быть
очень полезным. Сам жду записи ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;How does Java 8 exert hidden power on Test Automation?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Очень содержательный и полезный доклад, из которого вы можете узнать о возможностях Java 8. Было много реальных примеров, которые вы
можете использовать на своих проектах.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;TestNG vs JUnit 5 battle&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этот доклад я не просто посетил - я с ним выступал =) Перед докладом меня многие упрекали в том, что батл - это обязательно два
человека на сцене с разными взглядами. Да, я очень хотел сделать этот доклад вместе с Андреем Солнцевым, но, увы, он не смог приехать в Киев.
Я решил не искать замену, а делать доклад самостоятельно. Почему нет? Есть же театр одного актера - значит может быть и баттл с одним спикером.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом я очень доволен результатом. Судя по первым отзывам, всем понравилось. Некоторые участники подходили ко мне лично и говорили, что это лучший доклад за
два дня. Теперь мне и самому интересно посмотреть запись =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/scamp2017feedback.jpg&quot; alt=&quot;scamp2017feedback&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;SeleniumCamp&lt;/strong&gt; закончился, но мое участие в конференциях только начинается. Встретимся с вами 22 апреля на &lt;strong&gt;IT Weekend Lviv&lt;/strong&gt;.
А также спешу делиться: я в составе программного комитета QAFest 2017, так что вы знаете, к кому идти подавать доклад ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P/S&lt;/strong&gt; Записи докладов уже доступны и они совсем скоро будут опубликованы на официальном youtube канале конференции.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Lombok как способ трансформировать test automation project
          </title>
          <link>http://automation-remarks.com/2017/lombok/index.html</link>
          <pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/lombok/index.html</guid>
          <description>
                        Рассказ о библиотеке Lombok
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Решил написать заметку о применении &lt;strong&gt;Lombok&lt;/strong&gt; для построения автоматизации тестирования.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://projectlombok.org/&quot;&gt;Lombok&lt;/a&gt; - это библиотека, с помощью которой вы можете сократить количество шаблонного
кода, который нужно писать на Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Чем Lombok может помочь автоматизатору?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Применить ломбок можно разными способами - от уменьшения кода для простых Pojo, до использования Extension Methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Каноническая Java не поддерживает extension methods, хотя в языках &lt;strong&gt;Groovy&lt;/strong&gt;, &lt;strong&gt;Kotlin&lt;/strong&gt; и &lt;strong&gt;C#&lt;/strong&gt; они есть.
Можно долго дискутировать на предмет того, нужны они или нет, но после того, как я попробовал их применять в Groovy, в Джаве мне
их не хватало.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что такое extension method?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Это возможность добавлять методы в уже существующие классы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скажем, у нас есть  класс WebElement, у которого есть свой API. Вот там нету метода&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;shouldHave(String text)&lt;/code&gt;, а нам бы очень хотелось иметь такую штуку.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;С помощью Lombok мы можем такой метод легко добавить:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public class WebElementExt{

    public static void shouldHave(WebElement el, String text){
          assertEquals(el.getText(),text)
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем используем в наших тестах:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;@ExtensionMethod(WebElementExt.class)
class Test{

   @Test
   void testWithExt(){
        Webdriver driver = new ChromeDriver();
        driver.findElement(By.css(&quot;.header&quot;)).shouldHave(&quot;MainPage&quot;)
   }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Легко и просто. Это лучше, чем писать декоратор, который будет отличаться по типу класса.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если брать более сложный пример, то мы можем написать экстеншн и для самого драйвера:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public class DriverExtension {

     public static void goTo(WebDriver driver, String url) {
       driver.get(url);
     }

     public static &amp;lt;T extends BasePage&amp;gt; T open(WebDriver driver, Class&amp;lt;? extends BasePage&amp;gt; tClass) {
       try {
         BasePage page = tClass.getDeclaredConstructor(WebDriver.class).newInstance(driver);
         driver.get(page.getUrl());
         return (T) page;
       } catch (InstantiationException e) {
         e.printStackTrace();
       } catch (IllegalAccessException e) {
         e.printStackTrace();
       } catch (NoSuchMethodException e) {
         e.printStackTrace();
       } catch (InvocationTargetException e) {
         e.printStackTrace();
       }
       return null;
     }

     public static UIElement $(WebDriver driver, String locator) {
       return new UIElement(new Locator(By.cssSelector(locator), driver));
     }

     public static UIElement $(WebDriver driver, By locator) {
       return new UIElement(new Locator(locator, driver));
     }
   }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Класс PageObject:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;abstract class BasePage{

  protected WebDriver browser;

  public BasePage(WebDriver driver){
    this.browser = driver;
  }

  public abstract String getUrl();
}

@ExtensionMethod(DriverExtension.class)
public class MainPage extends BasePage{

  @Getter
  private String url = &quot;http://automation-remarks.com/workshop&quot;;

  @Getter
  private UIElement mainLink;

  public MainPage(WebDriver driver) {
    super(driver);
    this.mainLink = driver.$(&quot;#nav &amp;gt; div.nav-panel &amp;gt; a.main_link &amp;gt; span&quot;);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Класс UIElement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public class UIElement {

  private Locator locator;

  public UIElement(Locator locator) {
    this.locator = locator;
  }

  public WebElement element() {
    return locator.find();
  }

  public void should(String text) {
    boolean res = element().getText().equals(text);
    assert res;
  }

  public void click() {
    element().click();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И наконец мы можем использовать все это в наших тестах:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;class Advanced{

  @Test
  void test(){
       val browser = Browser.chrome();
       MainPage mp = browser.open(MainPage.class);
       mp.getMainLink().click();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вы можете применять такой подход в своем существующем фреймворке практически безболезненно.
Правда, есть одно НО - Lombok содержит определенный уровень магии, которую вы не будете понимать. Да и
плагин для Intelij IDEA пока что не полностью поддерживает все фишки Lombok. Но, несмотря на это, я
рекомендую обратить внимание на эту библиотеку и попробовать применить ее у себя на проекте.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Java Video Recorder поддержка Junit 5
          </title>
          <link>http://automation-remarks.com/2017/video-recroder-junit5/index.html</link>
          <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/video-recroder-junit5/index.html</guid>
          <description>
                        Чем хорош JUnit 5
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! В преддверии конференции SeleniumCamp, на которой я выступлю
с докладом &quot;JUnit4 vs TestNG battle&quot;, решил немного приоткрыть для вас завесу тайны.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пока готовился к докладу и исследовал возможности JUnit 5, решил
сделать поддержку &lt;a href=&quot;https://github.com/SergeyPirogov/video-recorder-java&quot;&gt;Java Video Recorder&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Раньше для подключения записи видео в проект с тестами на JUnit 4 нужно было написать такой код:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;class TestVideo{

   @Rule
   public VideoRule rule = VideoRule();

   @Test
   @Tag(&quot;Flaky&quot;)
   @Video
   public void test(){
      open(&quot;&quot;);
      $(&quot;&quot;)
   }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Достаточно неплохо, но с выходом JUnit 5 все станет еще лучше.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В пятой версии JUnit сделали поддержку еще большего количества &lt;strong&gt;extension points&lt;/strong&gt;, а также добавили
поддержку композитных аннотаций.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Естественно, у меня возникло желание попробовать все эти возможности, и теперь Video Recorder
полноценно поддерживает &lt;strong&gt;JUnit 5&lt;/strong&gt;. Хорошая новость - больше не нужно писать VideoRule&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;class TestVideo{

   @Test
   @Tag(&quot;Flaky&quot;)
   @Video
   public void test(){
      open(&quot;&quot;);
      $(&quot;&quot;)
   }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Может показаться, что изменение не особо заметно - стало аж на две строчки меньше, но на самом
деле появились скрытые возможности.
Используя поддержку композитных аннотаций, вы можете сделать код еще более компактным.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
@Video
@Tag(&quot;Flaky&quot;)
@Test
public @interface FlakyTest {}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Код теста в таком случае станет кратким и более читабельным:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;class TestVideo{

   @FlakyTest
   public void test(){
      open(&quot;&quot;);
      $(&quot;&quot;)
   }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Более того, вы сможете запускать тесты по тегу &quot;Flaky&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь адепты JUnit 5 смогут без боязни переходить на новую версию.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P.S&lt;/strong&gt; Если вы хотите еще больше постичь JUnit 5 и узнать, сможет ли он побить TestNG,
жду вас на конференции SeleniumCamp =)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Как выжить в мире Python после Java
          </title>
          <link>http://automation-remarks.com/2017/python-world-after-java/index.html</link>
          <pubDate>Thu, 5 Jan 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/python-world-after-java/index.html</guid>
          <description>
                        Про мой опыт пугружения в автоматизацию на Python
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Праздники прошли - пора браться за ум. Решил поделиться своим опытом автоматизации
на Python после долгих лет работы с Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://3.bp.blogspot.com/-KsiDvwALB_s/VTOUKDqUBTI/AAAAAAAAEUw/Dr94aYs-3bY/s1600/Python%2Bvs%2BJava%2B-%2BWhich%2BProgramming%2BLanguage%2Bis%2BMore%2BProductive.jpg&quot; alt=&quot;Python%2Bvs%2BJava%2B %2BWhich%2BProgramming%2BLanguage%2Bis%2BMore%2BProductive&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Началось все просто: меня попросили поревьюить проект, автоматизация на котором
писалась на Python. Ну, знаете, как это бывает, - нужно посмотреть не касательно языка, а в
общем, так сказать, архитектурно. Я согласился - посмотреть не сложно, да и, может, чего
умного узнаю.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Благо, что сам Python я на тот момент пробовал учить, пройдя курс на Coursera и посмотрев
&lt;a href=&quot;https://www.youtube.com/watch?v=5V7XG1mGiHc&amp;amp;list=PLlb7e2G7aSpTTNp7HBYzCBByaE1h54ruW&quot;&gt;курс лекций&lt;/a&gt; на Youtube.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Тогда я достаточно быстро разобрался и дал парочку советов, которые принесли проекту пользу.
Тот опыт дал мне толчок для более детального погружения в мир Python. Должен отметить, что это случилось еще и
потому, что я давно хотел посмотреть на языки вне JVM. Постоянные читатели блога знают, что я работал с &lt;strong&gt;Java&lt;/strong&gt; и
фанатею от &lt;strong&gt;Groovy&lt;/strong&gt;. Но еще один козырь в рукаве никогда не будет лишним.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Почему именно Python?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вокруг него ходит много хайпа, что этот язык достаточно простой и его легко выучить, особенно после Java.
Да и при смене работы очень много предложений мне приходило именно на Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Ну, и как оно в мире Python?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Когда я все-таки решил, что нужно подразобраться, то прочел книгу - &lt;strong&gt;Изучаем Python. Подробный справочник&lt;/strong&gt;.
Еще я начал проходить задания на сайте &lt;a href=&quot;https://checkio.org/&quot;&gt;https://checkio.org/&lt;/a&gt;.
На уровне &quot;сесть и написать какой-то скриптец&quot; все было достаточно просто.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но, как обычно, вокруг любого языка существует целая инфраструкрура, состоящая из пакетных менеджеров, IDE и всего
того барахла, без которого написать более-менее вменяемый проект нельзя.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Естественно, приходя из Java, ты начинаешь искать похожие инструменты и подходы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начнем с IDE. Компания &lt;strong&gt;Jetbrains&lt;/strong&gt; не обошла мир Python стороной и создала PyCharm. Для того, чтобы с IDEA перейти на PyCharm,
много времени не нужно. Автодополнение, подсветка и все то, что мы любим в мире Java, там работает.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Дальше интереснее. Управление зависимостями. В мире Java есть &lt;strong&gt;Gradle&lt;/strong&gt; или &lt;strong&gt;Maven&lt;/strong&gt;.
В мире Python есть &lt;strong&gt;pip&lt;/strong&gt;. Существует еще &lt;strong&gt;easy_install&lt;/strong&gt;, но я его ни разу не пробовал =).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Так вот этот &lt;code&gt;pip&lt;/code&gt; ставит зависимость глобально. Если вы хотите &quot;жить нормально&quot;, как в мире Java, вам важно
овладеть еще и инструментом &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;virtualenv&lt;/a&gt;.
Используя &lt;strong&gt;virtualenv&lt;/strong&gt;, нужно для каждого отдельного проекта создавать окружение и уже потом ставить в него
все необходимые пакеты. А чтобы сделать проект переносимым, нужно еще в корне проекта создавать &lt;strong&gt;requirements.txt&lt;/strong&gt; и
в него заносить все модули, которые необходимы для работы вашего проекта. То есть &lt;code&gt;requirements.txt&lt;/code&gt; - это примитивный аналог
&lt;code&gt;build.gradle&lt;/code&gt; или &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Как писать тесты?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мы же с вами собираемся писать тесты, верно? Чтобы писать тесты, нужен какой-то тест-ранер. В мире &lt;strong&gt;Python&lt;/strong&gt;
есть много фреймворков для написания тестов, но, по факту, для меня самым удобным является &lt;a href=&quot;http://doc.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если брать грубо, то &lt;code&gt;pytest&lt;/code&gt; в Python - это &lt;code&gt;TestNG&lt;/code&gt; в мире Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Овладев всеми этими штуками, мы можем начинать колбасить тесты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для написания UI тестов используется тот же &lt;strong&gt;Selenium&lt;/strong&gt;. Да, в мире питона на чистом Selenium тесты выглядят так же
ужасно, поэтому нужно писать свои костыли и велосипеды.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но перед тем, как начать клепать свое, нужно пойти в гугл и поискать альтернативы. Если внимательно искать,
можно найти библиотеку &lt;a href=&quot;https://github.com/yashaka/selene&quot;&gt;Selene&lt;/a&gt;. &lt;code&gt;Selene&lt;/code&gt; для Python - это полный аналог
&lt;code&gt;Selenide&lt;/code&gt; для Java. Сейчас &lt;strong&gt;Selene&lt;/strong&gt; активно развивается силами Якова Крамаренко и моими стараниями и активно движется к версии &lt;strong&gt;1.0-stable&lt;/strong&gt;.
Скоро можно будет без опаски брать ее в продакшин и писать красивые и лаконичные тесты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И последнее. Так как &lt;strong&gt;Selenium&lt;/strong&gt; развивается и выходят все новые и новые драйверы для работы с разными браузерами,
этим все делом становится очень сложно управлять. Нужно качать драйверы, постоянно их обновлять. УжОс.
В мире Java существует &lt;a href=&quot;http://automation-remarks.com/selenium-webdriver-manager/index.html&quot;&gt;webdriver manager&lt;/a&gt;.
От недавнего времени в мире Python есть аналог - &lt;a href=&quot;https://github.com/SergeyPirogov/webdriver_manager&quot;&gt;python webdriver manager&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Что мы имеем в итоге?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вы пришли в мир автоматизации на Python после Java, то вместо ваших любимых&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;Java 8/Gradle/TestNG/Selenide/WebdriverManager&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;вам нужно овладеть:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;Python/pip+virtualenv/pytest/Selene/WebdriverManager&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как вы можете заметить, отличия не значительны, так что дерзайте&amp;#8230;&amp;#8203;.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Видео с SQA days 20
          </title>
          <link>http://automation-remarks.com/2017/sqa-days-20-video/index.html</link>
          <pubDate>Sun, 1 Jan 2017 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2017/sqa-days-20-video/index.html</guid>
          <description>
                        Видео моего выступления с SQA days 20
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Новый год еще только начался и сразу хорошая новость - стали доступны записи всех
докладов SQA days 20.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я уже &lt;a href=&quot;http://automation-remarks.com/2016/sqa-days-20-feedback/index.html&quot;&gt;писал о своих впечатлениях&lt;/a&gt; от посещения этой конференции.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Запись моего доклада:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/jT_jm5GsFnw&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Новогодний пост
          </title>
          <link>http://automation-remarks.com/2016/summary-2016/index.html</link>
          <pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2016/summary-2016/index.html</guid>
          <description>
                        Итоги года и поздравляшки
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Добрый день, уважаемые читатели! Такая вот простая заметка об уходящем 2016-ом с банальными итогами и благодарностями =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Да, 2016 год был очень интересным и для меня лично, и для жизни блога. Но давайте обо всем по порядку.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начался для меня 2016 год с выступления на конференции &lt;a href=&quot;http://seleniumcamp.com/archive/selenium-camp-2016/speakers/&quot;&gt;SeleniumCamp&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скажу честно, было очень волнительно выступать на такой уважаемой и известной конференции. По итогам конференции мой доклад вошел
в &lt;a href=&quot;http://xpinjection.com/general/selenium-camp-2016-memories-and-best-talks/&quot;&gt;пятерку лучших&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее последовала череда выступлений в Москве, Львове, Харькове, Киеве и Минске.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом мой топ конференций за 2016 выглядит так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SeleniumCamp 2016&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;QAFest 3.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;QA Expert day (Provectus Odessa)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;QA Meetup (DevChallenge)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQA days 20&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Помимо поездок и подготовки к конференциям я еще и работал на проектах. Летом у меня случились самые большие перемены.
Увольнение из харьковского &lt;strong&gt;ЕПАМа&lt;/strong&gt; было для меня психологически сложным из-за того,
что нужно было расставаться с отличной командой, с которой я работал в Харькове. Но тем не менее - это жизнь! На новом месте мы обжились нормально, а
новые задачи и проекты в киевском &lt;strong&gt;Ciklum&lt;/strong&gt; в совокупности с новыми знакомсвами способствовали адаптации в новом городе.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Так как речь пошла о работе, то топ 5 лучших инструментов/языков для автомитизации тестрования за 2016, по моему мнению, выглядит так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Groovy/Spock&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Selenide&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RestAssured&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WebDriverManager&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Testcontainers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Помимо работы на проектах я начал контрибьютить в open-source и заниматься консультациями:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java Video Recorder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Коммит в Selenide&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Погружение в Selene для Рython&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Консультации по автоматизации на Groovy/Java/Python.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все это не приносит материальных выгод, но это очень интересный и полезный опыт.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В сентябре я поехал на BAQ Coference во Львове и встретил там свой новогодний подарок =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/stiy_stil.jpg&quot; alt=&quot;stiy stil&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Да, это стол, за которым можно работать и стоя, и сидя. Теперь у меня меньше болит спина, спасибо &lt;a href=&quot;https://stiystil.com.ua/&quot;&gt;StiyStil&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В ноябре мне посчастливилось побывать на &lt;a href=&quot;http://www.softwaretestingawards.com/&quot;&gt;The 2016 European Software Testing Awards&lt;/a&gt;.
Это мероприятие проходит в Лондоне. Летали мы туда дружной командой из &lt;strong&gt;Ciklum Testing Center of Excellence&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну, и уже под занавес года я был судьей на тестатоне &lt;a href=&quot;https://www.facebook.com/testuastartups/&quot;&gt;Test UA Startups&lt;/a&gt;. Интересный опыт как для учасников, так и для стартапов. Если вы еще не в теме, то вам сюда!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом этот год был хорошим - много челенджей и перемен. В Новом году их будет еще больше! У меня уже запланировано три конференции
и несколько новых проектов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну, а пока что я хочу сказать &quot;спасибо&quot; всем, кто был рядом, и поздравить всех с наступающим 2017 годом!
Хочу поблагодарить всех, кто читает этот блог. Я искренне надеюсь, что моя писанина помогает людям познавать мир автоматизации
тестирования и воодушевляет заниматься этой самой автоматизацией на своих проектах.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Желаю всем вам карьерных успехов, интересных проектов и замечательных команд, которые будут помогать развиваться и делать классные
вещи. Будьте здоровы и счастливы в Новом году! Па-па! Увидимся и услышимся в Новом 2017м =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пусть все у всех сложится&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://vtemu.by/wp-content/uploads/2015/12/51.jpeg&quot; alt=&quot;51&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Python webdriver manager is comming
          </title>
          <link>http://automation-remarks.com/2016/python-webdriver-manager/index.html</link>
          <pubDate>Tue, 27 Dec 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2016/python-webdriver-manager/index.html</guid>
          <description>
                        Аналог драйвер менеджера под Python
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хей-хей! В преддверии Нового года и праздников решил написать о своей наработке.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Уходящий год для меня стал годом перемен не только благодаря тому, что я переехал в другой город, но и потому, что углубился в мир Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В самостоятельном обучении чему-либо я предпочитаю такой подход: читать книги хорошо, но нужно что-то делать
ручками. Пару месяцев назад я уже выкладывал свою поделку &lt;a href=&quot;https://github.com/SergeyPirogov/python-testcontainers&quot;&gt;testcontainers-py&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сейчас же я просто решил написать аналог &lt;a href=&quot;http://automation-remarks.com/selenium-webdriver-manager/index.html&quot;&gt;java webdriver&lt;/a&gt;
для Python. Возможно, в интернете уже есть реализация, но я не нашел.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Идея полностью соответсвует реализации на Java - автоматизировать менеджмент бинарных файлов для
различных драйверов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Код доступен в &lt;a href=&quot;https://github.com/SergeyPirogov/webdriver_manager&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как пользоваться?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Установить зависимость:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pip install webdriver_manager&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Использовать драйвер-менеджер для нужного вам драйвера:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from webdriver_manager.chrome import ChromeDriverManager

webdriver.Chrome(executable_path=ChromeDriverManager().install())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В такой конфигурации будет скачана самая последняя версия Хром драйвера для вашей OС.
Если вы хотите зафиксировать версию, вы можете сделать это достаточно просто: передав версию, как
параметр в конструктор DriverManager:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;webdriver.Chrome(executable_path=ChromeDriverManager(&quot;2.26&quot;).install())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;То же самое валидно и в случае Firefox:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from webdriver_manager.firefox import GeckoDriverManager

driver = webdriver.Firefox(executable_path=GeckoDriverManager().install())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Проблема может заключаться только в одном - все драйверы для firefox релизятся на Github, вся работа
с которым идет через &lt;strong&gt;Github API&lt;/strong&gt;. Если часто делать запросы в &lt;code&gt;api&lt;/code&gt; как не &lt;code&gt;authorized&lt;/code&gt; пользователь, то
вы можете получить ошибку &lt;strong&gt;github rate limit reached&lt;/strong&gt;. В таком случае вам нужно добавить
&lt;code&gt;access_token&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;driver = webdriver.Firefox(executable_path=GeckoDriverManager().use_token(&quot;adasdasdsads342&quot;).install())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично я использую для своей работы Сhrome и Firefox, поэтому на данный момент реализована
поддержка только этих браузеров. В будущем планирую добавить работу с другими драйверами.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Темная сторона Selenide
          </title>
          <link>http://automation-remarks.com/2016/selenide-shadow-sides/index.html</link>
          <pubDate>Sat, 17 Dec 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2016/selenide-shadow-sides/index.html</guid>
          <description>
                        Скромная заметка о станностях Selenide
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Решил написать заметку об одной странности Selenide, на которую натолкнулся буквально пару дней назад.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Disclaimer: все написанное ниже является моим видением и призвано помочь людям, которые могут столкуться с такой же проблемой.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://s-media-cache-ak0.pinimg.com/564x/fd/4a/4f/fd4a4f968c90335ce886f1fb3d106f5f.jpg&quot; alt=&quot;fd4a4f968c90335ce886f1fb3d106f5f&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Проводя лекцию для сотрудников своей компании и пытаясь показать разницу между тестами на &quot;ванильном&quot; Selenium и Selenide,
я поймал очень неприятную ошибку, починить которую мне помогли только в Slack чатике тестировщиков.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я рассказывал о паттерне PageObject и его реализациях с использованием все того же Selenide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Буквально пару недель назад я уже писал подобную заметку о &lt;a href=&quot;http://automation-remarks.com/2016/pages-objects-history/index.html&quot;&gt;PageObject&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, мы можем описывать наши страницы в таком виде:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MainPage {

    public void enter_keywords(String keyword) {
        $(name(&quot;search&quot;)).type(keyword);
    }

    public void lookup_terms() {
        $(&quot;.lookupButton&quot;).click();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все будет работать отлично, но не всем нравится такой формат. Ок, мы можем написать немного по-другому:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MainPage {

    private SelenideElement searchInput =  $(&quot;#search&quot;));
    private SelenideElement lookupButton = $(&quot;.lookupButton&quot;);

    public void enterKeywords(String keyword) {
        searchInput.val(keyword);
        return this;
    }

    public void lookupTerms() {
        lookupButton.click();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Из-за того, что метод &lt;code&gt;$()&lt;/code&gt; возвращает lazy proxy, мы можем писать такой код и он будет отлично работать. Ну, по крайней мере, я так думал =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте напишем тест:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class Test{

    @Test
    void testLookup(){
        Selenide.open(&quot;http://site.com&quot;,MainPage.class)
                .enterKeywords(&quot;hello&quot;)
                .lookupTerms()
        // assertion here
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вроде как все лаконично и красиво. Запускаем тест и получаем такую ошибку:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;INFO: Close webdriver: 1 -&amp;gt; FirefoxDriver: firefox on MAC (f966a581-ec80-784d-b57f-ac10a336544f)

Element not found {by id or name &quot;searchInput&quot;}
Expected: exist

Screenshot: file:/Users/sepi/Github/test/build/reports/tests/1481817473566.0.png
Timeout: 4 s.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Опа! Обратите внимание, тест падает из-за того, что не может найти элемент с именем &lt;code&gt;searchInput&lt;/code&gt;. Но у меня нету такого локатора, у меня есть поле класса с именем &lt;code&gt;searchInput&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В результате выяснения причин такого поведения выяснилось, что при написании подобного кода (см. ниже) нельзя использовать &lt;code&gt;PageFactory&lt;/code&gt; от &lt;code&gt;Selenide&lt;/code&gt; !!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MainPage {

    public SelenideElement searchInput = $(&quot;#twotabsearchtextbox&quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;То бишь нельзя этот класс передавать в методы &lt;strong&gt;Selenide.open()&lt;/strong&gt; и &lt;strong&gt;Selenide.page()&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Что же делать в таком случае?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Нужно инициализировать страницы, как простые обекты, то есть через &lt;strong&gt;new MainPage()&lt;/strong&gt;, тогда все будет работать нормально.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P/S&lt;/strong&gt; Имхо немного неприятное поведение, которое сначала приводит к мысли о багах в библиотеке, но на самом деле
причиной такого поведения является Selenium PageFactory. Именно в этом классе есть метод &lt;code&gt;initElements&lt;/code&gt;, который и обрабатывает
поля класса. Если вы c использованием Selenium напишите так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class Page{

    WebElement header;

}

PageFactory.initElements(driver, Page.class)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В таком случае Selenium попытается найти элемент &lt;strong&gt;header&lt;/strong&gt; или по &lt;strong&gt;name&lt;/strong&gt;, или по &lt;strong&gt;id&lt;/strong&gt;. Не верите? Посмотрите на реализацию метода
&lt;strong&gt;org.openqa.selenium.support.pagefactory.Annotations.buildBy&lt;/strong&gt;. Там еще есть один метод - &lt;strong&gt;buildByFromDefault&lt;/strong&gt;.
Именно здесь и происходит магия.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Что нужно, чтобы поправить такое поведение Selenide?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Вариант 1: (Самый простой)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Не использовать методы &lt;strong&gt;open()&lt;/strong&gt; и &lt;strong&gt;page()&lt;/strong&gt; для инициализации классов PageObject, написанных без исползования аннотации &lt;strong&gt;@FindBy&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Вариант 2: (Варварский)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Наследоваться от класса &lt;code&gt;org.openqa.selenium.support.pagefactory.Annotations&lt;/code&gt; и переопределить поведение метода &lt;code&gt;buildByFromDefault&lt;/code&gt;.
Звучит неплохо, но на самом деле все, что мы можем, - это вызвать исключание c сообщением &lt;code&gt;&quot;You are using page factory to initialize element without @FindBy annotation&quot;&lt;/code&gt;.
В таком случае конечный юзер хоть будет понимать, что он сделал неправильно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Вариант 3: (Имхо правильный)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Нужно просто написать &lt;code&gt;SelenidePageFactory&lt;/code&gt;, переопределить там метод &lt;strong&gt;initElements&lt;/strong&gt; и подправить метод &lt;strong&gt;proxyFields&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пример:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.pagefactory.FieldDecorator;

import java.lang.reflect.Field;

/**
 * Created by sergey on 17.12.16.
 */
public class SelenidePageFactory extends PageFactory {

    public static void initElements(FieldDecorator decorator, Object page) {
        Class&amp;lt;?&amp;gt; proxyIn = page.getClass();
        while (proxyIn != Object.class) {
            proxyFields(decorator, page, proxyIn);
            proxyIn = proxyIn.getSuperclass();
        }
    }

    private static void proxyFields(FieldDecorator decorator, Object page, Class&amp;lt;?&amp;gt; proxyIn) {
        Field[] fields = proxyIn.getDeclaredFields();
        for (Field field : fields) {
            if(isInitialized(page, field)){
                continue;
            }
            Object value = decorator.decorate(page.getClass().getClassLoader(), field);
            if (value != null) {
                try {
                    field.setAccessible(true);
                    field.set(page, value);
                } catch (IllegalAccessException e) {
                    throw new RuntimeException(e);
                }
            }
        }
    }

    private static boolean isInitialized(Object page, Field field){
        try {
            field.setAccessible(true);
            return field.get(page) != null;
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Почему я считаю такой вариант самым удачным?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Потому что все начнет работать, как должно:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class Page {

    public ElementsCollection posts = $$(&quot;.post&quot;);

    public SelenideElement userCounter = $(&quot;.users&quot;);

    public SelenideElement headerElement;

    @FindBy(css = &quot;.button&quot;)
    public SelenideElement button;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь мы может без опаски использовать методы &lt;strong&gt;open()&lt;/strong&gt; и &lt;strong&gt;page()&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если сообщество поддержит, я превращу свое исследование в &lt;strong&gt;pull request&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Спасибо, что читали! До новых заметок ;)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Видео с QA Fest 2016
          </title>
          <link>http://automation-remarks.com/2016/qa-fest-video/index.html</link>
          <pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2016/qa-fest-video/index.html</guid>
          <description>
                        Видео моих выступлеий с QA Fest 2016
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Наконец-то появились видео с прошедшего &lt;a href=&quot;http://automation-remarks.com/qafest-2016-rietrospiektiva/index.html&quot;&gt;QAFest 2016&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Запись моего доклада c Junior Day:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/w_rPX9TwDkA?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Запись моего доклада c Main Day:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/kf5SbZwuyKU?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              SQA days 20: ретроспектива
          </title>
          <link>http://automation-remarks.com/2016/sqa-days-20-feedback/index.html</link>
          <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2016/sqa-days-20-feedback/index.html</guid>
          <description>
                        Мои впечатления от посещения SQA days 20
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сижу в минской кофейне, жду поезд. Решил набросать свои впечатления от посещения юбилейной конференции SQA days 20.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://comaqa.by/wp-content/uploads/2016/09/htmlimage.png&quot; alt=&quot;htmlimage&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этот раз в честь юбилея организаторы решили растянуть конференцию аж на целых три дня.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Первый день - доклады полностью на английском от забугорных и не только спикеров.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Остальные два дня - как обычно, от всех, кто прошел &quot;ожесточенный&quot; отбор.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начнем по порядку. Идея сделать конференцию в Минске оправдала себя, так как здесь удалось собрать украинцев, россиян, белорусов и прочих буржуев из стран ЕС и даже США.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Согласно статистике от организаторов силы распределилсь так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Любопытная статистика SQA Days-20&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Россия - 355 чел. (из самых разных городов, даже из Хабаровска)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Украина - 84 чел.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Беларусь - 161 чел.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Остальные страны: Бельгия, Польша, Литва, Латвия, Эстония, Великобритания, Чехия, Вьетнам, Голландия, Германия, Дания, Франция, Италия, Португалия, Турция, США, Словакия, Казахстан составляют несущественную часть участников.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Место проведения было выбрано удачно - новый отель с достаточно просторными секциями &quot;A&quot; и &quot;B&quot;. Вот насчет секции &quot;С&quot; имхо организаторы погорячились: вместимость зала на 50 человек - это провал! Так, на некоторые доклады я физически не мог попасть из-за того, что не было свободного места.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По программе:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Из всех докладов, на которые я ходил, могу выделить эти:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Алексей Лянгузов (Grid Dynamics)
&lt;strong&gt;Data Pools - средство управления тестовыми данными&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Алексей показал инструмент, который можно применить для управления тестовыми данными. Из доклада и личного разговора я понял, что штука прикольная и будет полезна многим. Когда будет видео, обязательно посмотрите этот доклад.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pavel Strunkin (SoftServe)
&lt;strong&gt;Когда стоит закончить автоматизировать?&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Достаточно интересный рассказ о том, как посчитать скорость окупаемости вашей автоматиазции. Основано на личном опыте докладчика.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Igor Lyubin (auto-testing.ru)
&lt;strong&gt;Провокации автоматического тестирования&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Своим докладом Игорь попытался спровоцировать всех автоматизаторов и заставить их писать меньше UI автотестов. Получилось достаточно неплохо, но для того, чтобы реально спровоцировать публику, на мой взгляд, докладу на хватило эмоциональной окраски и какой-то драмы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dzmitry Humianiuk (EPAM Systems)
&lt;strong&gt;ReportPortal.io: пример CI/CD c метриками на основе продукта с Открытым Кодом&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ЕПАМ наконец-то выкатил в опен-сорс СВОЙ продукт, предназначенный помочь автоматизаторам в сборе статистики после прогона автотестов. Штука достаточно интересная, нужно пробовать ей пользоваться.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Из полезных могу отметить еще доклад &lt;strong&gt;Badoo&lt;/strong&gt; о &lt;strong&gt;Git хуках&lt;/strong&gt; и доклад Алексея Баранцева.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я выступал с докладом о &lt;a href=&quot;http://automation-remarks.com/java-video-recorder-1-0-8/index.html&quot;&gt;VideoRecorder&lt;/a&gt;. Просто вышел, просто рассказал, просто ушел =)
Слайды можно посмотреть &lt;a href=&quot;http://slides.com/sergeypirogov/sqa-days/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;О недочетах:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IT конференция без стабильно работающего WiFi - это тоска-печаль. Да, людей много, но на других конференциях как-то научились делать стабильный канал, который не отваливается.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Блиц-доклады. ВСЕ(!) доклады по автоматизации были урезаны до 20 минут. Проблема в том, что хороший технический доклад невозможно уместить в такой короткий спич.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Голосование за доклады было в олдскульном формате. Камон, 2016 год, IT конференция, а мы все еще не можем плюсануть понравившемуся спикеру или докладу, используя свой мобильный?! Хотя, даже если бы была такая аппликушка, все равно не смогли бы - интернет же не работал 80% времени =(&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом конференция получилась достаточно неплохая, но увы, сравнивая с другими, не могу поставить оценку &quot;отлично&quot;. Мне хотелось больше хороших докладов на тему автоматизации и около того&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Selenium Camp 2017 call for papers
          </title>
          <link>http://automation-remarks.com/2016/sel-camp-cfp/index.html</link>
          <pubDate>Tue, 22 Nov 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2016/sel-camp-cfp/index.html</guid>
          <description>
                        Selenium Camp 2017 Call for papers
          </description>
          <content:encoded>
                        &lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/sel_camp_logo.png&quot; alt=&quot;sel camp logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хорошая новость друзья - официально объявлен прием докладов на &lt;a href=&quot;http://seleniumcamp.com/&quot;&gt;Selenium Camp 2017&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Selenium Camp conference that will take place on February 24-25th in Kyiv, Ukraine.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year we decided to make some important changes:&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;we made one more step forward to extend program with general test automation topics in addition to previously covered Selenium/WebDriver, so now we will have 3+ parallel tracks;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;we finally changed the venue to make the conference more comfortable for participants, so now we are ready to grow up to 500 attendees;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;we prepared good entertainment program for speakers including speakers dinner, city tour, comfortable speakers room for relax and work, whiskey party with attendees for better communication, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We would like to remind you about our conference and let you know that CFP (call for papers) is open. We are looking for speakers who are interested in sharing their knowledge and experience with our community. If you are one of them and whould like to join us please submit your talk.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На &lt;a href=&quot;http://automation-remarks.com/seleniumcamp-2016-rietrospiektiva/index.html&quot;&gt;прошлогодней&lt;/a&gt; конференций было очень круто.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Подавайте свои доклады используя &lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSfSdULHas0IPN8D3arKmiKum-hmb7UQQJDn-1FgQ2y7e214Yw/viewform&quot;&gt;форму&lt;/a&gt; регистрации&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Как менялось мое отношение к PageObject
          </title>
          <link>http://automation-remarks.com/2016/pages-objects-history/index.html</link>
          <pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2016/pages-objects-history/index.html</guid>
          <description>
                        История преобразования PageObject
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Во многих сообществах тестировщиков холиварят о том, как должен выглядеть &lt;strong&gt;PageObject&lt;/strong&gt;. Одни кричат, что нужно хранить локаторы в полях, другие выступают только за методы. Должен PageObject содержать логику или нет? Как и в любом холиваре, каждая из сторон считает свою точку зрения самой правильной.
Как участник социума и человек, сидящий в &lt;a href=&quot;https://software-testers.herokuapp.com/&quot;&gt;Slack сообществе тестировщиков&lt;/a&gt;, я тоже наблюдаю эти перепалки. У меня есть свое мнение по этому поводу, но перед тем, как его выразить, сначала опишу историю преобразования PageObject на различных проектах, в которых я принимал участие.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для меня все началось еще в далеком 2012 году, когда я попал на проект, на котором только зарождалась автоматизация. Так как я был совсем неопытным Junior&amp;#8217;ом, я впитывал и делал так, как мне говорили.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;PageObject&lt;/strong&gt; на том проекте выглядел примерно так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Portfolios extends BasePage {
	private Actions builder = new Actions(getDriverProvider().get());

	public Portfolios(WebDriverProvider driverProvider) {
		super(driverProvider);
	}

	public void selectActionMenuItem(String name) {
		clickActionsButton();
		waitForVisible(locators.ACTIONS_MENU_ITEM_BY(name)).click();
	}

	private void openNodePortfolioFolder() {
		find(locators.NAVIGATION_TREE_PORTFOLIOS_FOLDER()).click();
		waitForVisible(By.xpath(&quot;//a[contains(@title,&apos;BOOK:&apos;)]&quot;));
	}

	public boolean isActionsMenuItemDisplayed(String menuItem) {
		return isDisplayed(locators.ACTIONS_MENU_ITEM_BY(menuItem));
	}

	public void actionsCreateVirtualPortfolio() {
		WebElement createPortfolio = waitForVisible(locators
				.ACTIONS_CREATE_VIRTUAL_PORTFOLIO());
		createPortfolio.click();
	}

	public void actionsCreatePortfolioLinks() {
		waitForVisible(BaseAraPage.locators.getACTIONS_CREATE_PORTFOLIO_LINKS())
				.click();
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Да, все выглядит ужасно! Проект писался на базе самописной обертки для &lt;strong&gt;Selenium Webdriver&lt;/strong&gt;. Локаторы выносились с отдельный класс &lt;strong&gt;Locators&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом нам удавалось более-менее успешно с этим жить, но, смотря на это все, я, конечно, понимаю, что такая реализация является категорически неприемлимой в наше время.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Page Object на базе @FindBy и Component object&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В следующем проекте мы пробовали описывать страницы примерно так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class DictionaryPage extends PageObject {

    @FindBy(name=&quot;search&quot;)
    private WebElementFacade searchTerms;

    @FindBy(name=&quot;go&quot;)
    private WebElementFacade lookupButton;

    public void enter_keywords(String keyword) {
        searchTerms.type(keyword);
    }

    public void lookup_terms() {
        lookupButton.click();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично мне такой подход не нравится тем, что нужно инициализировать страницы через &lt;strong&gt;PageFactory&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;PageFactory.initElements(DictionaryPage.class)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;К тому же, при большом количестве елементов на странице такой &lt;strong&gt;PageObject&lt;/strong&gt; класс обростает уж очень большим количеством полей, помарканных аннотацией &lt;strong&gt;@FindBy&lt;/strong&gt;. Локаторы неудобно переиспользовать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;HTML Elements&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Естественно, был этап, когда появилась библиотека &lt;strong&gt;Yandex HTML elements&lt;/strong&gt; и я пробовал ее использовать, но мне не понравилось. Просто не понравилось и все. Такое бывает.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;PageObject с полями By&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В попытке улучшить предыдущую реализацию мы пробовали писать &lt;strong&gt;PageObject&lt;/strong&gt; в таком стиле:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class DictionaryPage extends PageObject {

    private By searchTerms = By.name(&quot;search&quot;);
    private By lookupButton = By.name(&quot;go&quot;);

    public void enter_keywords(String keyword) {
        $(searchTerms).type(keyword);
    }

    public void lookup_terms() {
        $(lookupButton).click();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В принципе, мне все нравилось, пока количество елементов было небольшим. По мере роста объема елементов такие страницы было неудобно поддерживать. Постоянно нужно было скролить вверх, чтобы подправить локатор, потом возвращаться к месту использования этого локатора.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Эра Selenide&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пока я там ковырялся со своими велосипедами и экспериментировал с реализациями &lt;strong&gt;PageObject&lt;/strong&gt;, библиотека &lt;strong&gt;Selenide&lt;/strong&gt; росла и крепла, и я начал использовать ее на боевых проектах.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Реализация &lt;strong&gt;PageObject&lt;/strong&gt; стала выглядеть так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MainPage {

    public void enter_keywords(String keyword) {
        $(name(&quot;search&quot;)).type(keyword);
    }

    public void lookup_terms() {
        $(&quot;.lookupButton&quot;).click();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Локаторы хранятся прямо там, где они используются - это удобно, ты заходишь в метод и сразу видишь, что там происходит. Такой подход позволяет экономить время и нервы тем, кто пишет и поддерживает тесты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Был еще один проект, на котором я использовал &lt;strong&gt;Groovy&lt;/strong&gt;, и там у нас была возможность писать PageObject в очень интересном &lt;a href=&quot;http://automation-remarks.com/groovy-page/index.html&quot;&gt;формате&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Такой подход мне нравится больше всего, но, увы, он доступен только при использовании &lt;strong&gt;Groovy&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P/S&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;К более-менее удобному для себя формату реализации &lt;strong&gt;PageObject&lt;/strong&gt; я пришел через опыт, а он может быть положительным и отрицательным. Я экспериментировал и нашел самый удобный для себя формат. Считаю, что наличие холиваров - это отлично, главное - относиться к ним здраво и выносить полезный опыт.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Как я блог на новую платформу двигал
          </title>
          <link>http://automation-remarks.com/2016/jbake-blog-platform/index.html</link>
          <pubDate>Sun, 23 Oct 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">2016/jbake-blog-platform/index.html</guid>
          <description>
                        История о переезде блога на JBake
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я еще не писал об истории возникновения этого блога. А теперь решил, что в предверии второй годовщины его существования пора бы раскрыть все тайны.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Началось все еще в ноябре 2014 года. Тогда я просто хотел создать страничку &lt;strong&gt;&quot;О Себе&quot;&lt;/strong&gt; и повесить ее где-то в интернете. Да, так как я не являюсь матерым девелопером, то в тот момент не знал, как же вообще это все делается. Честно говоря, я даже не особо представлял, как эти все красивые сайты приобретают вменяемые доменные имена.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все началось с того, что я узнал о &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; и залил туда какой-то невменяемый кусок &lt;strong&gt;HTML&lt;/strong&gt; файла, дабы попробовать, как это вообще работает.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Потом, покопавшись в интернете в поисках бесплатной платформы для создания блога, я случайно наткнулся на &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost blog&lt;/a&gt;. Собственно, она мне понравилась своим минимализмом и наличием большого количества шаблонов. Едиственный минус - для публикации статей на &lt;strong&gt;Github Pages&lt;/strong&gt; требовалась установка какой-то станной утилиты, написанной на &lt;strong&gt;Python&lt;/strong&gt; - &lt;strong&gt;buster&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В общем, овладев этим инструментарием &lt;strong&gt;16 ноября 2014 года&lt;/strong&gt;, я выложил первую &lt;a href=&quot;http://automation-remarks.com/first-post/index.html&quot;&gt;заметку&lt;/a&gt;. Вот с того момента начался необратимый процесс =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вскоре я прочитал книгу &lt;a href=&quot;https://www.amazon.com/Technical-Blogging-Expertise-Remarkable-Presence/dp/1934356883&quot;&gt;Technical Blogging: Turn Your Expertise into a Remarkable Online Presence&lt;/a&gt;. Там достаточно грамотно расписано, как сделать блог и на нем зарабатывать деньги, но, попробовав использовать советы, я понял, что все это - фигня, и нужно делать так, как подсказывает интуиция. Долой рекламу и product placement!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Таким образом, постепенно я выкладывал статьи об инструментах и подходах, которые использовал на своих проектах. Блог постепенно обрастал ссылками на различные ресурсы, количество читателей постепенно росло. В среднем я публиковал одну заметку в неделю.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В скором времени заметки стали попадать в дайджесты на &lt;strong&gt;DOU&lt;/strong&gt; и других площадках, связанных с автоматизацией тестирования.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но за этим всем стояла еще и техническая составляющая. Я был жестко завязан на платформе, которая была завязана на версии &lt;strong&gt;nodejs&lt;/strong&gt;, а так как я публиковал статьи с помощью &lt;strong&gt;buster&lt;/strong&gt;, то еще и следил за версиями &lt;strong&gt;Python&lt;/strong&gt; и чинил баги в этой адской утилите. В общем, я мог писать и публиковать статьи только с одного ноутбука, который стоит у меня дома. Ситуация меня не радовала, но альтернатив я найти не мог. Был &lt;strong&gt;Jekyll&lt;/strong&gt;, завязанный на &lt;strong&gt;Ruby&lt;/strong&gt;, но я не хотел менять шило на мыло.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И вот буквально месяц назад, листая ленту в &lt;strong&gt;Twitter&lt;/strong&gt;, я наткнулся на &lt;a href=&quot;http://jbake.org/&quot;&gt;&lt;strong&gt;JBake&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Естественно, руки зачесались и я начал двигать свой блог на эту платформу. Меня привлекло то, что все написано на &lt;strong&gt;Java&lt;/strong&gt;, есть поддержка разных темплейтов: &lt;strong&gt;Freemarker&lt;/strong&gt;, &lt;strong&gt;Groovy&lt;/strong&gt;, &lt;strong&gt;Thymeleaf&lt;/strong&gt; и &lt;strong&gt;Jade&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Более того, в интернете я нашел примеры того, как можно все это собирать с помощью любимого мною &lt;strong&gt;Gradle&lt;/strong&gt;. Да, мне потребовалось примерно 3 недели, чтобы полностью перенести шаблон и весь сайт на &lt;strong&gt;JBake&lt;/strong&gt;, но это того стоило.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все по-прежнему хранится на &lt;strong&gt;Github pages&lt;/strong&gt;, но теперь я не привязан к какой-либо платформе, и все, что мне нужно, - это &lt;strong&gt;Java&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметки можно писать в простых файлах формата &lt;strong&gt;.adoc&lt;/strong&gt; или &lt;strong&gt;.md&lt;/strong&gt;. Более того, с помощью &lt;strong&gt;Travis CI&lt;/strong&gt; я получил полноценный процесс &lt;strong&gt;Continuous Delivery&lt;/strong&gt;. Все, что требуется, - это просто открыть &lt;strong&gt;Intelij IDEA(!)&lt;/strong&gt;, написать статью или поправить какой-то файл, сделать &lt;strong&gt;commit&lt;/strong&gt; и &lt;strong&gt;push&lt;/strong&gt; и уже буквально через минуту новые изменения будут опубликованы без каких-либо &lt;strong&gt;down time&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом, я очень доволен, потратил, конечно, кучу времени на имплементацию, зато узнал много нового.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вы задумываетесь над созданием своего сайта-визитки или блога, рекомендую посмотреть на &lt;strong&gt;JBake&lt;/strong&gt;. Да, придется немного попрограммировать, но усилия того стоят.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Selenium Webdriver Manager
          </title>
          <link>http://automation-remarks.com/selenium-webdriver-manager/index.html</link>
          <pubDate>Tue, 18 Oct 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">selenium-webdriver-manager/index.html</guid>
          <description>
                        Небольшая заметка об одной полезной библиотеке
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу поделиться небольшой утилитой, которую я нарыл на просторах &lt;strong&gt;Github&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Называется она &lt;a href=&quot;https://github.com/bonigarcia/webdrivermanager&quot;&gt;WebDriverManager&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;С помощью этой библиотеки вы можете решить достаточно банальную проблему управления драйверами для &lt;strong&gt;Chrome&lt;/strong&gt;, &lt;strong&gt;Firefox&lt;/strong&gt; или &lt;strong&gt;InternetExplorer&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я думаю, многим автоматизаторам знакома &quot;проблема&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;org.openqa.selenium.WebDriverException:
The path to the driver executable must be set by the webdriver.chrome.driver system property;
for more information, see http://code.google.com/p/selenium/wiki/ChromeDriver.
The latest version can be downloaded from http://code.google.com/p/chromedriver/downloads/list&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Да, все это не ново и решается достаточно просто:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;/path/to/chromedriver&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;При таком подходе обычно нужно скачивать и хранить этот самый &lt;strong&gt;chromedriver&lt;/strong&gt; в папке &lt;strong&gt;resources&lt;/strong&gt;, а что еще более неприятно, - если мы запускаем тесты на разных платформах, то нужно творить разные фабрики и писать кучу дополнительного кода.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Библиотека же решает это все следующим образом:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class ChromeTest {

    protected WebDriver driver;

    @BeforeClass
    public static void setupClass() {
        ChromeDriverManager.getInstance().setup();
    }

    @Test
    public void test() {
        // Using Selenide
        open(&apos;http://automation-remarks.com&apos;);
        $$(&apos;.post&apos;).shouldHave(size(10));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом, эта находка меня очень порадовала и я уже ее прикрутил к своему проекту - рекомендую!!&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Будьте осторожны с TestNG лисенерами
          </title>
          <link>http://automation-remarks.com/budtie-ostorozhny-s-testng-lisienierami/index.html</link>
          <pubDate>Sat, 8 Oct 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">budtie-ostorozhny-s-testng-lisienierami/index.html</guid>
          <description>
                        Решил написать такую вот, на мой взгляд, интересную и, наверное, для многих познавательную заметку. Сегодня поговорим о скрытых угрозах, которые несут в себе TestNG лисенеры.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Решил написать такую вот, на мой взгляд, интересную и, наверное, для многих познавательную заметку. Сегодня поговорим о скрытых угрозах, которые несут в себе TestNG лисенеры.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://learn-automation.com/wp-content/uploads/2015/03/testng.jpg&quot; alt=&quot;testng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Среди автоматизаторов, использующих Java, издавна бушует холивар, что же лучше, TestNg или JUnit. Увы, но дальше банальных переписок в Slack чате или разговоров в холле конференций дело не заходит.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Проведя небольшой экспериментальный опрос на прошедшем &lt;a href=&quot;http://automation-remarks.com/qafest-2016-rietrospiektiva/&quot;&gt;QAFest 2016&lt;/a&gt;, я был немного удивлен, что подавляющее большинство на проектах использует именно TestNG. Многим очень нравится TestNG, некоторые считают его намного более удобным, чем, скажем, тот же JUnit. Осмелюсь предположить, что большинство просто никогда не пробовало использовать JUnit чисто из исторических соображений. Пришел на проект, а там уже был TestNg, освоил его - и теперь на любом другом проекте используем то, что нам так привычно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мой &lt;a href=&quot;http://automation-remarks.com/java-video-recorder-1-0-8/&quot;&gt;VideoRecoder&lt;/a&gt; имеет интеграцию и с TestNG. Я реализовал такую интеграцию с помощью лисенеров, так как это самый простой и гибкий способ. НО, как оказалось, эти лисенеры влекут за собой кучу подводных камней, о которых многие, скорее всего, даже не знали.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я опишу всего лишь два случая, которые лично меня очень сильно удивили и имели серьезное влияние на работу Java VideoRecorder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Факт 1: Аннотация @Listener применяет лисенер ко всем классам&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот такая вот подлость номер один. Скажем, вы написали класс и захотели применить к нему какой-то свой лисенер:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Listeners({VideoListener.class})
class MyAwesomeTests{

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну, вроде как отлично, запускаем - все работает, радуемся, пишем в резюме, что мы умеем делать такую классную штуку.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;НО радуемся недолго. Стоит нам написать еще пару-тройку классов с тестами, как мы заметим, что наш лисенер срабатывает и для них, хотя мы их никакими аннотациями не маркали. Вот это подарок!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вроде бы, ничего страшного, ну, применяется - и что?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В случае с рекордером это потенциально могло привести к плохим последствиям. Скажем, у вас есть Test Suite, в котором есть 200-300 тестов. Вы подключаете запись видео и настраиваете его писать все тесты, независимо от того, отмечены они аннотацией &lt;strong&gt;@Video&lt;/strong&gt; или нет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Listeners({VideoListener.class})
public class TestNgVideoExampleTest {

    @BeforeClass
    public void setUp() {
        VideoRecorder.conf().
                .withRecordMode(RecordingMode.All)
                .withVideoSaveMode(VideoSaveMode.All)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Или так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;./gradlew test -Dvideo.mode=ALL -Dvideo.save.mode=ALL&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Запускаете свои тесты и получаете 200-300 видеороликов. Хотя вы рассчитывали записать только один класс, в котором значительно меньшее количество тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Естественно, когда я нашел такой баг в своей библиотеке, то начал думать, как это исправить. Решение оказалось таким: нам нужно написать свой метод проверки аннотации для класса, который в данный момент &quot;прослушивается&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public boolean shouldIntercept(ITestResult result) {
        List&amp;lt;String&amp;gt; listeners = result.getTestContext().getCurrentXmlTest().getSuite().getListeners();
        return listeners.contains(this.getClass().getName()) || shouldIntercept(result.getTestClass().getRealClass(), this.getClass());
    }

public boolean shouldIntercept(Class testClass, Class annotation) {
        Listeners listenersAnnotation = getListenersAnnotation(testClass);
        return listenersAnnotation != null &amp;amp;&amp;amp; asList(listenersAnnotation.value()).contains(annotation);
    }

    private Listeners getListenersAnnotation(Class testClass) {
        Annotation annotation = testClass.getAnnotation(Listeners.class);
        return annotation != null ? (Listeners) annotation :
                testClass.getSuperclass() != null ? getListenersAnnotation(testClass.getSuperclass()) : null;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ну, и затем нужно просто использовать этот метод в методах лисенера:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class VideoListener extends TestNgListener {

    @Override
    public void onTestStart(ITestResult result) {
        if (shouldIntercept(result)) {
            // code here
        }
    }

    .... another methods&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь ваш лисенер будет срабатывать только для тех классов, у которых аннотация &lt;strong&gt;@Listener&lt;/strong&gt; содержит &lt;strong&gt;VideoListener.class&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Стоит отметить, что в случае подключения лисенера через &lt;strong&gt;testng.xml&lt;/strong&gt;, он таки будет применен ко всему сьюту:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;suite name=&quot;Suite&quot; parallel=&quot;false&quot;&amp;gt;
    &amp;lt;listeners&amp;gt;
        &amp;lt;listener class-name=&quot;com.automation.remarks.testng.VideoListener&quot; /&amp;gt;
    &amp;lt;/listeners&amp;gt;

    &amp;lt;test name=&quot;Test&quot;&amp;gt;
        &amp;lt;classes&amp;gt;
            &amp;lt;class name=&quot;com.testng.TestClass&quot; /&amp;gt;
        &amp;lt;/classes&amp;gt;
    &amp;lt;/test&amp;gt;
&amp;lt;/suite&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Это выглядит логично, так как блок &lt;strong&gt;&amp;lt;listeners&amp;gt;&lt;/strong&gt; находится внутри тега &lt;strong&gt;&amp;lt;suite&amp;gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Факт 2: Порядок выполнения лисенеров не гарантируется&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Второй интересный момент, который принес мне много головной боли.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скажем, вам нужно подключить два лисенера. В моем случае - один, который пишет видео, а второй, который аттачит это самое видео к &amp;lt;mark&amp;gt;Allure&amp;lt;/mark&amp;gt; отчету.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ок, берем и пишем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Listeners({VideoListener.class, AllureListener.class})
class TestClass{
 // tests here
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Кажется, все отлично: один пишет видео, другой по окончании теста аттачит его в отчет. Но выяснилось, что в некоторые моменты происходила непонятная фигня: видео записывалось, но не отображалось в отчете.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Оказалось, что это случалось потому, что методы из &lt;strong&gt;AllureListener&lt;/strong&gt; вызывались первее. Ну вообще подарок!!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начав копаться внутри TestNG, я определил, что все лисенеры складываются в Set и потом вызываются. Естественно, что о какой-то очередности речи и быть не может.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как же все-таки гарантировать очередность вызова? Ответ: иметь один лисенер!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class AllureVideoListener extends VideoListener{

    @Override
    public void onTestFailure(ITestResult result) {
        super.onTestFailure(result);
        attachment(VideoRecorder.getLastRecording())
    }

    @Attachment(value = &quot;video&quot;, type = &quot;video/mp4&quot;)
    private byte[] attachment(File video) {
        try {
            return Files.readAllBytes(Paths.get(video.getAbsolutePath()));
        } catch (IOException e) {
            log.warning(&quot;Allure listener exception&quot; + e);
            return new byte[0];
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так. Да, я мог вызывать метод attachment не в лисенере, а, скажем, в after method и тогда бы не натолкнулся на это. Но, если вдруг окажется так, что порядок выполнения лисенеров для вас будет важен, я вас предупредил =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Такая вот история моей битвы с &lt;strong&gt;TestNG&lt;/strong&gt; и его лисенерами. Естественно, что этот кейс может быть слишком узок и вы в своих проектах никогда не натолкнетесь на это. Но это один из тех моментов, когда можно научиться на ошибках других, и весомый пункт в пользу несовершенности TestNg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Субъективное мнение по поводу &lt;strong&gt;TestNG&lt;/strong&gt; vs &lt;strong&gt;JUnit&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично я очень жду &lt;strong&gt;JUnit 5&lt;/strong&gt;, который уже попробовал, но в реальный проект его брать еще рано. Имхо он заткнет TestNG за пояс, нужно лишь немного подождать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Успехов и до новых заметок..&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QAFest 2016: ретроспектива
          </title>
          <link>http://automation-remarks.com/qafest-2016-rietrospiektiva/index.html</link>
          <pubDate>Sun, 2 Oct 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">qafest-2016-rietrospiektiva/index.html</guid>
          <description>
                        Спешу поделиться своими впечатления о прошедшей, уже третьей по счету, конференции QAFest.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как и в прошлом &lt;a href=&quot;http://automation-remarks.com/qafest-retrospective/index.html&quot;&gt;году&lt;/a&gt;, мне посчастливилось посетить это мероприятие в качестве докладчика.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/qa_fest_2016.jpg&quot; alt=&quot;qa fest 2016&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом году организаторы решили немного изменить формат и разбить программу на два дня. Первый - &lt;strong&gt;Junior Day&lt;/strong&gt; - был полностью посвящен молодому поколению, ну и, естественно, Main Day - для более мастеровитой аудитории.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я, как любитель поговорить на публике, выступал и в первый, и во второй день.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу отметить, что идея сделать два разноплановых дня лично мне очень понравилась, так как можно подготовить доклады разных уровней. К тому же, выступление в первый день дает возможность немного привыкнуть к сцене перед основным днем.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мне выпала честь открывать &lt;strong&gt;Junior Day&lt;/strong&gt; и выступить первым. Не буду спойлить, дождетесь видео и посмотрите сами, о чем я рассказывал. Хочу лишь отметить, что выступать первым немного волнительно, поэтому первых минут 10 во время выступления у меня дрожал голос =) Но потом все наладилось и я откатал доклад на вполне достойном уровне.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Из всех выступлений первого дня мне больше всего понравился доклад &lt;strong&gt;Per Thorsheim Website security 101&lt;/strong&gt;. Я не очень глубоко подкован во всех этих сесюрных штучках, поэтому даже доклад на уровне джуниоров для меня был интересен и полезен. Более того, Per уже второй год подряд приезжает с очень интересными докладами, которые позволяют расширить кругозор и задуматься над нашим поведением в глобальной сети.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все остальные доклады были уж слишком джуниорскими, поэтому я в основном находился в холле и общался с организаторами либо же другими участниками.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Второй - &lt;strong&gt;Main Day&lt;/strong&gt; - был намного интереснее и ярче. Собрались все самые маститые докладчики со своими лучшими докладами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я думаю все &lt;strong&gt;700(!)&lt;/strong&gt; участников с нетерпением ждали открытия основного дня конференции. Как обычно все начиналось с утреннего чаепития и общения. В 10:00 я пошел на первый доклад о Groovy. Думаю, постоянным читателям блога не нужно объяснять, почему я выбрал именно его =)
&lt;a href=&quot;http://automation-remarks.com/seleniumcamp-2016-vidieo/&quot;&gt;Groovy рулит&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самым крутым докладом дня я считаю выступление Анастасии Асеевой &lt;strong&gt;&quot;Роль тестирования в Devops&quot;&lt;/strong&gt;. Когда появится видео, вы сможете сами оценить полезность и крутость этого доклада.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ближе к обеду пришел черед моего выступления. Для синьоров я подготовил доклад о Докерах. В целом я рассказывал о библиотеках &lt;strong&gt;testcontainers&lt;/strong&gt; для Java и Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После этого все послушали эфир &lt;strong&gt;Radio QA&lt;/strong&gt; и начали медленно готовиться к афтепати.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Закрытие конференции было достаточно традиционным - с розыгрышами призов и подарков. Естественно, мы не стали расходиться по домам, а еще послушали стендап-комиков и приличное количество времени общались в узком кругу спикеров.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Конференция &lt;strong&gt;QAFest 2016&lt;/strong&gt; закончилась, а впереди целый год для поиска и подготовки новых интересных и полезных докладов для &lt;strong&gt;QAFest 2017&lt;/strong&gt; :D&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Java Video Recorder 1.0.8 is production ready
          </title>
          <link>http://automation-remarks.com/java-video-recorder-1-0-8/index.html</link>
          <pubDate>Sun, 28 Aug 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">java-video-recorder-1-0-8/index.html</guid>
          <description>
                        Привет! Новая статейка о том, как можно сваять клиент на Java для работы с REST API.
          </description>
          <content:encoded>
                        &lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://sr.photos1.fotosearch.com/bthumb/CSP/CSP992/k13975116.jpg&quot; alt=&quot;k13975116&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, it took some time to make video recorder stable. I&amp;#8217;ve added a couple useful features since version 1.0.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So let&amp;#8217;s make it clear and answer the question &quot;What kind of problems does it solve?&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main idea was to create a library that provides an easy way to record video during test execution. It doesn&amp;#8217;t matter what java test runner you use, it supports JUnit, TestNG and Spock.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s look at some real cases. For example you have a lot of automated test scenarios in your project, but some test scripts are flaky.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So you have two options:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First is to delete them from test execution because you have already spend a huge amount of time to debug them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second one is to add Video recorder, catch all the problems, fix them and be happy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, to add video recording support in your existing test automations framework require three simple steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;1.Add project dependency&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.automation-remarks&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;video-recorder-junit&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.8&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2.Add JUnit rule to you test class&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.automation.remarks.video.junit.VideoRule;
import org.junit.Rule;

public class JUnitVideoTest {

    @Rule
    public VideoRule videoRule = new VideoRule();

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;3.Add test and mark it with &lt;/strong&gt;@Video&lt;strong&gt; annotation:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.automation.remarks.video.annotations.Video;
import com.automation.remarks.video.junit.VideoRule;
import org.junit.Rule;
import org.junit.Test;

import static junit.framework.Assert.assertTrue;

public class JUnitVideoTest {

    @Rule
    public VideoRule videoRule = new VideoRule();

    @Test
    @Video
    public void shouldFailAndCreateRecordWithTestName() {
        // test code
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s all! Now if your test fails, video will be recordered automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same scenario can be done for TestNG, please refer to &lt;a href=&quot;https://sergeypirogov.github.io/video-recorder-java/&quot;&gt;documetation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Isn&amp;#8217;t it cool?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But hold on, it has even more features such as configurations and @Video annotation parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;@Video&lt;/strong&gt; annotation takes two optional parameters. By setting values to them you can override video file name or disable video recording for one particular test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Video configuration example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;VideoRecorder.conf()
                .withVideoFolder(&quot;custom_folder&quot;)
                .videoEnabled(true)
                .withVideoSaveMode(VideoSaveMode.ALL)
                .withRecordMode(RecordingMode.ANNOTATED);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see it allows to override default parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All this parameters can be passed by command line, for example if you are executing you test in CI server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;mvn test -Dvideo.folder=&quot;custom_folder&quot;
         -Dvideo.enabled=true
         -Dvideo.mode=ANNOTATED
         -Dvideo.save.mode=ALL&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Important point: FOR NOW SETTINGS PASSED IN CODE HAVE HIGHER PRIORITY AND CAN&amp;#8217;T BE OVERRIDDEN BY COMMAND LINE PARAMETERS.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope this library will make life of test automation engineers easier and will help to detect fix flaky tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;P/S Project is licensed under Apache 2.0 and can be found publicly available on &lt;a href=&quot;https://github.com/SergeyPirogov/video-recorder-java&quot;&gt;GITHUB&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Документация к проекту на Github c AsciiDoctor и Travis CI
          </title>
          <link>http://automation-remarks.com/github-travis-docs/index.html</link>
          <pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">github-travis-docs/index.html</guid>
          <description>
                        В данной заметке хочу поговорить о создании качественной документации к проектам.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В данной заметке хочу поговорить о создании качественной документации к проектам. Почему это важно? Однажды я услышал одну очень правильную мысль: хорошая документация позволяет экономить деньги проекта. Каким образом? Давайте разберемся!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://sites.google.com/site/limenncom/_/rsrc/1396435997305/dokumentacia/instruct.jpg?height=320&amp;width=320&quot; alt=&quot;instruct&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Когда к вам на проект приходит новый человек, вы можете ему дать документацию, с помощью которой он сможет ознакомиться с вашим проектом. Обычно как бывает: приходит новый человек и к нему приставляют какого-то опытного коллегу. А теперь представьте что рейт этого человека 30 $/час. В тот момент, когда он что-то объясняет и вводит нового человека в курс дела, он полезной работы не делает, ну кроме как помогает потенциально будущему коллеге разобраться с тем барахлом, которое уже понаписано.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Всем уже работающим на проекте это помогает быстро решать проблемы. Ну вот, скажем, когда я пришел 2 года назад на проект, я все настроил и работал себе - документация мне не нужна. Но тут вдруг у меня накрылась рабочая станция. Что делать? Всего в голове не удержать, как и с какими настройками Postgres ставить.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Все проекты когда-либо заканчиваются. И в момент передачи знаний документация, а точнее ее отсутствие, начинает играть очень важную роль.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Да, обычно на проектах есть какая-то документация, она лежит в гуглдоках или каких-то абстрактных хранилищах. Вроде как все счастливы. Но основная проблема - это держать эту самую документацию в актуальном состоянии. Мне, к примеру, бывает сложно всегда помнить, в каком места и как у нас называется какой-то конкретный документ. Соответственно пойти и проапдейтить его я забываю. Знакомая ситуация, не правда ли?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как же мы можем это поправить? Хранить документацию вместе с проектом! Да, именно так. Мы же каждый день работаем с нашими проектами, качаем сорс из гитхаба, пушим наши изменения. Почему бы не делать тоже самое с документацией к проекту?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Благо, для этого уже придумано огромное количество средств и инструментов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самое простое, что вы можете сделать, - это написать &lt;strong&gt;README.md&lt;/strong&gt; к вашему проекту на &lt;strong&gt;Github&lt;/strong&gt;. Опишите там &lt;strong&gt;Getting Started&lt;/strong&gt; и это уже будет огромным шагом к прогрессу.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но иногда хочется, чтобы документация была еще и красивой, со всякими там рюшечками! Это можно сделать, если последовать этому замечательному &lt;a href=&quot;http://mgreau.com/posts/2016/03/28/asciidoc-to-gh-pages-with-travis-ci-docker-asciidoctor.html&quot;&gt;туториалу&lt;/a&gt;. Там все подробно описано, за исключением пары моментов, из-за которых у меня не работало с первого раза:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Когда будете связывать свой проект и Travis CI, то параметр GH_REF нужно указывать без http(s):// в формате github.com/SergeyPirogov/VideoRecorder.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вы все правильно сделаете, у вас после билда на тревисе в бранче gh-pages будет два файлика index.html и .pdf. Затем сразу же можно будет в браузере открыть эту документацию как простую веб-страницу: &lt;a href=&quot;http://automation-remarks.com/video-recorder-java/&quot;&gt;пример с рекордером&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Почему это круто?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Все знают, где лежит дока.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ссылку на нее можно расшарить любому.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Документацию легче поддерживать в актуальном состоянии, так как ее можно править из Github или же в вашей любимой Idea. Да что там, достаточно даже простого редактора по типу Vim.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Вы можете легко отслеживать, кто и как изменял файл, так как вся история хранится в гите.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Изменения автоматически будут пересобраны на Travis CI и документация на вашем условном сайте обновится практически моментально.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично мне этот подход очень понравился. Теперь я стараюсь применять его для всех своих проектов. Хорошей вам документации и до встреч&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Избавьтесь от нестабильных тестов с VideoRecorder
          </title>
          <link>http://automation-remarks.com/avtomatizatsiia-i-kino/index.html</link>
          <pubDate>Thu, 19 May 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">avtomatizatsiia-i-kino/index.html</guid>
          <description>
                        В этот раз хочу поделиться парой мыслей по поводу нестабильных тестов и способами борьбы с ними.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет, новая заметка немного подзадержалась, так как я готовлюсь к поездке на &lt;a href=&quot;http://qaconf.ru/speakers.html&quot;&gt;QA Conference&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этот раз хочу поделиться парой мыслей по поводу нестабильных тестов и способами борьбы с ними. Конкретно речь пойдет о UI тестах для WEB и Desktop приложений.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Естественно, всем хотелось бы иметь стабильные UI автотесты, которые можно запускать на любом компьютере и, тем самым, проверять работоспособность системы, но, увы, зачастую это не так. На всех конференциях автоматизаторы сходятся во мнениях о том, что нужно соблюдать баланс и сохранять структуру пирамиды автоматизации. Тем не менее, в силу каких-либо обстоятельств на многих проектах до сих пор вместо пирамиды мы можем видеть &quot;мороженко&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мне удается держать свои автотесты стабильными и запускать их практически в любой момент. Как такого можно добиться? Мой секрет заключается в том, что UI тесты - это, по сути, автоматизация E2E сценариев, более того, в тестах мы проверяем функциональность нашего UI. Немаловажным фактором является то, что я мастерски использую Selenide, ну и последнее - автотесты запускаются каждый день! Именно ежедневные запуски, даже на тех же сборках, позволяют мне быть уверенным, что мой тест работает стабильно и все падения вызваны изменениями или ошибками в тестируемом приложении.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но, тем не менее, я знаю проекты или случаи (на моем прошлом проекте так было), когда было достаточно серьезное число нестабильных тестов, ситуация усугублялась еще и тем, что тестирование проводилось только в браузере Internet Explorer 8-10.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;У всех на проектах есть скриншоты, которые призваны помогать выяснить причины падений тестов, но вот одна проблема - не всегда скриншоты дают ясную картину. Самая досадная вещь - когда у вас есть снимок экрана, но на нем не запечатлена ошибка, так как скриншотер сработал на секунду позже нужного момента. Как быть в этом случае? Можно принудительно делать скриншот и пытаться угадать момент падения, а можно &lt;a href=&quot;http://automation-remarks.com/pishiem-vidieo-vo-vriemia-proghona-tiestov/&quot;&gt;писать видео&lt;/a&gt; нестабильного теста!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Наверное вы удивитесь, но да, зачастую это самый верный способ выявить причины нестабильности, более того, теперь писать видео ваших тестов стало очень просто, так как я решил написать библиотеку, которая позволит многим не думать о деталях реализации процесса записи, - &lt;strong&gt;VideoRecorder&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что полезного даст эта библиотека?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все очень просто - вы сможете легко записывать видео ваших автотестов, просто добавив аннотацию &lt;strong&gt;@Video&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Пример:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Listeners(VideoListener.class)
public class TestNGVideo {

@Test
@Video
public void testName3() throws Exception {
     open(&quot;http://ukr.net&quot;);
     $(&quot;.login &amp;gt; input&quot;).val(&quot;Hello&quot;);
     $(&quot;.password &amp;gt; input&quot;).val(&quot;test&quot;);
     $(&quot;.submit &amp;gt; bu&quot;).click();
}}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так просто! Выполнение данного теста будет записано на видео и сохранено в нужном вам месте. На данный момент я успел реализовать интеграцию с TestNG, но в планах сделать подобное и для работы с JUnit, Spock или же любого другого тест-ранера из мира Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Из фишек! По умолчанию видеофайл будет иметь имя теста и записи будут сохраняться только для FAILED тестов. Вы можете легко переопределить новое имя для файла, просто указав его в параметрах аннотации:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
@Video(name = &quot;second_test&quot;)
public void testName2() throws Exception {
    open(&quot;http://ukr.net&quot;);
    $(&quot;.login &amp;gt; input&quot;).val(&quot;User&quot;);
    $(&quot;.password &amp;gt; input&quot;).val(&quot;User&quot;);
    $(&quot;.submit &amp;gt; button&quot;).click();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот такая вот получилась штучка. Вы можете использовать это как для тестов с &lt;strong&gt;Selenide&lt;/strong&gt;, так и для тестов с &lt;strong&gt;Winium&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вам интересна данная идея, напишите в комментариях свои мысли&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              SeleniumCamp 2016 видео
          </title>
          <link>http://automation-remarks.com/seleniumcamp-2016-vidieo/index.html</link>
          <pubDate>Tue, 10 May 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">seleniumcamp-2016-vidieo/index.html</guid>
          <description>
                        Наконец-то появились видео с прошедшего SeleniumCamp.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Наконец-то появились видео с прошедшего &lt;a href=&quot;http://automation-remarks.com/seleniumcamp-2016-rietrospiektiva/&quot;&gt;SeleniumCamp&lt;/a&gt;. По результатам отзывов я вошел в тройку лучших спикеров.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Видео отчет:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/liQxXvXg0Uc?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Запись моего доклада:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/cW6DSthdLaw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Автоматизация в контейнере с TestContainers
          </title>
          <link>http://automation-remarks.com/ganiaitie-tiesty-v-kontieinierie-s-testcontainers/index.html</link>
          <pubDate>Sun, 13 Mar 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">ganiaitie-tiesty-v-kontieinierie-s-testcontainers/index.html</guid>
          <description>
                        Воу-воу. Как обычно ранним утром в воскресенье хочу поделиться новой порцией полезностей с многочисленной армией автоматизаторов.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Воу-воу. Как обычно ранним утром в воскресенье хочу поделиться новой порцией полезностей с многочисленной армией автоматизаторов. Вчера хорошо посидели на &lt;strong&gt;Radio QA&lt;/strong&gt;, но так как из-за проблем со Skype я ушел из эфира раньше всех и не успел рассказать об одной интересной библиотеке, которую нарыл на просторах интернета, а точнее на Github, решил написать статью. Называется она &lt;strong&gt;TestContainers&lt;/strong&gt;. Что она позволяет делать? Она умеет по требованию поднимать &lt;strong&gt;Docker&lt;/strong&gt; контейнер и использовать его для ваших нужд.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://d21ii91i3y6o6h.cloudfront.net/gallery_images/from_proof/1026/large/1396373089/docker.png&quot; alt=&quot;docker&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Проблема создания окружения для запуска тестов существует давно, зачастую для прогона UI тестов создают виртуальные машины с помощью &lt;strong&gt;VirtualBox&lt;/strong&gt; либо каких-то других систем виртуализации. Я уже писал о &lt;a href=&quot;http://automation-remarks.com/vagrant/&quot;&gt;Vagrant&lt;/a&gt;, который упрощает создание виртуалок и позволяет создавать &lt;strong&gt;stateless&lt;/strong&gt; окружение. Но все же с этим всем существует достаточно много проблем, так как виртуалка отъедает приличное количество ресурсов хост машины, да и запуск этой самой виртуалки занимает приличное количество времени. Вы можете возразить: &lt;strong&gt;&quot;Используй AWS, дурень&quot;&lt;/strong&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Возможно, но за &lt;strong&gt;AWS&lt;/strong&gt; нужно платить деньги, а это может значительно ударить по бюджету проекта.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Нам нужно что-то альтернативное. И здесь на помощь приходит &lt;strong&gt;Docker&lt;/strong&gt; и библиотека &lt;strong&gt;TestContainers&lt;/strong&gt;. Я уже писал про настройку &lt;strong&gt;Jenkins&lt;/strong&gt; в контейнере.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Эта же библиотека позволяет вам поднимать контейнер из Java кода, использовать его и потом убивать контейнер по завершении вашего процесса.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Есть несколько типов контейнеров, которые она умеет обрабатывать:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Temporary database containers&lt;/strong&gt; - specialized MySQL, PostgreSQL, Oracle XE and Virtuoso container support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Webdriver containers&lt;/strong&gt; - run a Dockerized Chrome or Firefox browser ready for Selenium/Webdriver operations - complete with automatic video recording&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generic containers&lt;/strong&gt; - run any Docker container as a test dependency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Docker compose&lt;/strong&gt; - reuse services defined in a Docker Compose YAML file&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я конкретно игрался с модулем для &lt;strong&gt;Selenium&lt;/strong&gt; тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Работает эта штука через &lt;strong&gt;JUnit&lt;/strong&gt; рулы:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Rule
public BrowserWebDriverContainer chrome =
       new BrowserWebDriverContainer()
        .withDesiredCapabilities(DesiredCapabilities.chrome());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот такой вот простой командой у вас поднимется docker контейнер, в котором вы сможете запускать ваши тесты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самая приятная вещь - эта штука умеет записывать видео. По умолчанию она будет писать видео для всех тестов, но вы можете указать ключ &lt;strong&gt;VncRecordingMode.RECORD_FAILING&lt;/strong&gt; и запись будет вестись только для упавших тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;new BrowserWebDriverContainer()
         .withDesiredCapabilities(DesiredCapabilities.chrome())
         .withRecordingMode(VncRecordingMode.RECORD_ALL, new File(&quot;./target/&quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте посмотрим на конкретный пример:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class TestTestContainers {

 public static BrowserWebDriverContainer chrome =
           new BrowserWebDriverContainer()
.withDesiredCapabilities(DesiredCapabilities.chrome())
.withRecordingMode(RECORD_ALL, new File(&quot;./target/&quot;));

    @BeforeClass
    public static void setUp(){
        chrome.start();
        RemoteWebDriver driver = chrome.getWebDriver();
        WebDriverRunner.setWebDriver(driver);
    }

    @Test
    public void test() throws InterruptedException {
        Selenide.open(&quot;http://ukr.net&quot;);
        $(&quot;.login &amp;gt; input&quot;).val(&quot;Hello&quot;);
        $(&quot;.password &amp;gt; input&quot;).val(&quot;test&quot;);
        $(&quot;.submit &amp;gt; button&quot;).click();
    }

    @Test
    public void test2() throws InterruptedException {
        Selenide.open(&quot;http://ukr.net&quot;);
        $(&quot;.login &amp;gt; input&quot;).val(&quot;Word&quot;);
        $(&quot;.password &amp;gt; input&quot;).val(&quot;Hello&quot;);
        $(&quot;.submit &amp;gt; button&quot;).click();
    }

    @AfterClass
    public static void tearDown() throws Exception {
        chrome.stop();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом вещь очень крутая. Как вы могли заметить, мне не составило труда использовать Selenide для моих тестов, а это означает, что у вас есть все плюшки. Вы можете ваши существующие тесты прогонять в контейнере уже прям завтра. Так как это Java, вы можете писать все на Groovy с использованием &lt;strong&gt;Groovy PageObject&lt;/strong&gt;,&lt;strong&gt;SoftAssert&lt;/strong&gt; и &lt;strong&gt;Spock Framework&lt;/strong&gt;. В общем, я больше чем доволен этой штукой.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но без горечи не обойтись. Первый раз эта штука стартует очень долго, так как Docker должен спулить образ контейнера из репозитория. Возможность использовать с JUnit Rule есть, но мне это показалось глупой идеей, так как после каждого теста мы пересоздаем контейнер, а это занимает приличное количество времени. Именно поэтому в примере я показал альтернативный метод запуска контейнера, к тому же, таким образом вы можете использовать эту библиотреку с TestNG или любым другим фреймворком.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Копаемся в закромах Jenkins
          </title>
          <link>http://automation-remarks.com/kakuiu-polzu-docker-mozhiet-priniesti-avtomatizatoru/index.html</link>
          <pubDate>Sun, 6 Mar 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">kakuiu-polzu-docker-mozhiet-priniesti-avtomatizatoru/index.html</guid>
          <description>
                        Такая вот темка, о которой захотелось написать после альфа релиза Jenkins 2.0.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Такая вот темка, о которой захотелось написать после альфа релиза Jenkins 2.0. У нас всех на проектах есть CI сервер. У вас нету? Плохо, нужно срочно завести. Если вы не знаете, что такое Jenkins, можете посмотреть &lt;a href=&quot;http://automation-remarks.com/ci-build-tools-for-newbies/&quot;&gt;видео&lt;/a&gt;, либо почитать о &lt;a href=&quot;http://automation-remarks.com/tri-sposoba-podniat-jenkins-ci-dlia-vashikh-avtotiestov/&quot;&gt;способах настройки&lt;/a&gt; Jenkins CI у себя на проекте.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой же заметке хочу немного пролить свет на то, как и где хранятся созданные вами задачи, ну и описать такой инструмент как Jenkins Job Builder, о котором я услышал от Алексея Солдатенко на прошедшем SeleniumCamp 2016. Только спустя неделю удалось попробовать этот инструмент.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сейчас все большую популярность набирает &lt;strong&gt;DevOps&lt;/strong&gt; направление, а автоматизаторы как никто близки по духу к этой специализации в IT. Когда автоматизатор умеет самостоятельно развернуть тестовую инфраструктуру - это круто. Так вот, чтобы ваша инфраструктура соответствовала духу InfrastructureAsCode, нужно очень хорошо разбираться в инструментах и их особенностях. Скажем, на моем прошлом проекте я был ответственен за настройку и поддержку Jenkins сервера и естественно переживал, дабы чего не хлопнулось, - поэтому делал бекапы. Правда, делал я это косо: просто архивировал папку &lt;strong&gt;${USR_HOME}/.jenkins&lt;/strong&gt; в tar архив. Достаточно топорно, зато надежно =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь же хочу поделиться некоторыми полезными советами, которые, возможно, помогут кому-то на проекте.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начну с того, что сейчас я предпочитаю запускать &lt;strong&gt;Jenkins в Docker&lt;/strong&gt; контейнере. Делается это простой командой:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;docker run --name myjenkins -p 8080:8080 -p 50000:50000
-v /your/home:/var/jenkins_home jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Эта штука отлично работает, в особенности если вам нужен Jenkins для каких-либо экспериментов. Более того, вы можете собрать Jenkins с предустановленными плагинами. Для этого нужно следовать инструкциям, описанным в разделе документации &lt;a href=&quot;https://github.com/jenkinsci/docker/blob/master/README.md&quot;&gt;Installing more tools&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мое мнение: если следовать этим путем, то можно каждый раз запускать Jenkins со всеми нужными плагинами, не тратя время на их ручную установку. Очень сильно экономит время, к тому же, не нужно держать в голове все имена нужных вам плагинов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;P.S. Почему-то на &lt;strong&gt;Windows 10&lt;/strong&gt; у меня эта штука не завелась.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если же вы хотите установить какой-то плагин, а его нету в Jenkins репозитории или вам нужна конкретная версия. Вы можете свободно скачать .hpi файлы из этого репозитория и потом просто скопировать их в папку &lt;strong&gt;.jenkins/plugins&lt;/strong&gt; и рестартовать ваш сервер.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь давайте посмотрим на создание &lt;strong&gt;Job Item&lt;/strong&gt;. Раньше я создавал все задачи вручную и особо не переживал, но вот, оказывается, есть отличный инструмент &lt;strong&gt;Jenkins Job Builder&lt;/strong&gt;, с помощью которого можно хранить конфигурации в &lt;strong&gt;Yaml&lt;/strong&gt; файлах. По умолчанию все созданные задачи хранятся в &lt;strong&gt;config.xml&lt;/strong&gt; файлах в папке &lt;strong&gt;.jenkins/jobs/${job_name}&lt;/strong&gt;. Вот пример такого &lt;strong&gt;config.xml&lt;/strong&gt; для задачи, которая всего лишь извлекает shell команду &lt;strong&gt;echo &quot;Hello&quot;&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;config.xml&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&amp;gt;
&amp;lt;project&amp;gt;
  &amp;lt;actions/&amp;gt;
  &amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;
  &amp;lt;keepDependencies&amp;gt;false&amp;lt;/keepDependencies&amp;gt;
  &amp;lt;properties/&amp;gt;
  &amp;lt;scm class=&quot;hudson.scm.NullSCM&quot;/&amp;gt;
  &amp;lt;canRoam&amp;gt;true&amp;lt;/canRoam&amp;gt;
  &amp;lt;disabled&amp;gt;false&amp;lt;/disabled&amp;gt;
  &amp;lt;blockBuildWhenDownstreamBuilding&amp;gt;false&amp;lt;/blockBuildWhenDownstreamBuilding&amp;gt;
  &amp;lt;blockBuildWhenUpstreamBuilding&amp;gt;false&amp;lt;/blockBuildWhenUpstreamBuilding&amp;gt;
  &amp;lt;triggers/&amp;gt;
  &amp;lt;concurrentBuild&amp;gt;false&amp;lt;/concurrentBuild&amp;gt;
  &amp;lt;builders&amp;gt;
    &amp;lt;hudson.tasks.Shell&amp;gt;
      &amp;lt;command&amp;gt;echo &amp;amp;quot;Hello&amp;amp;quot;&amp;lt;/command&amp;gt;
    &amp;lt;/hudson.tasks.Shell&amp;gt;
  &amp;lt;/builders&amp;gt;
  &amp;lt;publishers/&amp;gt;
  &amp;lt;buildWrappers/&amp;gt;
&amp;lt;/project&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Достаточно массивно, потому что в &lt;strong&gt;Yaml&lt;/strong&gt; формате это выглядит так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;config.yaml&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;- job:
    name: Test JJB
    description: &apos;Do not edit this job through the web!&apos;
    project-type: freestyle
    builders:
    - shell: echo &quot;Hello&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мое мнение: достаточно удобно, так как можно хранить конфигурации под системой контроля версий вместе с файлом плагинов и не переживать о возможном сбое сервера и потере всех настроек. Правда, разбираться с &lt;strong&gt;Jenkins Job Builder&lt;/strong&gt; тоже придется, так как не каждый может взять и сразу написать валидный &lt;strong&gt;Yaml&lt;/strong&gt; файл :) Но штука классная.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Увы про слейвы ничего такого нету, вы можете просто хранить в git файлы конфигурации из папки &lt;strong&gt;.jenkins/nodes/${node_name}/config.xml&lt;/strong&gt;, так как они не слишком большие.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вы хотите как-то похачить Jenkins, то вот &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Script+Console&quot;&gt;здесь&lt;/a&gt; есть много полезных скриптов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом все.. Если у вас есть чем поделиться, пишите, давайте шарить знания вместе.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              SeleniumCamp 2016: ретроспектива
          </title>
          <link>http://automation-remarks.com/seleniumcamp-2016-rietrospiektiva/index.html</link>
          <pubDate>Sun, 28 Feb 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">seleniumcamp-2016-rietrospiektiva/index.html</guid>
          <description>
                        Хочу поделиться своими впечатлениями от посещения конференции SeleniumCamp 2016
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу поделиться своими впечатлениями от посещения конференции &lt;a href=&quot;http://seleniumcamp.com/&quot;&gt;SeleniumCamp 2016&lt;/a&gt;, которая проходила 26-27 февраля 2016 года в Киеве.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://seleniumcamp.com/wp-content/themes/selenium/images/logo-color.svg&quot; alt=&quot;logo color&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Перед тем как рассказать о своих впечатлениях, своем выступлении (я был одним из спикеров) и немного поспойлерить о понравившихся докладах, хочу рассказать, как я вообще узнал об этой конференции.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Впервые я узнал о SeleniumCamp в 2013 году: копаясь в Youtube, случайно наткнулся на запись одного из докладов, посмотрел и нашел много полезного для себя. Так я пересмотрел все доклады с той конференции, и затем год за годом ждал записей после каждой новой конференции и где-то в глубинах души мечтал попасть на &lt;strong&gt;SeleniumCamp&lt;/strong&gt; лично.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В прошлом году я поставил себе цель - поехать на на SeleniumCamp 2016, более того, поехать в роли докладчика!!! Так что, как только я увидел в &lt;strong&gt;Twitter&lt;/strong&gt; объявление о начале регистрации, сразу же подал свой доклад.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как результат - я среди &lt;a href=&quot;http://seleniumcamp.com/speakers/&quot;&gt;спикеров&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Моей целью было рассказать и показать, чем Groovy может быть полезен автоматизаторам (без спойлеров, будет видео). В целом я доволен своим выступлением и, что важнее, на мой доклад пришло достаточно много людей.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я, конечно же, немного нервничал, так как на &lt;strong&gt;QAFest&lt;/strong&gt; у меня получилось немного смазанное выступление. Но все удалось, так как с момента выступления на QAFest я провел приличное количество лекций и различных публичных выступлений.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь, собственно, мои впечатления от самой конференции, организации и подбора тем. Могу сказать, что мои ожидания полностью оправдались: уровень организации, помощь в подготовке к докладу, ну и забота о докладчиках во время самой конференции были на высоком уровне. Меня порадовало то, что все доклады были направлены именно на технические аспекты автоматизации тестирования, без диких рассказов о менеджменте или развитии софт скиллов. Только хардкор! Как по мне, именно в этом и заключается основной успех этой конференции.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Несмотря на то, что в этот раз среди докладчиков были представители 10 стран, атмосфера была дружественной и, вопреки различиям в годах опыта и языковым барьерам, мы находили, о чем поговорить (в основном, конечно, об автоматизации =)) Скептики, которые утверждают, что конференции - это чушь, не правы. Конференция - это не только способ узнать что-то новое, это, в первую очередь, много знакомств, а если вы принимаете участие в качестве докладчика - это еще и огромный опыт, который можно получить только вот на такого рода мероприятиях.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Из докладов хочу отметить &lt;strong&gt;Николая Алименкова&lt;/strong&gt; и его мега-фреймворк,Игоря Хрола, который кодил на &lt;strong&gt;Ruby&lt;/strong&gt; прямо во время доклада и по традиции показал всем, как должна выглядеть пирамида автоматизации. Очень порадовал доклад &lt;strong&gt;Алексея Буля&lt;/strong&gt;, в котором он показал один из способов разделить тестирование back-end и ui. Действительно полезным стал доклад Андрея Солдатенко, который показал способ настройки &lt;strong&gt;Jenkins CI&lt;/strong&gt;, теперь я точно не буду настраивать его каждый раз руками;) Во второй день мне больше всего понравился доклад Сергея Короля - простые, но очень полезные советы по прикручиванию Hibernate и TestNG. Ну и завершил для меня конференцию доклад о тестировании Android и IOS приложений с помощью appium от Justin Ison (Germany). Теперь я знаю, как разворачивать Mobile Grid. Напоследок: я вчера уже благодарил организаторов за предоставленную возможность выступить. Хочу сказать еще раз большое спасибо! Я рад, что стал частью &lt;strong&gt;SeleniumCamp 2016&lt;/strong&gt;, и, надеюсь, мы увидимся в следующем году;)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Боль при параллелизации тестов
          </title>
          <link>http://automation-remarks.com/bol-parallielizatsii-tiestov/index.html</link>
          <pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">bol-parallielizatsii-tiestov/index.html</guid>
          <description>
                        Хочу поделиться личным опытом параллелизации тестов и выводами, которые я для себя сделал.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу поделиться личным опытом параллелизации тестов и выводами, которые я для себя сделал.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сейчас писать автоматические тесты умеет практически каждый. Роль автоматизации растет, все больше проектов начинают применять автоматизацию тестирования в том или ином виде. Большинство людей думает, что делать автоматизацию - это просто. Смотрим пару роликов в Youtube, берем связку Selenium + TestNG и все - мы автоматизаторы, которые будут делать успешную автоматизацию. В такие моменты у людей, познавших дзен, находится только один аргумент:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://301-1.ru/gen-mems/img_mems/7f80a5765fb2e99d2b55a2da20504d19.jpg&quot; alt=&quot;7f80a5765fb2e99d2b55a2da20504d19&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Чего не учитывают многие, стартуя автоматизацию у себя на проекте?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Сколько будет автоматизировано тестов и какого рода они будут?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Сколько примерно времени будет занимать прогон всех автотестов?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Почему эти вопросы нужно задавать себе? Потому что архитектура и проекта, и самих тестов будет зависеть от этих факторов. Особенно если перед вами стал вопрос параллелизации тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Обычная история на проектах: тесты пишутся и запускаются в одном потоке, люди не брезгуют сделать тесты зависимыми, не особо задумываясь над последствиями. Не переживайте, я тоже так делал =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот к каким выводам я пришел впоследствии.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если пишем автотесты для &lt;strong&gt;REST API&lt;/strong&gt;, то никаких зависимостей между тестами быть не должно! Эти тесты сами по себе достаточно быстрые и нужда в их параллелизации возникает редко, но даже если уж так все у вас долго и хочется из 5-10 минут выжать 1 минуту, то проблем быть не должно, так как CRUD операции параллелятся на раз-два. Единственное, где вы можете напороться на проблемы, - это уникальность данных.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если пишем автотесты на UI, то здесь может возникнуть масса сложностей. Обычно основным источником являются тесты, тестовые данные, браузеры и их драйверы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если пишем автотесты на UI, то здесь может возникнуть масса сложностей. Обычно основным источником являются тесты, тестовые данные, браузеры и их драйверы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Да, благо что есть Selenium Grid, но и при работе с ним возникает куча проблем. К примеру, отвалившаяся или зависшая нода. Да, все эти проблемы решаемы, но я бы начал решать проблемы еще на этапе самой задумки.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Необходимость гнать тесты в параллель обычно возникает при их большом количестве и, соответственно, большом времени прогона. А теперь внимание: не всегда для ускорения тестов нужно их распараллеливать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Первое: следует подумать, а нужно ли нам так много UI тестов? Может быть, мы будем проверять только функциональность нашего UI, а не всякие рюшечки, для которых Selenium не придумывался? Лучше иметь 100, но стабильных тестов, чем 1000 постоянно требующих внимания нестабильных.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Второе: нужно сначала попытаться оптимизировать тесты на уровне кода. Пример из моего проекта: у нас было 500 UI тестов (да, можно сказать,что до хрена, но там была риск менеджмент система с кучей формочек и попапов) и общее время прогона тестов на тот момент составляло 16 часов!!. Я понимал, что у нас не все ОК, и начал искать узкие места в коде. Поубирав все Thread.sleep и переписав пару методов на вызов JS функций, я сократил время в два раза и у нас появилась возможность прогонять их за 8 часов. Таким образом мне удалось ускорить тесты и сохранить их стабильность и работоспособность.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самая большая боль параллельных UI тестов - их высокая нестабильность. И перед тем, как сказать &quot;да, мы готовы к нестабильным тестам&quot;, подумайте: а оно вам нужно? Лично я отдаю предпочтение стабильным и надежным автотестам, что подтверждается графиком из Jenkins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;image::/images/jenkins_trend.jpg&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этой мажорной ноте желаю вам думать о параллелизации еще на самом старте проекта и отдавать предпочтение автоматизации, которая делает свою работу и приносит пользу проекту в целом. Спасибо, что вы с нами&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Анонс SQA Days 19
          </title>
          <link>http://automation-remarks.com/anons-sqa-days-19/index.html</link>
          <pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">anons-sqa-days-19/index.html</guid>
          <description>
                        Компания &quot;Лаборатория тестирования&quot; объявила даты проведения Software Quality Assurance Days...
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Компания &quot;Лаборатория тестирования&quot; объявила даты проведения Software Quality Assurance Days - крупнейшей в СНГ международной конференции по вопросам качества программного обеспечения. Следующая, девятнадцатая по счету конференция пройдет 20-21 мая в Санкт-Петербурге. Культурная столица примет конференцию уже в четвертый раз.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ожидается, что SQA Days-19 посетят не менее 600 гостей из различных стран ближнего и дальнего зарубежья. Как и на предыдущих SQA Days, здесь будут обсуждаться разнообразные вопросы обеспечения качества: от глобальных тенденций в QA-индустрии до частных, но не менее важных и интересных случаев применения различных методов и инструментов на реальных проектах.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Технический трек конференции традиционно уделит много внимания автоматизированному тестированию: среди заявленных тем - актуальные &quot;фреймворки&quot;, приемы и технологии, а также их практическое использование при разработке и поставке ПО.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Не будут забыты и другие не теряющие актуальности профессиональные области: функциональное тестирование, тестирование безопасности и поиск уязвимостей, а также тестирование пользовательских интерфейсов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Наконец, ожидаются доклады на такие востребованные темы, как управление тестированием, эффективная работа с партнерами и заказчиками, организация работы команд тестировщиков, профессиональное обучение специалистов в области Quality Assurance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пока расписание конференции формируется, организаторы будут рады конструктивным предложениям и, конечно же, новым докладчикам. Предложить собственный доклад на конференцию можно через форму на сайте SQA Days.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Красивый Soft Assert
          </title>
          <link>http://automation-remarks.com/dieistvitielno-krasivyi-soft-assert/index.html</link>
          <pubDate>Sun, 24 Jan 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">dieistvitielno-krasivyi-soft-assert/index.html</guid>
          <description>
                        Пользовались ли вы когда-либо ассертами? Автоматизаторы не понаслышке знают, что это такое и как им пользоваться.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пользовались ли вы когда-либо ассертами? Автоматизаторы не понаслышке знают, что это такое и как им пользоваться. Я уже писал о &lt;a href=&quot;http://automation-remarks.com/davaitie-poghovorim-pro-asserty/&quot;&gt;библиотеках&lt;/a&gt;, которые упрощают написание ассертов и делают их более читабельными.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой заметке хочу поговорить о &lt;strong&gt;soft assert&lt;/strong&gt;. Лично я ими раньше не пользовался, потому что не совсем понятно было, как оно поможет, да в количестве строк кода написание таких ассертов было делом затратным.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот, скажем, пример &lt;strong&gt;SoftAssert&lt;/strong&gt; и &lt;strong&gt;TestNG&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

public class SoftAsert
{
    @Test
    public void test()
    {
        SoftAssert asert=new SoftAssert();
        asert.assertEquals(false, true,&quot;failed&quot;);
        asert.assertEquals(0, 1,&quot;brokedown&quot;);
        asert.assertAll();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вроде как работает, но выглядит ужасно. К тому же, каждый раз нужно создавать объект и в конце писать &lt;strong&gt;assertAll()&lt;/strong&gt;. И это не прихоть одной конкретной библиотеки, такой принцип у всех.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу поделиться своим видением ситуации. Если вам что-то не нравится, попробуйте изменить ситуацию. Я так и сделал и заменил &lt;strong&gt;Java&lt;/strong&gt; на &lt;strong&gt;Groovy&lt;/strong&gt;. Закоренелые читатели блога это заметили давно. Почему? Потому, что &lt;strong&gt;Groovy&lt;/strong&gt; позволяет мне быть эффективнее в 2.5-3 раза. Код выглядит читабельнее и проще.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Стоит посмотреть на &lt;a href=&quot;http://automation-remarks.com/groovy-page/&quot;&gt;page object&lt;/a&gt;. Ну или на &lt;a href=&quot;http://automation-remarks.com/rest-clients/&quot;&gt;REST Client&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;До этого момента в Groovy был очень крутой &lt;strong&gt;assert&lt;/strong&gt;, а soft assert не было.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь есть, и выглядит он так!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;softAsserts {
    expect &quot;foo&quot;, equalTo(&quot;bar&quot;)
    expect 1, equalTo(1)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Круто, не правда ли? Мне такой подход к делу нравится больше. К тому же, в этом коде везде работает автодополнение, а сами ассерты являются оберткой над Hamcrest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Реализация этого счастья выглядит так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class SoftAsserts {
    def static failedAssertions = []

    static softAsserts(Closure closure) {
        new SoftAsserts().bundleAsserts(closure)
    }

    private bundleAsserts(Closure closure) {
        closure.resolveStrategy = Closure.DELEGATE_ONLY
        closure.delegate = this
        closure()

        if (failedAssertions) {
            throw new AssertionError(&quot;${failedAssertions.size()}
            failed assertions found:\n ${failedAssertions.
            message.join(&apos;\n&apos;)}&quot;.toString())
        }
    }

    public static &amp;lt;T&amp;gt; void expect(T actual, Matcher&amp;lt;? super T&amp;gt; matcher) {
        expect(&quot;&quot;, actual, matcher)
    }

    public static &amp;lt;T&amp;gt; void expect(String reason, T actual, Matcher&amp;lt;? super T&amp;gt; matcher) {
        try {
            if (!matcher.matches(actual)) {
                Description description = new StringDescription();
                description.appendText(reason)
                        .appendText(&quot;\nExpected: &quot;)
                        .appendDescriptionOf(matcher)
                        .appendText(&quot;\n     but: &quot;);
                matcher.describeMismatch(actual, description);

                throw new AssertionError(description.toString());
            }
        } catch (AssertionError e) {
            failedAssertions &amp;lt;&amp;lt; e
        }
    }

    public static void expect(String reason, boolean assertion) {
        if (!assertion) {
            try {
                throw new AssertionError(reason);
            } catch (AssertionError e) {
                failedAssertions &amp;lt;&amp;lt; e
            }
        }
    }

    def invokeMethod(String name, args) {
        try {
            def actual = args[0]
            def expected = args[1]
            assert actual == expected
        } catch (AssertionError e) {
            failedAssertions &amp;lt;&amp;lt; e
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все предельно просто - один класс, в котором реализована вся логика.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Тесты с применением этих ассертов становятся очень красивыми и понятными:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;def endpoint = &apos;http://swapi.co/api/&apos;
def client = new RESTClient(endpoint)
def response = client.get(path:&apos;people/1/&apos;,accept: ContentType.JSON,headers:[&apos;User-agent&apos;:&apos;firefox&apos;])

softAsserts {
    expect response.statusCode, is(200)
    expect response.json.name, equalTo(&apos;Luke Skywalker&apos;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Лаконичный PageObject с GroovyPage + Selenide
          </title>
          <link>http://automation-remarks.com/groovy-page/index.html</link>
          <pubDate>Sat, 16 Jan 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">groovy-page/index.html</guid>
          <description>
                        Не буду писать много вступительных речей, скажу сразу: если вы давно задумывались над оптимизацией ваших page объектов или хотели бы видеть, как это делают другие, то вам сюда.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Не буду писать много вступительных речей, скажу сразу: если вы давно задумывались над оптимизацией ваших page объектов или хотели бы видеть, как это делают другие, то вам сюда.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вы не знакомы с паттерном page object, то вот &lt;a href=&quot;http://www.protesting.ru/automation/practice/pageobject_selenium.html&quot;&gt;ссылка&lt;/a&gt; напочитать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если же вы знакомы с этим паттерном, то вы его пишете примерно так, как показано в этих &lt;a href=&quot;http://internetka.in.ua/selenium-page-object/&quot;&gt;примерах&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Не имею ничего против этого паттерна, сам такое же писал. Более того, применение page объектов, я считаю обязательным, при том в самом начале проекта. Привыкайте делать все правильно с самого начала.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но достаточно ли стандартного page оbject в суровой реальности? Беру на себя смелость сказать &quot;нет&quot;, так как web приложения стали компонентными, страницы и их контент становится все динамичнее и динамичнее, а наши фреймворки все так же статичны.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Перед тем, как перейти к самому главному, стоит отметить, что самый крутой на нынешний момент фреймворк для написания UI тестов Selenide поддерживает работу с page объектами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Казалось бы, все есть и очередной блогер решил &quot;закапитанить&quot; о всем давно известном паттерне. Нет! На самом деле я хочу поделиться с вами своей реализацией этого паттерна.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://risovach.ru/upload/2013/05/mem/nu-davay-taya-rasskazhi-kak-ty-men_19565671_big_.jpeg&quot; alt=&quot;nu davay taya rasskazhi kak ty men 19565671 big &quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще очень давно я узнал о таком фреймворке для написания UI тестов как Geb. Отличный инструмент, написанный на Groovy и предназаченый для написания тестов на нем же. Если вы окунетесь в документацию, то можете заметить, что Geb - это тот же Selenide, с той лишь только разницей, что Geb не умеет так &quot;умно&quot; ждать состояний элементов. Плюс ко всему, в репозиторий Geb последний раз коммитили 5 лет назад, в отличие от Selenide, который активно развивается.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И тем не менее есть у Geb одна классная штука - page object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Внимание!!! Все знаки $ в куске кода, показанного ниже, никакого отношения к Selenide не имеют - это все чистый Geb. Да, у него тоже поиск элементов через знак доллара.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import geb.Page

class LoginPage extends Page {
    static url = &quot;http://myapp.com/login&quot;
    static at = { heading.text() == &quot;Please Login&quot; }
    static content = {
        heading { $(&quot;h1&quot;) }
        loginForm { $(&quot;form.login&quot;) }
        loginButton(to: AdminPage) { loginForm.login() }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лаконичный и читабельный page object. НО! Как всегда есть один недостаток - эта штука работает только с нативными методами Geb, нельзя так просто взять его и использовать с тем же Selenide или чистым WebDriver. Вот такая пИчалька, можно было бы ставить точку и закрывать лавочку.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но нет, я потратил достаточное количество времени и сил,чтобы разобраться в том, как работает Geb и сделал свою реализацию geb page object, которую можно использовать как с Selenide, так и с WebDriver. Я решил назвать эту штуку GroovyPage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Весь код ниже теперь уже будет использовать &lt;strong&gt;Selenide&lt;/strong&gt;!!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import static com.codeborne.selenide.Selenide.$

class MainPage extends Page{

    static url = &quot;http://ukr.net&quot;

    static content = {
        login {$ &apos;.login input&apos;}
        password {$ &apos;.password input&apos;}
        submitBtn {$ &apos;.submit button&apos;}
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Тесты в таком исполнении будут выглядеть так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    public void shouldLogin(){
        MainPage mainPage = go MainPage
        mainPage.login.val &quot;test&quot;
        mainPage.password.val &quot;test&quot;
        mainPage.submitBtn.click()
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметили разницу? Обращение к элементам идет как к свойствам объекта. Все поля, объявленные внутри блока &apos;content&apos;, являются &lt;strong&gt;SelenideElement&lt;/strong&gt;. Но и это еще не все приятности на данный момент. Используя силу &lt;strong&gt;Groovy&lt;/strong&gt;, есть возможность писать тесты так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    public void shouldLogin(){
        MainPage mainPage = go MainPage
        mainPage.login &amp;lt;&amp;lt; &quot;test&quot;
        mainPage.password &amp;lt;&amp;lt; &quot;test&quot;
        mainPage.submitBtn.click()
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом случае метод leftShift переопределен и выполняет те же действия, что и метод val.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и самая последняя фича, доступная на данный момент - Page компоненты. Перепишем нашу &lt;strong&gt;MainPage&lt;/strong&gt; c использованием компонента &lt;strong&gt;LoginForm&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class LoginForm extends Page{

    static content = {
        login {$ &apos;.login input&apos;}
        password {$ &apos;.password input&apos;}
        submitBtn {$ &apos;.submit button&apos;}
    }
}

class MainPageWithComponent {

    static url = &quot;http://ukr.net&quot;

    @Component
    LoginForm loginForm
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Тест в таком случае будет выглядеть так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    public void shouldLogin(){
        MainPageWithComponent mainPage = go MainPageWithComponent
        mainPage.loginForm.login &amp;lt;&amp;lt; &quot;test&quot;
        mainPage.loginForm.password &amp;lt;&amp;lt; &quot;test&quot;
        mainPage.loginForm.submitBtn.click()
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Применяя магию, тест будет выглядеть так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    public void shouldLogin(){
        MainPageWithComponent mainPage = go MainPageWithComponent
        mainPage.loginForm.with{
                 login &amp;lt;&amp;lt; &quot;test&quot;
                 password &amp;lt;&amp;lt; &quot;test&quot;
                 submitBtn.click()
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Какие недостатки? Недостаток один - такой код можно писать только используя динамику Groovy, строгий компилятор Java такие выкрутасы не пропустит. И да, Intelij Idea весь этот синтаксис понимает и везде работает автодополнение.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом у меня все, если у вас буду вопросы или пожелания, пишите - будем развивать отрасль вместе.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Оставайтесь на связи, подписывайтесь на группы в Facebook и &lt;a href=&quot;https://github.com/SergeyPirogov/GroovyPage&quot;&gt;Вконтакте&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Работа с базой данных без боли и страданий
          </title>
          <link>http://automation-remarks.com/working-with-database/index.html</link>
          <pubDate>Sat, 9 Jan 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">working-with-database/index.html</guid>
          <description>
                        Уже очень давно я писал заметку про работу с базой данных с использованием Groovy.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Уже очень давно я писал &lt;a href=&quot;http://automation-remarks.com/maghiia-groovy-i-sql/&quot;&gt;заметку&lt;/a&gt; про работу с базой данных с использованием &lt;strong&gt;Groovy&lt;/strong&gt;. В этот раз хочу более глубоко раскрыть тему.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://2.bp.blogspot.com/-vJbX3sRQTiI/UrpyumG5TkI/AAAAAAAAAbI/Q5kGfDXBPVE/s1600/sql+basis+data.png&quot; alt=&quot;sql+basis+data&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, допустим, вам нужно работать с базой данных: выполнять запросы, вызывать хранимые процедуры, возможно, записывать какие-то данные. Стандартом работы с базами данных в java является &lt;strong&gt;JDBC&lt;/strong&gt;. Но вот код, написанный с использованием &lt;strong&gt;jdbc&lt;/strong&gt;, выглядит не очень:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
public class JDBCExample1 {
  public static void main(String[] args) {
    Connection con = null;
    Statement stmt = null;
    ResultSet rs = null;
    try{
      Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;);
      con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/words&quot;,
           &quot;words&quot;, &quot;words&quot;);
      stmt = con.createStatement();
      rs = stmt.executeQuery(&quot;select * from word&quot;);
      while (rs.next()) {
        System.out.println(&quot;word id: &quot; + rs.getLong(1) +
            &quot; spelling: &quot; + rs.getString(2) +
            &quot; part of speech: &quot; + rs.getString(3));
      }
    }catch(SQLException e){
      e.printStackTrace();
    }catch(ClassNotFoundException e){
      e.printStackTrace();
    }finally{
      try{rs.close();}catch(Exception e){}
      try{stmt.close();}catch(Exception e){}
      try{con.close();}catch(Exception e){}
   }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Писать такой код очень не хотелось бы, тем более в тестовом фреймворке, который должен быть легковесным. Что же можно с этим сделать? Нужно использовать библиотеки, которые значительно облегчат жизнь.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;1. JDBI&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Имплементация этой библиотеки схожа с Groovy SQL. C использованием JBDI библиотеки можно будет писать такой вот код:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;DataSource ds = JdbcConnectionPool.create(&quot;jdbc:h2:mem:test&quot;,
                                          &quot;username&quot;,
                                          &quot;password&quot;);
DBI dbi = new DBI(ds);
Handle h = dbi.open();
h.execute(&quot;create table something (id int primary key, name varchar(100))&quot;);
h.execute(&quot;insert into something (id, name) values (?, ?)&quot;, 1, &quot;Brian&quot;);
String name = h.createQuery(&quot;select name from something where id = :id&quot;)
                    .bind(&quot;id&quot;, 1)
                    .map(StringMapper.FIRST)
                    .first();

assertThat(name, equalTo(&quot;Brian&quot;));
h.close();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Очень не кисло и читабельно, более того - можно запросы мапить на объекты, что позволит еще больше упростить жизнь.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2. JOOQ&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Библиотека, о которой я читал давно, но вот только сейчас руки дошли поработать с ней. Скажу сразу, я с ней просто игрался. Впечатление двоякое: во-первых, почему-то есть бесплатная и платная версия, во-вторых, она умеет делать кучу всего, чего только душе угодно, и из-за этого повышается сложность работы с ней. Пример кода:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;select(KeyColumnUsage.CONSTRAINT_NAME, KeyColumnUsage.TABLE_NAME, KeyColumnUsage.COLUMN_NAME)
                .from(KEY_COLUMN_USAGE).join(TABLE_CONSTRAINTS)
                .on(KeyColumnUsage.TABLE_SCHEMA.equal(TableConstraints.TABLE_SCHEMA))
                .and(KeyColumnUsage.TABLE_NAME.equal(TableConstraints.TABLE_NAME))
                .and(KeyColumnUsage.CONSTRAINT_NAME.equal(TableConstraints.CONSTRAINT_NAME))
                .where(TableConstraints.CONSTRAINT_TYPE.equal(constraintType))
                .and(KeyColumnUsage.TABLE_SCHEMA.equal(getSchemaName()))
                .orderBy(KeyColumnUsage.TABLE_NAME.ascending(), KeyColumnUsage.ORDINAL_POSITION.ascending()).fetch()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично мое мнение: я бы не использовал ее на проекте, лучше уж что-то попроще, чем такие куски не совсем читабельного и плохо отлаживаемого кода.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;3. Querydsl&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще одна библиотека из разряда навороченных. Умеет делать кучу всего полезного. Код, который можно писать, выглядит вот так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;List&amp;lt;Person&amp;gt; persons = queryFactory.selectFrom(person)
  .where(
    person.firstName.eq(&quot;John&quot;),
    person.lastName.eq(&quot;Doe&quot;))
  .fetch();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мое мнение: слишком уж навороченная. К тому же, документация достаточно запутанная. Не люблю, когда для чего-то простого нужно перечитать тонну документации.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;4. Sql2o&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Достаточно симпатичная библиотека, которая позволит вещи делать быстро и просто. На странице Github сами же разработчики пишут, что Sql2o является самой производительной библиотекой. Лично не проверял, оставил этот момент на совести разработчиков. Код можно писать такой:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Task{
    private int id;
    private String category;
    private Date dueDate;

    // getters and setters here
}

Sql2o sql2o = new Sql2o(DB_URL, USER, PASS);

String sql =
    &quot;SELECT id, category, duedate &quot; +
    &quot;FROM tasks &quot; +
    &quot;WHERE category = :category&quot;;

try(Connection con = sql2o.open()) {
    List&amp;lt;Task&amp;gt; tasks = con.createQuery(sql)
        .addParameter(&quot;category&quot;, &quot;foo&quot;)
        .executeAndFetch(Task.class);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Личное мнение: все достаточно просто и удобно, хорошая документация с четкими и понятными примерами. Одно удручает - вот эти вот строки SQL с конкатенациями =(&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;5. Groovy SQL&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Не могу не написать про Groovy еще раз. Ну вот нравится мне этот язык за гибкость и отсутствие &lt;strong&gt;boilerplate&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Только теперь я расскажу о том, как я написал свою обертку над стандартым DataSet и добавил метод удаления, которого у стандартного класса нету.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, чего хотелось? Хотелось уметь удалять записи из базы в таком вот виде:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;employees.delete {it.id &amp;gt; 5}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но такой возможности не было, делать select можно, а удалять нет. Что ж, пришлось написать такой вот класс:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class DataTable {

    @Delegate
    DataSet dataSet

    DataTable(Sql sql, Class&amp;lt;?&amp;gt; type) {
        dataSet = sql.dataSet(type)
    }

    def delete(Closure where) {
        def visitor = getSqlWhereVisitor(where)
        def whereClause = visitor.getWhere()
        def params = visitor.getParameters()
        def sql = &quot;DELETE FROM ${dataSet.@table} WHERE &quot; + whereClause
        dataSet.@delegate.executeUpdate(sql, params)
    }

    protected SqlWhereVisitor getSqlWhereVisitor(Closure where) {
        def visitor = new SqlWhereVisitor();
        visit(where, visitor);
        return visitor;
    }

    private void visit(Closure closure, CodeVisitorSupport visitor) {
        if (closure != null) {
            ClassNode classNode = closure.getMetaClass().getClassNode();
            if (classNode == null) {
                throw new GroovyRuntimeException(
                        &quot;DataSet unable to evaluate expression. AST not available for closure: &quot; + closure.getMetaClass().getTheClass().getName() +
                                &quot;. Is the source code on the classpath?&quot;);
            }
            List methods = classNode.getDeclaredMethods(&quot;doCall&quot;);
            if (!methods.isEmpty()) {
                MethodNode method = (MethodNode) methods.get(0);
                if (method != null) {
                    Statement statement = method.getCode();
                    if (statement != null) {
                        statement.visit(visitor);
                    }
                }
            }
        }
    }

    def add(Map... maps) {
        for (row in maps) {
            dataSet.add(row)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После этого появилась возможность делать такие вот приятные штучки:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Canonical
class Employee {
    Integer id
    String name
    String lastName
    Integer age
    Integer department
}

dbSettings = [
        url: &apos;jdbc:hsqldb:hsql://localhost/cookingdb&apos;,
        driver: &apos;org.hsqldb.jdbcDriver&apos;,
        user: &apos;sa&apos;,
        password: &apos;&apos;
]

def db = Sql.newInstance(dbSettings)
def employees = new DataTable(db, Employee)

employees.add(
        [id: 5, name: &quot;vova&quot;, lastName: &quot;ivliv&quot;],
        [id: 8, name: &quot;viktor&quot;, lastName: &quot;lovliv&quot;],
        [id: 1, name: &quot;adam&quot;, lastName: &quot;bomobm&quot;, age: 23, department: &quot;5&quot;]
)

employees.delete { it.id == 5 || it.id == 6 }

employees.findAll { it.id &amp;gt; 0 }.rows()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Один горький недостаток этого подхода - нельзя параметризовать запросы. Такой вот код не сработает:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;def userId = 0
employees.findAll { it.id &amp;gt; userId }.rows()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Не очень удобно конечно, но это легко объезжается на велосипеде =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def query = employees.findAll { it.id == &quot;:id&quot; &amp;amp;&amp;amp; it.name == &quot;:name&quot; }.sql

db.eachRow(query, [id: 3, name: &quot;ivan&quot;]) {
    println it
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этот раз все.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Как автоматизатору побороть SSH
          </title>
          <link>http://automation-remarks.com/ssh/index.html</link>
          <pubDate>Sun, 3 Jan 2016 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">ssh/index.html</guid>
          <description>
                        Я решил не тратить время попусту и в этот короткий промежуток между праздниками написать небольшую заметку.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хоу-хоу, надеюсь все отлично встретили Новый год и теперь ждут Рождества. Я решил не тратить время попусту и в этот короткий промежуток между праздниками написать небольшую заметку. В этот раз напишу о возможных вариантах работы с &lt;strong&gt;SSH&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcSIluTpLycP4jpvVo3Y0WeOulr4QuhdBSp4Yg6r1doJY4IEX0wx0Q&quot; alt=&quot;images?q=tbn:ANd9GcSIluTpLycP4jpvVo3Y0WeOulr4QuhdBSp4Yg6r1doJY4IEX0wx0Q&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я думаю, что люди, работающие с Linux, имеют достаточно хороший опыт работы с ssh. Для тех же, кто не знает и не пробовал, рекомендую почитать про &lt;strong&gt;ssh&lt;/strong&gt;, &lt;strong&gt;putty&lt;/strong&gt;, установить виртуалку с помощью &lt;a href=&quot;http://automation-remarks.com/vagrant/&quot;&gt;Vagrant&lt;/a&gt; и поиграться.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Приступим ближе к делу: зачем оно автоматизаторам и зачем я вообще затронул эту тему? Все очень просто! Если у вас на проекте есть linux сервера, то вам не избежать работы с ssh. У меня был опыт реализации такой задачи, когда нам нужно было закидывать конфигурационные файлы на сервер и смотреть, как себя поведет система после таких изменений. Делать это руками интересно, но только в первый раз =) Я заавтоматизировал этот процесс.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Тогда я был маленьким джуниором и мое решение свелось к использованию библиотеки &lt;strong&gt;Jsch&lt;/strong&gt;. Штука работала, но пришлось нахвататься проблем и опыта. Не буду вдаваться в подробности, просто посмотрите пример реализации &lt;a href=&quot;http://www.jcraft.com/jsch/examples/Shell.java.html&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Гораздо проще пользоваться библиотеками-обертками, к примеру &lt;a href=&quot;http://ssh.jcabi.com/&quot;&gt;Jcabi-ssh&lt;/a&gt;. Здесь и кода меньше и выглядит он поприятнее:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.jcabi.ssh.Shell;
import com.jcabi.ssh.SSH;
Shell shell = new SSH(&quot;example.com&quot;, 22, &quot;username&quot;, &quot;password&quot;);
String stdout = new Shell.Plain(shell).exec(&quot;echo &apos;Hello, world!&apos;&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но все равно как-то выглядит не очень элегантно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Абсолютным победителем для меня является библиотека - &lt;a href=&quot;https://github.com/aestasit/sshoogr&quot;&gt;sshoogr&lt;/a&gt;. По сути - это Groovy DSL для работы с SSH.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Посмотрите, как легко с ней работать:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Grab(&apos;com.aestasit.infrastructure.sshoogr:sshoogr:0.9.18&apos;)
import static com.aestasit.infrastructure.ssh.DefaultSsh.*

remoteSession(&apos;user2:654321@localhost:2222&apos;) {
  exec &apos;rm -rf /tmp/*&apos;
  exec &apos;touch /var/lock/my.pid&apos;
  remoteFile(&apos;/var/my.conf&apos;).text = &quot;enabled=true&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что стало для меня самым приятным, так это работа с файлами. К примеру:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;def file = &quot;/root/home/test.txt&quot;
 def selenium = &quot;selenium-server-standalone-2.48.2.jar&quot;

 //write to file
 remoteFile(file).text = &quot;Hello&quot;

 //read from file
 print remoteFile(file).text

 //copy file to remote host
 scp {
      from { localFile &quot;/root/home/${selenium}&quot;}
      into { remoteFile &quot;/root/remote/${selenium}&quot; }
 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот как можно легко и просто делать вещи. Не нужно париться с тысячей try-catch блоков, просто бери и делай. А самое важное здесь то, что все это является кодом, вы можете писать свои функции и использовать их, вы можете использовать мощь &lt;strong&gt;GString&lt;/strong&gt; для параметризации и многие другие фишки &lt;strong&gt;Groovy&lt;/strong&gt;. Я жалею, что узнал о ней только когда начал разбираться с &lt;strong&gt;Groovy&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P.S&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В бочке меда не без ложки дегтя: у меня почему-то не сработал вариант конфигурации:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;remoteSession {

  host = &apos;localhost&apos;
  username = &apos;user2&apos;
  password = &apos;654321&apos;
  port = 2222

  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Возможно, я что-то недосмотрел, но во всех остальных случаях работает отлично. На этом все! спасибо, что читали. Возможно, эта заметка поможет в будущем решать подобные проблемы проще и эффективнее. Счастливого Рождества всем! Подписывайтесь - в 2016 будем на связи&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Делаем матчеры веселее с Groovy
          </title>
          <link>http://automation-remarks.com/groovy-matcher/index.html</link>
          <pubDate>Tue, 22 Dec 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">groovy-matcher/index.html</guid>
          <description>
                        Последняя заметка в этом году. Я думаю, что активные читатели давно заметили мою склонность к Groovy.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Последняя заметка в этом году. Я думаю, что активные читатели давно заметили мою склонность к Groovy. Я уже писал ряд заметок как о Groovy, так и о создании матчеров для Hamcrest. Теперь опишу свою борьбу с написанием такого же матчера только в Groovy style.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://i.ytimg.com/vi/juHgQBB2tLU/hqdefault.jpg&quot; alt=&quot;hqdefault&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Перед началом написания кода и шевеления извилинами, покажу интересный инструмент от Yandex, который позволяет генерировать метчеры для ваших доменных объектов - смотреть &lt;a href=&quot;https://github.com/yandex-qatools/hamcrest-pojo-matcher-generator&quot;&gt;здесь&lt;/a&gt;. Единственный недостаток этой штуки: если у вас нету возможности натыкать аннотаций в объектах, то придется писать самим.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если у вас нету возможности воспользоваться инструментом, описанным выше, велкам кодить матчеры самостоятельно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, сначала напишем наш доменный класс:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@ToString
class Person {
    String name, phone
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После написания метчеров у нас будет такая вот штука:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;Person p = new Person(name: &quot;Ivan&quot;, phone: &quot;0661234567&quot;)

assertThat(p, hasName(&quot;Ivan&quot;))
assertThat(p, withPhone(&quot;0661234567&quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и в случае ошибки ожидаем увидеть сообщение:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Exception in thread &quot;main&quot; java.lang.AssertionError:
Expected: person with phone 1235678
     but: was 0661234567&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начнем реализовывать метод &lt;strong&gt;hasName&lt;/strong&gt;. Стандартная реализация будет выглядеть так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def hasName(String name) {
    new TypeSafeMatcher&amp;lt;Person&amp;gt;() {
        @Override
        protected boolean matchesSafely(Person p) {
            name == p.name
        }

        @Override
        void describeTo(Description description) {
            description.appendText(&quot;a Person with name &quot;).appendValue(name)
        }

        @Override
        protected void describeMismatchSafely(Person person, Description mismatchDescription) {
            mismatchDescription.appendText(&quot;was &quot;).appendValue(person.name)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ничего особо военного, анонимный метод и реализация трех методов - не слишком в стиле Groovy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте же поправим это все. Groovy крут из-за такой его возможности, как metaprogramming. Прибегая к чудесам метапрограммирования, мы можем в классе &lt;strong&gt;Description&lt;/strong&gt; переопределить метод leftShift:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;Description.metaClass.leftShift = { text -&amp;gt;
    delegate.appendText(text.toString())
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь, используя полученный метод &amp;lt;&amp;lt;, напишем наш матчер:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static hasName(String name) {
    [
       matchesSafely: { name == it.name },
       describeTo: { it &amp;lt;&amp;lt; &quot;a person with name&quot; + name },
       describeMismatchSafely: { item, descr -&amp;gt; descr &amp;lt;&amp;lt; &quot;was &quot; + item.name }
    ] as TypeSafeMatcher&amp;lt;Person&amp;gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Оба-на! кода стало в разы меньше и его читаемость улучшилась. Правда ухудшилась степень понимания, особенно если вы не знаете таких слов, как Closure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;От себя хочу добавить, что подход с реализацией интерфейса через Map в случае с тремя методами не очень удачен, вот если бы у нас был один метод, тогда бы было все очень красиво и просто.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте же посмотрим на упрощение реализации с тремя методами. Реализовываем класс GroovyMatcher&amp;lt;T&amp;gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;abstract class GroovyMatcher&amp;lt;T&amp;gt; extends TypeSafeMatcher&amp;lt;T&amp;gt; {
    private Description description = new StringDescription()
    private Description mismatchDescription = new StringDescription()

    @Override
    boolean matchesSafely(T item) {
        match(item, description, mismatchDescription)
    }

    @Override
    void describeTo(Description description) {
        description &amp;lt;&amp;lt; this.description
    }

    @Override
    void describeMismatchSafely(T item, Description mismatchDescription) {
        mismatchDescription &amp;lt;&amp;lt; this.mismatchDescription
    }

    abstract boolean match(T item, Description description, Description mismatchDescription)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все достаточно стандатно, но давайте теперь применим магию Groovy. В написанном нами классе GroovyMatcher нам нужно реализовать всего один абстрактный метод match. Пишем матчер для проверки номера телефона withPhone:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;static withPhone(String actual) {
        { item, description, mismatchDescription -&amp;gt;
            def expected = item.phone
            description &amp;lt;&amp;lt; &quot;person with phone &quot; | actual
            mismatchDescription &amp;lt;&amp;lt; &quot;was &quot; | expected
            actual == expected
        } as GroovyMatcher&amp;lt;Person&amp;gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как вы можете заметить, мы использовали мощь Groovy и реализовали абстрактный метод через closure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Перед подведением итогов и определением, какой-же подход лучше, хочу поделиться собственным опытом написания ExtentionModule.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Дабы не переживать по поводу метапрограммирования, можно написать &lt;strong&gt;ExtentionModule&lt;/strong&gt; для нашего Description класса. Делается это так: пишем сначала класс, в котором реализовываем нужные нам методы:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class MatchersExtention {

    static Description leftShift(Description self, StringDescription desc) {
        self.appendText(desc.toString())
        self
    }

    static Description leftShift(Description desc, String text) {
        desc.appendText(text)
        desc
    }

    static Description or(Description self, String value) {
        self.appendValue(value)
        self
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее, чтобы этот класс начал работать, мы создаем в папке src/main/resources папку META-INF/services, в ней создаем файлик &lt;strong&gt;org.codehaus.groovy.runtime.ExtensionModule&lt;/strong&gt; со следующим содержанием:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;moduleName = matchers-module
moduleVersion = 1.0
extensionClasses = org.example.MatchersExtention&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все, теперь наш класс Description обзавелся поддержкой метода &lt;strong&gt;leftShift(&amp;lt;&amp;lt;)&lt;/strong&gt; и or (&lt;strong&gt;|&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так с использованием силы Groovy вы можете добавить в любой класс всяких-всячин. Даже если это класс из какой-то библиотеки!!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь давайте проанализируем подходы к написанию матчеров на Groovy. Я показал три подхода к написанию матчеров. Но какой из них лучше? Лично у меня все реализовано на данный момент через классический путь с анонимным методом. Но там куча лишнего кода и при наличии парочки таких методов в классе становится реально страшно в него заходить.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Подход c использованием Map, по моему мнению, самый классный. Магия метапрограммирования делает его очень коротким и понятным.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и наконец последний подход с применение closure. Да, этот подход элегантен, нам нужно реализовать только один метод, но зачастую проверки бывают не настолько простыми и реализация этого одного метода может наносить больше вреда чем пользы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом у меня все! Всех с наступающими праздниками и до встреч в Новом 2016 году&amp;#8230;&amp;#8203;уиииии =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.stickbutik.ru/upload/iblock/1f3/1f3417a4cb7b36be3b530db5c95a674b.png&quot; alt=&quot;1f3417a4cb7b36be3b530db5c95a674b&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Введение в нагрузочное тестирование
          </title>
          <link>http://automation-remarks.com/performance-lecture/index.html</link>
          <pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">performance-lecture/index.html</guid>
          <description>
                        Лекция, в которой я рассказываю про основы нагрузочного тестирования.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лекция, в которой я рассказываю про основы нагрузочного тестирования. В конце приведены примеры записи скриптов с помощью JMeter и Gatling&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/X5TLt2JvfoA?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Три способа поднять Jenkins CI для ваших автотестов
          </title>
          <link>http://automation-remarks.com/tri-sposoba-podniat-jenkins-ci-dlia-vashikh-avtotiestov/index.html</link>
          <pubDate>Sun, 6 Dec 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">tri-sposoba-podniat-jenkins-ci-dlia-vashikh-avtotiestov/index.html</guid>
          <description>
                        Как запустить JBahve из Gradle
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, в которой я решил поделиться знаниями в организации CI для автотестов. Такая задача возникает практически на каждом проекте, так как автоматизация без CI сервера - это как хлеб без масла. Я уже писал про &lt;a href=&quot;http://automation-remarks.com/travis-ci-na-sluzhbie-u-avtomatizatsii/&quot;&gt;Travis CI&lt;/a&gt;, теперь посмотрим на Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.cloudbees.com/sites/default/files/Jenkins_8.png&quot; alt=&quot;Jenkins 8&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Основным источником информации относительно Jenkins является официальный сайт &lt;a href=&quot;https://jenkins-ci.org/&quot;&gt;jenkins-ci.org&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я покажу три способа запуска Jenkins CI и дам определенные советы и пояснения относительно каждого способа. Для тех же, кто не знаком с CI процессом и Jenkins, советую посмотреть видео.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, начнем с самого простого.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Способ 1: Запустить Jenkins war в консоли&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самый простой и банальный способ - скачать &lt;strong&gt;jenkins.war&lt;/strong&gt; и запустить его, как простое java приложение. Для этого нужно открыть консоль cmd Windows или terminal Unix и набрать команду:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -jar jenkins.war&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После того как выполните данную команду в вашей системе запустится jetty сервер; если в вашей консоли появилась надпись типа &lt;strong&gt;jenkins is fully configured and running&lt;/strong&gt;, значит вы смело можете открывать браузер и по стандартному пути&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;http://localhost:8080&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;у вас появится главная страница &lt;strong&gt;Jenkins&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Комментарий&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Данный способ является самым простым и самым ненадежным. Ни в коем случае не используйте его в production. Если вы закроете консоль, то ваш CI сервер свалится, информация о созданных job и установленные плагины сохранятся, вы сможете зайти на хост и снова запустить сервер таким способом, но вот захотите ли вы это делать часто - это вопрос. Данный способ больше подходит для демонстрационных случаев, либо как временная мера.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Способ 2: Запустить Jenkins на Tomcat&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самый распространенный и надежный способ - настроить Tomcat сервер и запустить Jenkins как стандартное web приложение.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скачиваем Tomcat 7 и распаковываем его в удобное для вас место. Если у вас Windows - это скорее будет корень раздела C. Проще всего сделать TOMCAT_HOME в глобальных переменных, дабы иметь доступ к Tomcat в консоли.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После того, как вы скачали Tomcat, нужно скопировать скачанный jenkins.war по пути:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;${TOMCAT_HOME}/webapps/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем перейти в папку &lt;strong&gt;${TOMCAT_HOME}/bin&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой папке вам нужно найти скрипт под названием &lt;strong&gt;catalina.bat&lt;/strong&gt; либо &lt;strong&gt;catalina.sh&lt;/strong&gt;. Далее нужно запустить этот скрипт. Для Unix это выглядит так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;${TOMCAT_HOME}/bin/catalina.sh start&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После этого вы увидите в консоли вывод типа:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;bin ➤ sh catalina.sh start
Using CATALINA_BASE:   /home/sergey/Downloads/apache-tomcat-7.0.65
Using CATALINA_HOME:   /home/sergey/Downloads/apache-tomcat-7.0.65
Using CATALINA_TMPDIR: /home/sergey/Downloads/apache-tomcat-7.0.65/temp
Using JRE_HOME:        /usr/lib/jvm/java-8-oracle
Using CLASSPATH:       /home/sergey/Downloads/apache-tomcat-7.0.65/bin/bootstrap.jar:/home/sergey/Downloads/apache-tomcat-7.0.65/bin/tomcat-juli.jar
Tomcat started.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь можете смело открывать в браузере&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;http://localhost:8080/jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вы делаете это в первый раз, то, возможно, придется немного подождать перед тем, как Jenkins станет доступен. Обычно это занимает меньше минуты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Комментарий&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как я уже говорил, это самый распространенный способ и самый надежный. Большинство java web приложений работает на Tomcat. К тому же, в случае какого-либо падения вы сможете посмотреть лог файл Tomcat и разобраться, в чем же дело. В своей практике мне приходилось разбираться один раз, да и то Tomcat упал только из-за того, что закончилось место на диске.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Способ 3: Использовать Docker контейнер&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;, ну куда же без него! Сейчас контейнеры набирают огромную популярность. Могу смело заявить, что в какой-то степени - это тренд. Если вы не знакомы с этой технологией, настоятельно рекомендую почитать и посмотреть на этого &quot;зверька&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для запуска докер контейнера у вас на компьютере должен быть предустановлен Docker. Установку смотреть &lt;a href=&quot;https://docs.docker.com/engine/installation/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь можем спокойно запускать наш контейнер.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;docker run -p 8080:8080 jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В результате выполнения этой команды Docker скачает контейнер и запустит его. Внутри контейнера находится Tomcat с предустановленным Jenkins CI. Вот и все, с Docker эта процедура выглядит очень просто.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Комментарий&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Данный способ мало в чем уступает способу с Tomcat, так как внутри контейнера находится такой же Tomcat сервер. Единственный недостаток - это то, что при падении или остановке вашего контейнера вы потеряете всю информацию. Чтобы избежать таких печальных последствий, советую детально почитать &lt;a href=&quot;https://github.com/jenkinsci/docker/blob/master/README.md&quot;&gt;документ&lt;/a&gt; и запускать контейнер такой вот командой:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;docker run -p 8080:8080 -v /your/home:/var/jenkins_home jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Таким образом все содержимое папки jenkins_home будет сохранено на вашей host машине и потери данных не произойдет.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом у меня все, подписывайтесь на блог в социальных сетях и через имейл. В следующий раз я покажу как подключать и настраивать слейвы к Jenkins CI. До встреч!..&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              SQA days 18: ретроспектива
          </title>
          <link>http://automation-remarks.com/sqa-days-18-retro/index.html</link>
          <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">sqa-days-18-retro/index.html</guid>
          <description>
                        Заметка схожая с отчетом о прошедшем QA Fest 2015.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мне посчастливилось съездить на &lt;a href=&quot;http://sqadays.com/en/index&quot;&gt;SQA days 18&lt;/a&gt;, которая в этот раз проходила в Москве. Я опишу свой опыт и свои впечатления после посещения данного мероприятия.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://sqadays.com/files/autoupload/58/60/32/hi3eatn425022.png&quot; alt=&quot;hi3eatn425022&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, начну с того, что я совсем не собирался никуда ехать, но потом в один прекрасный день я увидел в facebook анонс SQA days 18, зашел на сайт и тыцнул кнопку &quot;Подать доклад&quot;. После определенных процедур ревью мой доклад был принят, но в запас. Это означало, что я могу поехать на конференцию на правах спикера, но выступать мог бы только в случае форс-мажора или отказа одного из участников основной сетки. Кто-то может подумать, что халява, но я был готов выступать и ехал с полноценным докладом, - так что все честно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу добавить, что это было мое первое посещение SQA days и первый визит в Москву. Мероприятие проходило практически в центре города, в большом и достаточно вместительном конференц-зале &quot;Инфопространство&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Основная программа состояла из двух дней, и содержала около 60 докладов. Я как тру автоматизатор ориентировался больше на доклады с этой тематикой. Так как на официальном сайте конференции будут появляться записи выступлений, я не хочу и не буду спойлить, опишу только три доклада, которые, по моему мнению, были самыми достойными.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Качества хорошего тест-лида&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом докладе Роман Твердохлебов поделился своим опытом работы на позиции тест-лида, дал дельные советы по управлению командами, проведению митингов и слежки за субординатами. Основная мысль, которую я для себя подчеркнул: тест-лид - это человек, который чувствует и следит за работой команды не просто сидя в кабинете, а работая бок-о-бок с этой самой командой.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Оценка качества автотестов&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Доклад, который я ждал больше всего в первый день. Алексей Баранцев рассказал о том, какие есть стандарты оценки автотестов, какие стандарты есть в отрасли и пояснил на примерах, как этими стандартами пользоваться. В докладе было мало примеров кода, но те примеры, которые были, очень четко описывали суть проблем. В целом доклад стоящий и позволяет задуматься над свойствами автотестов, которые находятся в тени и о них часто никто не заботится.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Практический опыт создания уменьшенной копии боевой инфраструктуры сайта для тестировщиков&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этим докладом завершился для меня второй день конференции и лично для меня он является лучшим. Андрей Шорин поделился опытом разворачивания инфраструктуры для тестирования в компании headhunter.ru. Словами я вряд ли передам ту атмосферу, которая царила на докладе, ведь здесь было все: полезная информация и мастерство докладчика. В целом речь шла о применении контейнеров и слаженной работе всех участников процесса dev, qa и administration. Суть же доклада крылась во фразе &quot;Тестируй как в продакшине&quot;. Основная идея - организация тест энвайромента, который на 99% копирует продакшин со всеми интеграциями и лоад беленсерами, а в самом конце были произнесены золотые слова: &quot;Тестируйте как боги&quot;. Именно этим замечательнейшим наставлением и закончилась для меня SQA days 18.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом я очень доволен посещением такого мероприятия, хочется отметить высокий профессионализм организаторов и докладчиков. Помимо докладов было очень большое количество знакомств, впечатлений, разговоров и классных идей. Теперь все они у меня в голове и ждут своей реализации =) В этом году я долго возился с докладом, но уже на SQA days 19, которая запланирована на май 2016 в Санк-Петербурге, я поставил цель выступить в основной сетке конференции. Так что от себя могу сказать: &quot;СПАСИБО, увидимся на SQA days 19. Let&amp;#8217;s go together&amp;#8230;&amp;#8203;&quot;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              6 способов работы с проперти файлами
          </title>
          <link>http://automation-remarks.com/6-sposobov-raboty-s-propierti-failami/index.html</link>
          <pubDate>Sun, 22 Nov 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">6-sposobov-raboty-s-propierti-failami/index.html</guid>
          <description>
                        Тренинг, в котором я показываю различные способы работы с проперти файлами.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Тренинг, в котором я показываю различные способы работы с проперти файлами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/e2LWKxIwOfk?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Automation testing using JavaScript
          </title>
          <link>http://automation-remarks.com/automation-testing-using-javascript/index.html</link>
          <pubDate>Sat, 21 Nov 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">automation-testing-using-javascript/index.html</guid>
          <description>
                        Лекция, в которой показаны инструменты для автоматизации тестирования с использованием языка JavaScript.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лекция, в которой показаны инструменты для автоматизации тестирования с использованием языка JavaScript. Показаны примеры с Jasmine, Protractor, PhantomJS и NightwatchJS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/ZDC4aEHwWkU?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Подборка Rest клиентов на любой случай жизни
          </title>
          <link>http://automation-remarks.com/rest-clients/index.html</link>
          <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">rest-clients/index.html</guid>
          <description>
                        Заметка, в которой я решил собрать все самые достойные, по моему мнению, библиотеки или инструменты для работы с REST сервисами.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, в которой я решил собрать все самые достойные, по моему мнению, библиотеки или инструменты для работы с REST сервисами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://anton.shevchuk.name/wp-content/uploads/2013/09/restful-api-460x307.jpg&quot; alt=&quot;restful api 460x307&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я уже писал подобную &lt;a href=&quot;http://automation-remarks.com/java-rest-client/&quot;&gt;заметку&lt;/a&gt;, еще когда блог только зарождался. Тогда я упоминал о двух библиотеках, сейчас же хочу расширить список. Для всех примеров я буду использовать ресурс &lt;a href=&quot;https://swapi.co/&quot; class=&quot;bare&quot;&gt;https://swapi.co/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;1. Groovy URL&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самый простой способ сделать запрос из кода - использовать Groovy URL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;def endpoint = &apos;http://swapi.co/api/planets/1/&apos;

def content = endpoint.toURL().getText(requestProperties: [&apos;User-agent&apos;:&apos;firefox&apos;,Accept: &apos;application/json&apos;,&apos;Content-Type&apos;: &apos;application/json&apos;])

def json = new JsonSlurper().parseText(content)

assert json.name == &apos;Luke Skywalker&apos;
assert json.films[0] == &apos;http://swapi.co/api/films/7/&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Здесь мы выполнили запрос, а затем с помощью &lt;strong&gt;JsonSlurper&lt;/strong&gt; распарсили его в json. В Groovy мы можем работать с json объектом как с Map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2. Groovy wslite&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще одна библиотека семейства Groovy. Здесь у вас будет полноценный rest client, с помощью которого можно будет достать все параметры ответа:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;def endpoint = &apos;http://swapi.co/api/&apos;

def client = new RESTClient(endpoint)

def response = client.get(path:&apos;people/1/&apos;,accept: ContentType.JSON,headers:[&apos;User-agent&apos;:&apos;firefox&apos;])

assert 200 == response.statusCode
assert &apos;Luke Skywalker&apos; == response.json.name&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вы наверное заметили, что с применением wslite не нужно преобразовывать ответ в json, так как объект ответа содержит в себе свойство json. Логика работы с json в этом случае аналогична случаю с URL. Вы можете использовать wslite и для работы с SOAP сервисами, примеры можно посмотреть &lt;a href=&quot;https://github.com/jwagenleitner/groovy-wslite&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;3. Rest Assured&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Rest Assured&lt;/strong&gt; - java библиотека, которая делает тестирование Rest с использованием java похожим на подход с использованием groovy. Мощнейшая библиотека, с помощью которой можно создавать тесты, которые будут понятными и легко поддерживаемыми.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.junit.Test;

import static com.jayway.restassured.RestAssured.get;
import static org.hamcrest.core.IsEqual.equalTo;

/**
 * Created by sergey on 15.11.15.
 */
public class SwapiTest {

    @Test
    public void shouldGetLuke() {
        get(&quot;http://swapi.co/api/people/1/&quot;)
                .then().statusCode(200)
                .and()
                .assertThat()
                .body(&quot;name&quot;, equalTo(&quot;Luke Skywalker&quot;));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Смотрится неплохо, внутри body можно использовать &lt;strong&gt;JsonPath&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;4. Spring RestTemplate&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Те, кто плотно работает с Java и знает, что такое Spring framework, наверняка пользовались данной библиотекой. Не хочу особо растекаться мыслями по древу, но Spring - это мощнейший фреймворк, а RestTemplate - отличнейшая библиотека, с помощью которой вы можете создавать рест клиент. Лично я на своем проекте пользуюсь именно ней.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    public void shouldGetLuke2() {
        RestTemplate restTemplate = new RestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add(&quot;User-Agent&quot;, &quot;firefox&quot;);

        HttpEntity payload = new HttpEntity(headers);

        ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.exchange(&quot;http://swapi.co/api/people/1/&quot;, GET, payload, String.class);

        assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Настроив маршалеры и маперы, вы можете легко оперировать сущностями &lt;a href=&quot;https://spring.io/guides/gs/consuming-rest/&quot;&gt;пример&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;5. Restlet&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://restlet.com/&quot;&gt;Restlet framework&lt;/a&gt; лично не пробовал, но по документации выглядит прикольно, правда очень запутано;) У него есть куча расширений, которые позволяют интегрироваться с множеством существующих фреймворков, но именно запутанность и отсутствие яркого примера на сайте меня лично отпугнули.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;6. RetroFit&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://square.github.io/retrofit/&quot;&gt;RetroFit&lt;/a&gt; смотрится достаточно симпатично, в документации очень часто проскакивает слово Android, соответственно смело могу предположить, что он ориентирован на создание легковесных rest клиентов для Android. Среди ярких отличий - возможность выполнять как синхронные, так и асинхронные вызовы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Примеры кода можно найти на сайте либо же &lt;a href=&quot;https://futurestud.io/blog/retrofit-getting-started-and-android-client/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;7. Postman&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Postman - это не фреймворк и не библиотка, а простой плагин к Chrome браузеру. Достаточно простой и удобный клиент, с помощью которого можно делать запросы прямо из браузера.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;8. httpie&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jkbrzt/httpie&quot;&gt;Httpie&lt;/a&gt; - простая утилита, написанная на Python. Эту утилиту должны оценить любители консоли. Httpie может стать полноценным заменителем curl или wget в повседневной работе. Сильно много вы из нее не выжмите, но сделать запрос или скачать файлик, при этом не запоминая кучи ключевых значений, как это нужно делать с использованием culr, вы сможете легко.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот, собственно, и все, о чем я хотел поговорить в данной заметке. Пару мыслей от себя: для java существует большое количество библиотек, на моем проекте используется Spring и все, что с ним связано, но если бы мне нужно было писать клиент вот прямо сейчас, я бы выбирал что-то из Groovy, так как там все просто, легко и быстро. До встреч&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Заметка для начинающих: о курсах
          </title>
          <link>http://automation-remarks.com/zamietka-dlia-nachinaiushchikh-pro-kursy/index.html</link>
          <pubDate>Sat, 7 Nov 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">zamietka-dlia-nachinaiushchikh-pro-kursy/index.html</guid>
          <description>
                        О курсах...
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давно хотел выразить свои мысли по поводу ситуации с курсами для тестировщиков, в частности - курсами для автоматизаторов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://zapad24.ru/uploads/posts/2013-08/1375430184_1368701158_konsultacijas_apmacibu-iespejas_latinsoft.jpg&quot; alt=&quot;1375430184 1368701158 konsultacijas apmacibu iespejas latinsoft&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, обосную суть проблемы. Почему проблемы - поясню далее. В данный момент сфера растет большими темпами, потребность в кадрах все еще превышает количество этих самых кадров. Относительно автоматизации тестирования - эта тенденция ощущается прям на нюх. Почему? Потому что ХОРОШИХ специалистов мало, а крутых еще меньше. Раньше ведь автоматизировать начинали как? Работали мануальщиками, затем начинали автоматизировать. Да и автоматизировали на динозаврячьих технологиях типа VB script или QTP. Сейчас эти ребята уже опытные специалисты, большинство из них стали менеджерами и почивают на лаврах. А что же с подрастающим поколением? Оно все еще растет. В данный момент нужны люди со знанием Java, C#, Python. Всем нужны готовые специалисты, но готовые уже давно хотят много денег =). Получается, что автоматизаторами становятся либо те, кто не смог стать девелоперами, либо мануальщики, которые смогли что-то там выучить. И здесь ключевое слово ВЫУЧИТЬ!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Предприимчивые ребята открывают большое количество курсов, на которых обещают обучить вас всем прелестям автоматизации с нуля. И вот тут кроется самая большая неприятность для желающих - на курсах вас чему-то научат, возможно, даже приближенно нужному для рынка. Тут в силу вступает второй фактор: компании уже давно поняли, что кадров не хватает и начали готовить кадры для себя по своим обучающим программам. Им не нужны джуниоры с рынка, которые, к тому же, как правило, слабее тех, которых муштруют в аудиториях компании. Болезненно, но факт. И что же делать в такой ситуации? Выхода два: либо долбить этот тернистый путь, платить деньги, которые, возможно, себя не оправдают, либо идти учиться на курсы в компании, после которых 90% участников успешно работают и растут по карьерной лестнице. А как найти эти компании и курсы? Первый &lt;a href=&quot;http://dou.ua/lenta/articles/it-obrazovanie-v-kompaniyah-obzor-vozmozhnostej/&quot;&gt;источник&lt;/a&gt;. Лично я шел по второму пути и не вижу смысла платить деньги за эфемерные курсы, после которых у вас будет сертификат и крошечный шанс найти работу в гонке массы людей, которые окончили такие же курсы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Может показаться, что я как-то критикую курсы и пиарю компании. На самом деле это не так, я просто даю совет тем, кто не знает, как действовать. Я живу в этой сфере и знаю все внутренности.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Курсы вне компании я бы советовал тем, кто, имея постоянную работу, хочет перейти на новый уровень, либо тем, кто планирует сменить место работы&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              QAFest 2015 : ретроспектива
          </title>
          <link>http://automation-remarks.com/qafest-retrospective/index.html</link>
          <pubDate>Sun, 1 Nov 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">qafest-retrospective/index.html</guid>
          <description>
                        Заметка, в которой я поделюсь впечатлениями о QAFest
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, в которой я поделюсь впечатлениями о &lt;a href=&quot;http://www.qafest.com/&quot;&gt;QAFest&lt;/a&gt;, который мне посчастливилось посетить в роли спикера 31 октября 2015 года.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/qa_fest_logo.png&quot; alt=&quot;qa fest logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начну по порядку. Это первая конференция, которую мне довелось посетить, да еще и в качестве спикера. Поэтому я ждал этого события с особым чувством. Итак, мероприятие проходило в Киеве в здании кинотеатра &quot;Батерфляй&quot;. Само место проведения мне понравилось: все чисто и аккуратно, еще и недалеко от метро =) Началось все со сбора участников, печенек и других вкусностей с кофе и чаем. Затем после открытия мы разошлись по секциям слушать доклады.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Программа конференции и сетка выступлений была опубликована заранее, поэтому я уже знал, кого пойду слушать. Я сразу решил, что это будут доклады, которые ориентированы на автоматизацию.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Первый доклад - &lt;strong&gt;Per Thorsheim &quot;Lessons learned: when the worlds largest dating site got hacked&quot;&lt;/strong&gt;. Я пошел сюда в первую очередь, потому что гость был из Норвегии и хотелось послушать доклад на английском. Целью доклада было показать людям, что мы не внимательны в сети. Мы регистрируемся на разных сайтах с одним и тем же паролем и ведем себя небрежно, а затем сами от этого страдаем. Особенно мне понравилась фраза: &quot;Есть два типа интернет ресурсов: те, которые знают, что их взломали и те, которые об этом даже не догадываются.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Следующий доклад был также от иностранного гостя. &lt;strong&gt;Gáspár Nagy BDD Crash Course for testers&lt;/strong&gt;. Создатель &lt;strong&gt;Spec Flow&lt;/strong&gt; &quot;капитанил&quot; про BDD. Из этого доклада нового я ничего для себя не вынес, но зато послушал еще немного английских речей.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем я решил сделать перерыв и просто ходил и знакомился с участниками феста. Встретил новых людей, пообщался в компании Игоря Хрола и Андрея Мясникова.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее после обеда наступил мой черед.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/qa_fest_photo.jpg&quot; alt=&quot;qa fest photo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я рассказывал о реализации Allure adapter для Jbehave. Немного переживал, так как это все-таки первое выступление на &quot;большой сцене&quot;. На мой доклад пришло достаточно большое количество людей. В целом я справился и выступил достойно. Был и небольшой трабл с IE, в котором не захотел открываться Allure отчет. Я немного из-за этого приуныл, но уже по окончании выступления ко мне подходили люди и говорили, что им очень понравилось. В целом я очень доволен своим дебютом: приобрел незабываемый опыт, который можно получить только лишь принимая участие в такого рода мероприятиях.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вообще на конференции было очень много интересных докладов, но были и такие, на которых было скучно. Лично я ждал доклада Николая Алименкова. А перед этим послушал Якова Крамаренко, который рассказывал об автоматизации на разных языках. В целом доклад был очень интересный, но фраза &quot;Я могу выучить язык за ночь&quot; меня, конечно, улыбнула.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И вот после кофе-брейка пришло время выступления Алименкова. Я специально сел в первый ряд, дабы понаблюдать за докладчиком. Этот доклад я уже слушал, так как его Николай читал на SeleniumCamp. Но слушать вживую намного интереснее. В целом доклад был очень полезным и, по моему мнению, это самый интересный доклад из секции &quot;Автоматизация тестирования&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну, а самым интересным, как по мне, был доклад Глеба Бахмутова &quot;Обзор будущих технологий тестирования&quot;. Докладчик четко и ясно пояснил, какие инструменты он использует и зачем. А в самом конце он еще потролил тех, кто на собеседованиях просит протестировать карандаш. Не хочу особо много писать об этом докладе, дабы не спойлить, просто дождитесь записи и обязательно посмотрите. Уверен - вам понравится. На этом с докладами все. После было афтепати и неформальная часть. В целом конференция получилась очень хорошей. Надеюсь, увидимся в следующем году на QAFest 3, но это уже будет совсем другая история&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Travis CI на службе у автоматизации
          </title>
          <link>http://automation-remarks.com/travis-ci-na-sluzhbie-u-avtomatizatsii/index.html</link>
          <pubDate>Sat, 24 Oct 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">travis-ci-na-sluzhbie-u-avtomatizatsii/index.html</guid>
          <description>
                        В данной заметке хочу поговорить о сервисе, который называется Travis CI
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В данной заметке хочу поговорить о сервисе, который называется &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;. Достаточно интересный проект, о котором может многие и слышали, но не имели возможности попробовать. Так вот, я попробовал и мне очень понравилось, теперь поделюсь своими впечатлениями.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, начнем с самого начала. Для тех, кто не знаком с этим проектом: &lt;strong&gt;Travis CI&lt;/strong&gt; - это облачный сервис, который позволяет пользователям организовать CI процесс для своих проектов. Для того, чтобы начать пользоваться этим сервисом, нужно завести аккаунт на &lt;strong&gt;github&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее все очень просто: переходим на &lt;a href=&quot;https://travis-ci.org&quot; class=&quot;bare&quot;&gt;https://travis-ci.org&lt;/a&gt; и логинимся с помощью гитхаб.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу отметить, что Travis меня удивил простотой интеграции, ведь все, что нужно для начала работы, - просто выбрать свой репозиторий и создать в нем файл &lt;strong&gt;.travis.yml&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я экспериментировал со своим репозиторием, в котором лежит проект с Groovy репортером для Jbehave.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Travis CI поддерживает большое количество языков программирования, для полного ознакомления можно почитать &lt;a href=&quot;http://docs.travis-ci.com/user/getting-started/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мой проект написан на Groovy и собирается с помощью &lt;strong&gt;Gradle&lt;/strong&gt;. Какое удивление - &lt;strong&gt;Travis&lt;/strong&gt; умеет работать со всеми этими штуками. Все, что нужно, - просто указать в созданном файле &lt;strong&gt;.travis.yml&lt;/strong&gt; пару строк:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;language: groovy
jdk:
 - oraclejdk7
branches:
 only:
 - master&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Идем в Travis CI &lt;a href=&quot;https://travis-ci.org/profile/${username}&quot; class=&quot;bare&quot;&gt;https://travis-ci.org/profile/${username}&lt;/a&gt; и среди своих репозиториев выбираем нужный и включаем его в билд процесс.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем меняем в нашем проекте любой файлик, коммитим, пушим и начинается магия. Travis сам понимает, какого рода проект и какой инструмент сборки использовать. Буквально через пару секунд он начинает собирать ваш проект.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В моем случае я наткнулся на одну неприятность: первая сборка завершилась неуспехом =) Проблемой было то, что у тревиса не было прав на вызов команды gradlew. Исправляется это тем, что в наш файл &lt;strong&gt;.travis.yml&lt;/strong&gt; нужно добавить строчку:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;before_install:
 - chmod +x gradlew&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для тех, кто знаком с unix системами, эта команда достаточно знакома: она дает права на запуск команды gradlew.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По умолчанию Travis запускает команду gradlew assemble; если вы хотите переопределить такое поведение, то вам нужно дописать еще пару строк в .yml файл:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;install: true
script: &quot;./gradlew build -x copyDistFiles&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот и все. Теперь наш проект собирается и завершается успехом.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь поговорим о тех, кому эта штука может быть полезна. В первую очередь тем, кто пишет свои проекты и не хочет особо париться с настройкой полноценного CI сервера - это очень удобно. Автоматизаторов же должна заинтересовать такая функциональность &lt;a href=&quot;http://docs.travis-ci.com/user/gui-and-headless-browsers/&quot;&gt;GUI and Headless Browser Testing&lt;/a&gt;. В документации указано, что можно запускать тесты с помощью Sauce Labs, xvfb и phantomjs. Крутяк, да? Эта штука поможет сэкономить кучу времени на настройку энваромента. Попробуйте - и вам понравится.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Книги, обязательные к прочтению автоматизатору
          </title>
          <link>http://automation-remarks.com/knigi-aqa/index.html</link>
          <pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">knigi-aqa/index.html</guid>
          <description>
                        Продолжение цикла под названием &quot;Как развиваться тестировщику&quot;
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Продолжение цикла под названием &quot;Как развиваться тестировщику&quot;. В прошлых заметках вы узнали, &lt;a href=&quot;http://automation-remarks.com/kak-razvivatsia-tiestirovshchiku-razbiraiemsia-s-linux/&quot;&gt;как изучить Linux&lt;/a&gt;. Теперь напишу о том, какие книги было бы полезно почитать автоматизаторам.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://sportkniga.com.ua/images/books228577dtg3.jpg&quot; alt=&quot;books228577dtg3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Первая книга - &lt;strong&gt;&quot;xUnit Test Patterns&quot;&lt;/strong&gt;. Почему именно эта книга? Потому что в ней очень хорошо и понятно описывается, как писать Unit тесты. Описаны основные ошибки при написании тестов и приведены шаблоны для наиболее общих случаев. В целом, после прочтение этой книги я пересмотрел свой стиль написания тестов и кода.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://d.gr-assets.com/books/1348288284l/337302.jpg&quot; alt=&quot;337302&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Следующая книга - &lt;strong&gt;Стива Макконела &quot;Совершенный код&quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой книге очень хорошо описаны проблемы при написании кода. Эта книга поможет вам избавиться от привычки писать макаронный код. В книге есть целый раздел, в котором приведены пути решения основных проблем в написании тестов. Лично я из этой книги почерпнул некоторые советы и часто пользуюсь ими при написании &lt;a href=&quot;http://automation-remarks.com/pochemy-svoy-fremawork-ploho/&quot;&gt;фреймворков&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://v673.com/wp-content/uploads/1001320063.jpg&quot; alt=&quot;1001320063&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хочу также упомянуть о книге &lt;strong&gt;Чистый код&lt;/strong&gt; от &lt;strong&gt;Боба Мартина&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если вы ни разу не слышали о дядюшке Бобе, то я настоятельно рекомендую загуглить и ,конечно, прочитать его книги. Одна из них - &quot;Чистый код&quot;. Отличное чтиво, во время знакомства с которым у вас возникнет понимание, что код, который вы пишете, чистым назвать сложно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://static2.ozone.ru/multimedia/books_covers/c300/1001563239.jpg&quot; alt=&quot;1001563239&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и последняя книга - &lt;strong&gt;Мартина Фаулера &quot;Рефакторинг&quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://ab.kh.ua/wp-content/uploads/2013/12/%D0%9C%D0%B0%D1%80%D1%82%D0%B8%D0%BD-%D0%A4%D0%B0%D1%83%D0%BB%D0%B5%D1%80-%D0%A0%D0%B5%D1%84%D0%B0%D0%BA%D1%82%D0%BE%D1%80%D0%B8%D0%BD%D0%B3-%D1%83%D0%BB%D1%83%D1%87%D1%88%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81%D1%83%D1%89%D0%B5%D1%81%D1%82%D0%B2%D1%83%D1%8E%D1%89%D0%B5%D0%B3%D0%BE-%D0%BA%D0%BE%D0%B4%D0%B0.jpg&quot; alt=&quot;%D0%9C%D0%B0%D1%80%D1%82%D0%B8%D0%BD %D0%A4%D0%B0%D1%83%D0%BB%D0%B5%D1%80 %D0%A0%D0%B5%D1%84%D0%B0%D0%BA%D1%82%D0%BE%D1%80%D0%B8%D0%BD%D0%B3 %D1%83%D0%BB%D1%83%D1%87%D1%88%D0%B5%D0%BD%D0%B8%D0%B5 %D1%81%D1%83%D1%89%D0%B5%D1%81%D1%82%D0%B2%D1%83%D1%8E%D1%89%D0%B5%D0%B3%D0%BE %D0%BA%D0%BE%D0%B4%D0%B0&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще одна книга от еще одного знаменитого человека в сфере программирования. Если вы не слышали имени этого человека, то настоятельно рекомендую познакомиться с его книгами. В целом книга хорошо описывает стандартные антипаттерны и после ее прочтения вы научитесь понимать, как писать и переписывать код так, чтобы он был легко читаем и его было легко поддерживать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и последняя в этой заметке - &lt;strong&gt;Gojko Adzic: Fifty Quick Ideas to Improve Your Tests&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51DlCCMPOoL._SY498_BO1,204,203,200_.jpg&quot; alt=&quot;51DlCCMPOoL. SY498 BO1,204,203,200 &quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сам я ее пока не читал, но уважаемые люди советовали и в интернетах о ней очень положительные отзывы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот, собственно, и все на этот раз. Многие могут сказать, что большинство этих книг о написании кода и больше о программировании.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Автоматизатор, который не умеет программировать. Кто он?
          </title>
          <link>http://automation-remarks.com/avtomatizator-kotoryi-nie-umieiet-proghrammirovat/index.html</link>
          <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">avtomatizator-kotoryi-nie-umieiet-proghrammirovat/index.html</guid>
          <description>
                        Заметка, в которой попробуем разобраться в реалиях современности и попробуем дать ответ на вопрос: должен ли тестировщик, у которого на табличке написано &quot;Software Test Automation Engineer&quot; уметь программировать?
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, в которой попробуем разобраться в реалиях современности и попробуем дать ответ на вопрос: должен ли тестировщик, у которого на табличке написано &quot;Software Test Automation Engineer&quot; уметь программировать?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.towave.ru/sites/default/files/imagecache/250x200/_250developer.png&quot; alt=&quot; 250developer&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Существует достаточно много мнений, кто же такие эти люди - автоматизаторы. Достаточно крепко эта тема перетиралась на Radio QA. Но я, как человек идейный, попытаюсь обрисовать свою точку зрения. Итак, начну с того, что оговорка &quot;все зависит от проекта&quot; - не принимается. Если у тебя на табличке написано Test Automation, но в реальности 80% времени ты занимаешься мануальщиной, гоняешь регрессию и обновляешь тест кейсы, то, увы, друг мой, ты далек от автоматизации. Возьмем два кардинально разных примера: автоматизатор, работающий в команде только с мануальщиками, и автоматизатор, работающий в команде с программистами.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Так вот, в первом случае вы будете явно выделяться, так как вы технически подкованнее и команда не будет особо вдаваться в то, что вы там клепаете. Главное, чтобы отчеты о прогоне тестов приходили вовремя и руками проверять нужно было меньше. В общем те, кто работает в такой команде долго, могут почувствовать, что они достигли вершины и будут немного деградировать в техническом плане. Возможно даже, что сменить проект будет не так легко, так как у вас есть опыт, но технически вы уже староваты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Во втором случае в команде на вас будут смотреть немного свысока, так как всея господа разработчики и кодопись - это ж типа неотъемлемые вещи. Но я бы сильно по этому поводу не расстраивался, ведь, чтобы вас зауважали, нужно показать, что вы действительно крутой парень. Тем более, если и учиться писать код, то у разработчиков. В такой команде вам нужно будет показать, что вы делаете вещи, без которых команде будет тяжело поддерживать качество продукта на должном уровне. Более того, если вы технически сильно подкованы, вам будет легче работать в команде, так как вы будете находить общий язык и понимать что Spring - это вовсе не то, о чем вы подумали =) В команде разрботчиков у вас больший шанс развиваться технически и следить за техническими новинками.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, что мы имеем на выходе в обоих случаях - автоматизаторы занимаются техническими вещами. И там и там нужно уметь писать код. Умение писать код позволит вам приобрести уверенность в том, что вы можете решать сложные технические задачи. Это зачастую начнет ярко проявляться, когда вам нужно будет предлагать решения для Автоматизации. Выбор инструментов и подходов, что лучше выбрать - Junit или TestNG.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В общем, по моему личному мнению, автоматизаторы - это больше программисты с уклоном на тестирование. Эти люди обязаны уметь писать код и быть технически подкованными в технологиях и языках программирования, с которыми они работают.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;А что касается автоматизатора, который не умеет программировать, - ну так он вовсе и не автоматизатор. Возможно, где-то в глубине души он и считает себя таким, но чтобы желаемое стало действительным, ему осталось сделать совсем небольшой шаг - научиться хорошо программировать ;)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Как развиваться тестировщику. Разбираемся с Linux.
          </title>
          <link>http://automation-remarks.com/kak-razvivatsia-tiestirovshchiku-razbiraiemsia-s-linux/index.html</link>
          <pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">kak-razvivatsia-tiestirovshchiku-razbiraiemsia-s-linux/index.html</guid>
          <description>
                        В этой заметке хочу снова затронуть тему Groovy
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, которая будет продолжением серии &quot;Как развиваться начинающим тестировщикам&quot;. Ранее я писал про &lt;strong&gt;Groovy&lt;/strong&gt;, теперь хочу поделиться опытом изучения &lt;strong&gt;Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://prach.poltava.ua/images/stories/logoLinux.png&quot; alt=&quot;logoLinux&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте разберемся, нужно ли вообще тестировщикам знать Linux? Конечно же ответ зависит от многих факторов. Первый из них: есть ли у вас на проекте машины или сервера с *nix на борту ? Если нет, то можете закрывать страницу и наслаждаться жизнью, унывая за рабочим столом &lt;strong&gt;Windows 10&lt;/strong&gt; ;) Но, если у вас есть все-таки поддержка *nix платформ и вы не унылый овощ, то вам следует разобраться с &lt;strong&gt;Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично мое знакомство c Linux началось с того, что у нас на проекте было 4 машинки и на всех стоял разный дистрибутив IBM AIX, Solaris, Red Hat Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Дабы не быть полным профаном, я решил себе дома установить тогда еще &lt;strong&gt;Ubuntu 12.04 LTS&lt;/strong&gt;, чтобы начать разбираться с системой и учить команды. Это была кардинальная перемена, меня затянуло и до сих пор у меня дома стоит Ubuntu, и на все возгласы по поводу выхода новых версий &lt;strong&gt;Windows&lt;/strong&gt; я даже не парюсь.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Чисто в образовательных целях можете установить себе &lt;strong&gt;Ubuntu&lt;/strong&gt; на виртуальную машину. Сделать это максимально быстро можно с помощью &lt;a href=&quot;http://automation-remarks.com/vagrant/&quot;&gt;Vagrant&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее стоит задача в изучении команд, которые поддерживаются командной оболочкой. Конечно же всегда можно посмотреть в гугл, но все же самые основные нужно выучить. На собеседованиях гугл не поможет=).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я бы рекомендовал почитать книгу - &lt;strong&gt;Скотта Граннеманна&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://book2.me/f/LinuxSprav2010.jpg&quot; alt=&quot;LinuxSprav2010&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Отличнейшая книга, которую я прочел на одном дыхании. Идеально подходит для изучения всех самых известных команд &lt;strong&gt;Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вторая книга, которую я бы посоветовал тем, кто уже немного знаком с системой и хочет понять все ее внутренности, - &lt;strong&gt;How Linux Works: What Every Superuser Should Know&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.allitebooks.com/wp-content/uploads/2015/04/How-Linux-Works-200x250.jpg&quot; alt=&quot;How Linux Works 200x250&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Под конец, для тех, кто уже хочет научиться писать Bash скрипты:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51EjC-yjBKL._SX403_BO1,204,203,200_.jpg&quot; alt=&quot;51EjC yjBKL. SX403 BO1,204,203,200 &quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Последнюю книгу полностью не читал, но могу сказать, что издательство apress всегда издает стОящие книги.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и напоследок на обучающей платформе edx есть полезный курс - &lt;strong&gt;Introduction to Linux&lt;/strong&gt;. Этот курс дает практические знания графической оболочки и командной строки для всех самых распространенных дистрибутивов Linux. Лично я его прошел и получил сертификат;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Удачного изучения и до встреч.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Парсим командную строку с Groovy CliBuilder
          </title>
          <link>http://automation-remarks.com/parse-command-line/index.html</link>
          <pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">parse-command-line/index.html</guid>
          <description>
                        В этой заметке хочу снова затронуть тему Groovy
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой заметке хочу снова затронуть тему Groovy. Эта заметка будет ярким дополнением к уже написанным ранее:
&lt;a href=&quot;http://automation-remarks.com/learning-groovy/&quot;&gt;о ресурсах, на которых можно найти много интересного про Groovy&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.primalsecurity.net/wp-content/uploads/2014/08/terminal-md.png&quot; alt=&quot;terminal md&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, начнем с постановки задачи! Приходилось ли вам когда-нибудь писать свои библиотеки? А какие-нибудь утилиты, которые нужно запускать из командной строки?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот мне приходилось! В частности &lt;strong&gt;JBehave&lt;/strong&gt; reporter работает именно через командную строку. Теперь давайте подумаем, каким образом можно передавать параметры в наш jar файл, используя командную строку? Правильно - через аргументы командной строки, задавая VM options либо Program arguments. И вот если с VM options все более-менее понятно, то с вариантом аргументов приходится повозиться. Именно этот случай и рассмотрим.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, давайте зададимся начальными условиями: чего хотим? Хотим передавать параметры в jar файл в любой последовательности и не переживать, что у нас что-то пойдет не так.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Будем смотреть на примере репортера. Раньше он запускался так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;java -jar reporter.jar D:\\jbehave D:\\report&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На этом примере наглядно видно, что если поменять параметры местами, то все сломается; да и вообще человеку, который не писал эту штуку, будет непонятно, с какими аргументами ее запустить.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Чтобы исправить эти неудобства, я использовал библиотеку, которая называется &lt;strong&gt;Groovy CliBuilder&lt;/strong&gt;. С ее помощью можно легко парсить аргументы командной строки.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В результате применения этой библиотеки у нас должно получиться такое вот:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;java -jar reporter.jar -g D:\\jbehave -d D:\\report&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Казалось бы, добавилось всего две буквы, но на самом деле изменилось многое. Харош говорить - смотрим в код.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;private static parse(String[] args) {
        def cli = new CliBuilder(usage: &apos;reporter [options]&apos;)

        cli.with {
            h longOpt: &apos;help&apos;, &apos;Show usage information&apos;
            g longOpt: &apos;generate report&apos;, required: true, args: 1, &apos;Generate report based on files from folder&apos;
            d longOpt: &apos;report folder&apos;, args: 1, &apos;Generated report path&apos;
        }

        def options = cli.parse(args)

        // print usage if -h, --help, or no argument is given
        if (!options || options.h) {
            cli.usage()
            System.exit(1);
        }

        options
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этот кусок кода анализирует наш массив входных параметров и возвращает так называемые опции. На самом деле опции - не что иное, как Map ;). Но самая приятная вещь этой штуки скрывается вот в чем: если мы не передадим никаких параметров или передадим их неправильно, то вместо ужасного стектрейса у нас выведется такое вот сообщение:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;image::/images/ter.png&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Обратите внимание на понятность сообщения. Любой, прочитав его, сможет понять, какие параметры доступны и за что они отвечают.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В самом же коде все предельно просто: чтобы достать значение любого ключа, нужно просто написать:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;def folderPath = options.d
def sourceFiles = options.g&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь вы можете не переживать за порядок передачи аргументов через командную строку.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; Для чистой &lt;strong&gt;Java&lt;/strong&gt; есть реализация подобной библиотеки, называется она &lt;strong&gt;Apache Commons Cli&lt;/strong&gt;.
На этом все. До новых заметок.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Запускаем JBehave из Gradle
          </title>
          <link>http://automation-remarks.com/zapuskaiem-jbehave-iz-gradle/index.html</link>
          <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">zapuskaiem-jbehave-iz-gradle/index.html</guid>
          <description>
                        Как запустить JBahve из Gradle
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я уже достаточно прилично заметок написал про &lt;strong&gt;JBehave&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В принципе существует много мнений относительно BDD: кто-то вражески настроен против него, кому-то он кажется слишком сложным; но я с ним работаю уже больше 2х лет и мне он нравится. В частности, тесты, написанные для REST сервисов, упрощают понимание того, что они вообще тестируют.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но вот есть определеннного рода трудность - настройка &lt;strong&gt;JBehave&lt;/strong&gt; и &lt;strong&gt;Gradle&lt;/strong&gt;. Именно этот момент я и попытаюсь прояснить в данной заметке.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, при настройке &lt;strong&gt;Jbehave&lt;/strong&gt; самое сложное - конфигурация тест раннера. Почему? Потому что кода много:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.copyright.rup.ecom.tests.runner;

import static org.jbehave.core.io.CodeLocations.codeLocationFromClass;
import static org.jbehave.core.reporters.Format.CONSOLE;
import static org.jbehave.core.reporters.Format.HTML;
import static org.jbehave.core.reporters.Format.XML;

import com.copyright.rup.ecom.tests.custom.CustomStoryReporter;

import org.jbehave.core.ConfigurableEmbedder;
import org.jbehave.core.configuration.Configuration;
import org.jbehave.core.configuration.MostUsefulConfiguration;
import org.jbehave.core.embedder.Embedder;
import org.jbehave.core.embedder.StoryControls;
import org.jbehave.core.failures.FailingUponPendingStep;
import org.jbehave.core.io.LoadFromClasspath;
import org.jbehave.core.io.StoryFinder;
import org.jbehave.core.reporters.CrossReference;
import org.jbehave.core.reporters.StoryReporterBuilder;
import org.jbehave.core.steps.InjectableStepsFactory;
import org.jbehave.core.steps.ParameterConverters;
import org.jbehave.core.steps.ParameterConverters.EnumConverter;
import org.jbehave.core.steps.spring.SpringStepsFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;

import java.util.Arrays;
import java.util.List;

/**
 * Created by Serhii_Pirohov on 07.07.2015.
 */
public class StoryRunnerConfig extends ConfigurableEmbedder {

    private static final String CLASSPATH_APPLICATION_XML = &quot;classpath:application.xml&quot;;
    private static final int STORY_TIMEOUT_IN_SECS = 12000000;

    private CrossReference crossReference = new CrossReference().withJsonOnly()
        .withOutputAfterEachStory(true);

    @Override
    public void run() {
        Embedder embedder = configuredEmbedder();
        embedder.useMetaFilters(getMetaFilters());
        embedder.embedderControls().doIgnoreFailureInStories(true)
            .doIgnoreFailureInView(false)
            .useStoryTimeoutInSecs(STORY_TIMEOUT_IN_SECS);
        try {
            embedder.runStoriesAsPaths(storyPaths());
        } finally {
            embedder.generateCrossReference();
        }
    }

    private List&amp;lt;String&amp;gt; getMetaFilters() {
        String metaFiltersProperty = System.getProperty(&quot;metaFilters&quot;, &quot;&quot;);
        String[] split = metaFiltersProperty.split(&quot;,&quot;);
        return Arrays.asList(split);
    }

    @Override
    public Configuration configuration() {

        ParameterConverters parameterConverters = new ParameterConverters();
        // factory to allow parameter conversion and loading from external
        // resources (used by StoryParser too)
        parameterConverters.addConverters(new EnumConverter());
        return new MostUsefulConfiguration()
            .useStoryControls(
                new StoryControls().doSkipScenariosAfterFailure(false))
            .usePendingStepStrategy(new FailingUponPendingStep())
            .useStoryLoader(new LoadFromClasspath(getClass()))
            .useStoryReporterBuilder(new StoryReporterBuilder().withReporters(new CustomStoryReporter())
                    .withFormats(CONSOLE, HTML, XML).withCrossReference(crossReference)
                    .withRelativeDirectory(&quot;../build/jbehave&quot;)
            )
            .useParameterConverters(parameterConverters)
            .useStepMonitor(crossReference.getStepMonitor());
    }

    @Override
    public InjectableStepsFactory stepsFactory() {
        ApplicationContext ctx = new GenericXmlApplicationContext(
            CLASSPATH_APPLICATION_XML);
        return new SpringStepsFactory(configuration(), ctx);
    }

    /**
     * Story paths.
     *
     * @return the list
     */
    protected List&amp;lt;String&amp;gt; storyPaths() {
        String storyToInclude = &quot;**/&quot; + System.getProperty(&quot;story&quot;, &quot;*&quot;)
            + &quot;*.story&quot;;
        return new StoryFinder().findPaths(codeLocationFromClass(getClass()).getFile(), storyToInclude, null);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но при настройке с &lt;strong&gt;Gradle&lt;/strong&gt; загвоздка заключается в правильном написании task в &lt;strong&gt;build.gradle&lt;/strong&gt; файле.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, идем в &lt;strong&gt;build.gradle&lt;/strong&gt; файл, создаем там task для запуска &lt;strong&gt;BDD&lt;/strong&gt; тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;task(type: Test, &apos;bddTest&apos;) {
    description &apos;Runs the BDD tests&apos;

    // Use properties for filtering stories
    systemProperty &quot;metaFilters&quot;, System.getProperty(&quot;filter&quot;, &quot;&quot;)
    systemProperty &quot;story&quot;, System.getProperty(&quot;story&quot;, &quot;*&quot;)

    /*
     * JBehave requires the Maven&apos;s &quot;target&quot; folder in order
     * to obtain the absolute path from relative path.
     */
    doFirst {
        file(&apos;target&apos;).mkdirs();

        copy {
            from(zipTree(jarPath(&quot;jbehave-core&quot;))) {
                include &quot;style/*&quot;
            }
            into(&quot;build/jbehave/view&quot;)

        }
        copy {
            from(zipTree(jarPath(&quot;jbehave-site-resources&quot;))) {
                include &quot;js/**/*&quot;
                include &quot;style/**/*&quot;
                include &quot;images/*&quot;
            }
            into(&quot;build/jbehave/view&quot;)
        }

    }

    doLast {
        file(&apos;target&apos;).delete();
    }
}

def jarPath(String jarName) {
    configurations.testCompile.find({ it.name.startsWith(jarName) }).absolutePath
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот, собственно, на этом и все =)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Почему фразу &quot;Мы будем писать свой тестовый фреймворк&quot; нужно произносить шепотом
          </title>
          <link>http://automation-remarks.com/pochemy-svoy-fremawork-ploho/index.html</link>
          <pubDate>Sat, 12 Sep 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">pochemy-svoy-fremawork-ploho/index.html</guid>
          <description>
                        Достаточно интересная тема, на которую я попробую покумекать.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Достаточно интересная тема, на которую я попробую покумекать. Задумайтесь, сколько интересного скрывается под фразой &quot;Мы пишем тестовый фреймворк!&quot;. Хм&amp;#8230;&amp;#8203; звучит почти как &quot;мы строим Вавилонскую башню&quot;. Хотяяя, ее судьба всем известна.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://900igr.net/datai/istorija/Vavilon/0010-010-Vavilonskaja-bashnja.jpg&quot; alt=&quot;0010 010 Vavilonskaja bashnja&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вообще само словосочетание &quot;Тестовый фреймворк&quot; звучит красиво. Все джуниоры мечтают о том, чтобы увидеть это чудо света - фреймворк. Все мидлы стремятся к тому, чтобы сделать архитектурный вклад или переворот в нем. Ну и наконец, каждый синьор, прийдя на проект, начинает осуществлять все свои заветные мечты при написании самого прекрасного и полезного фреймворка. Сейчас все, у кого самооценка завышена, должны запищать и закрыть страницу.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/svoi_framework.jpg&quot; alt=&quot;svoi framework&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На самом же деле надобность написания фреймворков отпала. Сейчас есть куча готовых инструментов, которые можно брать и использовать. Взять тот же Selenide, Serenity или Geb. Зачем писать свою убогую копию, тратить время, если все равно получится хуже. Почему? Потому что, как правило, в скрам командах на создание того самого фреймворка отводят 3 спринта, а это примерно 1,5 месяца. Создать за полтора месяца такую же качественную либу - почти невозможно. Это не реклама - это горькая реальность.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще один довод в пользу &quot;не писать свое&quot;. Какая основная задача автоматизации тестирования? Правильно - уменьшение затрат времени на ручное тестирование и автоматизация рутинных операций. Основная цель создания тестового фреймворка - это упрощение создания этих самых тестов. Фреймворк должен позволять быстро и легко создавать тесты. Если у вас есть готовый фреймворк и вы пишете меньше чем два UI теста в день - то это момент, над которым нужно подзадуматься.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и последнее. Главный риск при написании своих фреймворков - это код ради кода. Создание проекта, который будет не в качестве помощника основному проекту, а создание монстра, который будет сжирать время и ресурсы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но! Я тоже был таким же, читал книги по паттернам, учил языки программирования и писал всякие штуки. Хотя, че писал? Пишу и буду писать, только буду делать это на основе готовых библиотек и качественных решений. Спасибо за внимание.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Как развиваться тестировщику. Учим Groovy за 15 минут
          </title>
          <link>http://automation-remarks.com/learning-groovy/index.html</link>
          <pubDate>Tue, 8 Sep 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">learning-groovy/index.html</guid>
          <description>
                        Об изучении Groovy
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой заметке я поделюсь своими наработками и материалами, с помощью которых вы сможете легко и быстро освоить этот язык.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://cdn.liviutudor.com/wp-content/uploads/2015/05/groovy-lang-300x150.png&quot; alt=&quot;groovy lang 300x150&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак, самый первый источник знаний - это вебсайт &lt;a href=&quot;http://www.groovy-lang.org/&quot; class=&quot;bare&quot;&gt;http://www.groovy-lang.org/&lt;/a&gt;. Кстати, когда &lt;strong&gt;Groovy&lt;/strong&gt; перешел под опеку &lt;strong&gt;Apache&lt;/strong&gt;, сайт сильно преобразился. Здесь в разделе документации вы можете найти уйму полезной информации.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Следующим этапом идет книга - &lt;strong&gt;Mining Groovy In Action&lt;/strong&gt;. &lt;a href=&quot;https://www.manning.com/books/groovy-in-action-second-edition&quot;&gt;Ссылка&lt;/a&gt; на книгу для заинтересовавшихся. Хочу отметить, что лично я, изучая какую-то технологию, всегда ищу книги данного издательства. Книга позволит вам пройтись по синтаксису от самых начальных синтаксических конструкций до примеров кода из реальных проектов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но книги книгами, а интернет богат кучей материалов. В частности, самым большим ресурсом c множеством полезных советов является &lt;a href=&quot;http://mrhaki.blogspot.com/&quot;&gt;Groovy Goodness&lt;/a&gt;. Сам являюсь подписчиком данного блога. В дополнение, автор выкладывает все примеры на &lt;strong&gt;GitHub&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И напоследок &lt;strong&gt;Youtube&lt;/strong&gt; канал &lt;a href=&quot;https://www.youtube.com/channel/UC7wUp2KIa1hoMNn0r7JUVEg&quot;&gt;GR8Conf&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Собственно из качественных ресурсов, которые я знаю, это все. От себя хочу добавить, что со знаниями &lt;strong&gt;Java&lt;/strong&gt; изучить &lt;strong&gt;Groovy&lt;/strong&gt; действительно можно за 15 минут. Успешного обучения и удачи. Подписывайтесь, чтобы держать руку на пульсе.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Автоматизация тестирования, обмен опытом и полезные увлечения
          </title>
          <link>http://automation-remarks.com/person-of-the-month/index.html</link>
          <pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">person-of-the-month/index.html</guid>
          <description>
                        Заметка о том, как можно coздавать виртуалки.
          </description>
          <content:encoded>
                        &lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/epam_photo.jpg&quot; alt=&quot;epam photo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Сережа, ты начал свою карьеру в ЕРАМ в первом наборе автоматизаторов весной 2013 года. Расскажи, пожалуйста, о своем опыте и росте в рамках компании.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я пришел на курсы в ЕРАМ молодым, перспективным айтишником, жаждущим новых знаний и навыков. Тогда было трудно и тренерам, и студентам, потому как это был первый набор и опыта не хватало всем. Но я горжусь тем, что мы справились с трудностями и прошли в продакшн. Важно отметить, что мы были не только первым набором автоматизаторов, но и теми, на ком испытывали первую CDP программу для автоматизаторов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сейчас я принимаю активное участие в CDP программе для нынешних выпускников Пре-продакшна в роли ментора и лектора. Если говорить об опыте, то выйти из Пре-продакшна и попасть на настоящий проект было немного страшновато: «старые волки» там с удивительной легкостью делали то, на что у меня уходило по полтора, а то и два дня :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что касается роста, то я одним из первых из нашего набора перешел на позицию Software Test Automation Engineer, и на меня возложили ответственность за управление автоматизацией тестирования на проекте ALG-RISK. Именно на этом проекте мне выпала возможность побывать и поработать в офисе IBM в Торонто. А сейчас на проекте CCC мне предстоит организовать автоматизированное тестирование на одном из подпроектов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Почему ты изначально выбрал для себя направление автоматизированного тестирования?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вопрос, который чаще всего задают автоматизаторам :) Просто так сложилось. До ЕРАМ я писал код для баз данных Oracle и немного знал С#. В ЕРАМ меня обратили в другую &quot;веру&quot;. Сейчас я пишу на Java, и мне это нравится. Сегодня автоматизация – это тренд, и я не жалею, что выбрал этот путь.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Помимо работы на продакшне ты читаешь лекции студентам. Видишь ли ты разницу между каждым новым набором Пре-продакшна?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Разница заметна, ведь сейчас ребят учат большему стеку технологий. Если нашему, первому набору многому приходилось учиться с нуля прямо на проекте, то сейчас выпускники Пре-продакшна в основном приходят на проект набираться практического опыта при работе с инструментами. Это позволяет им быстрее влиться в процесс, да и облегчает работу менторам.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/ibm.jpg&quot; alt=&quot;ibm&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Твой блог - &lt;a href=&quot;http://automation-remarks.com/&quot; class=&quot;bare&quot;&gt;http://automation-remarks.com/&lt;/a&gt; - недавно посетил 10 000-й пользователь. Давно ли ты ведешь этот сайт, и стал ли он для тебя больше, чем хобби?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;История создания automation-remarks.com – это как путь от заметки в школьной стенгазете до авторской колонки в серьёзном издании :) в области автоматизации тестирования. Идея создания блога родилась у меня в ноябре прошлого года. Изначально я написал “Привет, мир!” и забросил его. В свободное время просто игрался с версткой и разными штуками из обасти JQuery. Параллельно создавал контент, делал заметки. И выглядело это все ужасТно ;D Сделать из этого ужаса полноценный блог меня вдохновил мой друг. Он сказал, что я пишу полезные вещи, и людям это будет интересно. Было страшно, но я вывел блог в большой мир и назвал “Заметки Автоматизатора”. В общем, все началось с трех пользователей, а по состоянию на сегодня блог посетило уже больше 10500 читателей. 6 моих заметок были опубликованы в QA дайджестах на dou.ua. Могу с уверенностью сказать, что на сегодня блог - уже не просто хобби. Сайт стал площадкой для общения, обмена опытом и установления новых полезных знакомств и связей.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Какой опыт, полученный на сегодняшний день на продакшне, ты можешь назвать самым ценным?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В ноябре 2014 я попробовал себя в роли ментора для команды из 6 человек. Мы делали внутренний проект, на котором я приобрел полезный опыт командной работы. А вообще весь опыт работы в ЕРАМ ценен.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Какие планы ты строишь на ближайшее время?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ближайшая цель - стать первым в харьковской локации выпускником пре-продакшна среди автоматизаторов, кто прошел путь от &lt;strong&gt;Student&lt;/strong&gt; до &lt;strong&gt;Senior Software Test Automation Engineer&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Поговорим о неформальном :) Как ты любишь проводить свои выходные?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как среднестатистический житель нашей страны.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Набор опций самый разнообразный: от режима «couch potato» до походов в спортзал и пеших прогулок по 2-3 часа. А еще у меня есть котейка, которая не дает скучать (она, можно сказать, тоже часть компании, так как мы ее подобрали в Краснокутске, когда были на экскурсии с командой коллег из ЕРАМ). Ну и выходные - это единственная возможность съездить на малую родину к родителям.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Доводилось ли тебе работать не в сфере IT? Если да – расскажи, пожалуйста, о своем опыте.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;О да, имеется недолгий, но интересный опыт работы на заводе “Мивина” :) Могу гордо заявить, что интернет в их цехах появился не без моего участия.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- Если не секрет, что для тебя является главной мотивацией?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сила собственного характера и поддержка родных.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;- И напоследок: что ты пожелаешь тем, кто прочитал это интервью?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Оставаться на позитиве, невзирая на неработающий код ;)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Интегрируем YAML и тестовый фреймворк
          </title>
          <link>http://automation-remarks.com/yaml/index.html</link>
          <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">yaml/index.html</guid>
          <description>
                        Новая заметка, в которой я покажу, как можно использовать файлы с разширением .yml в качестве конфигурационых файлов для тестового фреймворка.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Новая заметка, в которой я покажу, как можно использовать файлы с разширением .yml в качестве конфигурационых файлов для тестового фреймворка. Хочу отметить, что я уже писал на подобную тему, только &lt;a href=&quot;http://automation-remarks.com/zamienitie-property-faily-na-ghruvi-skripty/&quot;&gt;тогда&lt;/a&gt; применял &lt;strong&gt;Groovy&lt;/strong&gt; файл.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://ifireball.files.wordpress.com/2015/01/yaml-logo.png&quot; alt=&quot;yaml logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Давайте посмотрим на суть задачи. Наверняка те, кто писал фреймворки на Java, пользовался стандартными файлами c расширением &lt;strong&gt;.proprties&lt;/strong&gt;. Наличие проперти файлов - это правило хорошего тона.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вся конфигурационная информация выносится за переделы кода, откуда ее можно легко изменять. Вот, скажем, стандартный пример из жизни: у нас есть несколько окружений, на которых мы запускаем наши тесты. Для каждого окружения нужны различные парметры: хост, порт и т.п. Зачастую люди делают либо разные проперти файлы и пишут Factory pattern для того, чтобы считывать из них информацию, либо делают один проперти файл, который зачастую выглядит так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;#dev env
dev.server.host=localhost
dev.server.port=7070

#qa env
qa.server.host=qahost
qa.server.port=8081&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем пишется все та же Factory для считывания данного файла. Чего греха таить, я, бывало, тоже такое писал. Но пришло время совершенствоваться и использовать более элегантные подходы. И здесь на помощь приходит язык разметки YAML. Что это и для чего придумано, читать в Википедии ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мы можем легко и просто использовать &lt;strong&gt;.yml&lt;/strong&gt; файлы как замену для проперти файлов c помощью библиотеки &lt;strong&gt;snakeyml&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Создаем config.yml файл:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;environment:
  dev:
    server.host: http://localhost:7070
    db.url: jdbc:usernarm:userpass@test
  qa:
    server.host: http://qa.test:8080&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь напишем класс, который будет считывать наш файл:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class YamlReader {

    public Map&amp;lt;String, Object&amp;gt; read(String path) throws IOException {
        InputStream in = Files.newInputStream(Paths.get(path));
        Yaml yaml = new Yaml();
        return (Map&amp;lt;String, Object&amp;gt;) yaml.load(in);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Читаем файл:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static void main(String[] args) throws IOException {
        YamlReader reader = new YamlReader();
        Map&amp;lt;String, Object&amp;gt; config = reader.read(&quot;src/main/resources/config.yml&quot;);
        System.out.println(config);
}

Console output:
{environment={dev={server.host=http://localhost:7070, db.url=jdbc:usernarm:userpass@test}, qa={server.host=http://qa.test:8080}}}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Нам возвращается Map, с которой мы можем дальше работать. Но здесь есть один недостаток - casting. Нам нужно кастить каждый раз, когда мы будем доставать значение из map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Есть гораздо лучшее решение. Cоздаем класс &lt;strong&gt;Configuration&lt;/strong&gt; следующего содержания:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Configuration {
    public Map&amp;lt;String,Map&amp;lt;String,String&amp;gt;&amp;gt; environment;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем метод в ридере:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public &amp;lt;T&amp;gt; T read(String path, Class&amp;lt;T&amp;gt; c) throws IOException {
        Yaml yaml = new Yaml();
        try (InputStream in = Files.newInputStream(Paths.get(path))) {
            return yaml.loadAs(in, c);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Используем новый метод для чтения проперти:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; YamlReader reader = new YamlReader();
 Configuration read = reader.read(&quot;src/main/resources/config.yml&quot;, Configuration.class);

 Map&amp;lt;String, String&amp;gt; map = read.environment.get(&quot;qa&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как вы могли заметить, второй подход более элегантен и удобен. Правда, вы не сможете использовать никакой другой конструкции, кроме Map; в первом же случае вы вольны кастить значения к тому типу, к которому душе угодно. На этом у меня все. Подписывайтесь, чтобы держать руку на пульсе.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Тюнингуем Vagrant box
          </title>
          <link>http://automation-remarks.com/setting-vagrant/index.html</link>
          <pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">setting-vagrant/index.html</guid>
          <description>
                        Снова о Vagrant
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В прошлой &lt;a href=&quot;http://automation-remarks.com/vagrant/&quot;&gt;заметке&lt;/a&gt; я начал разговор об инструменте под названием Vagrant. В этот раз я покажу, как работать с готовой виртуальной машиной, подключаться к ней через ssh, использовать provisioner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://noethics.net/News/images/stories/vagrant1.png&quot; alt=&quot;vagrant1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но перед тем как начать, хочу отметить, что для работы с &lt;strong&gt;Vagrant&lt;/strong&gt; активно используется консоль. Если вы работаете из-под Windows, то я бы рекомендовал перейти на &lt;strong&gt;ConsoleZ&lt;/strong&gt;. Почему? Потому, что она гораздо удобнее, чем стандартная CMD.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Настроили консоль - теперь начнем играться с &lt;strong&gt;Vagrant&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Создаем машину:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;mkdir vagrant_box
cd vagrant_box
vagrant init ubuntu/trusty64; vagrant up --provider virtualbox&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После этого запустится виртуальная машина, а в папке &lt;strong&gt;vagrant_box&lt;/strong&gt; появится файл - &lt;strong&gt;Vagrantfile&lt;/strong&gt;. Собственно в этом файле и кроется вся магия настроек виртуальной машины. Для того чтобы влючить вашу созданную машину в сеть и получать к ней доступ по сети, в &lt;strong&gt;Vagrantfile&lt;/strong&gt; нужно раскомментировать две строчки:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;config.vm.network :private_network, ip: &quot;192.168.33.10&quot;
config.vm.network :public_network&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для того, чтобы изменения вступили в силу, нужно в консоли выполнить команду:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;vagrant reload&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Подключаемся к запущенной машине:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вы можете подключаться к запущенным виртуальным машинам с помощью команд &lt;strong&gt;vagrant ssh&lt;/strong&gt; и &lt;strong&gt;vagrant rdp&lt;/strong&gt;. Лично я создавал машины на основе &lt;strong&gt;Ubuntu&lt;/strong&gt;, поэтому мой пример будет основан на этом. Находясь в папке &lt;strong&gt;vagrant_box&lt;/strong&gt;, выполните две команды:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;vagrant status&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Эта команда должна показать, что ваша машина запущена.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;vagrant ssh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По окончании выполнения последней команды вы будете подключены к виртуальной машине, после чего сможете выполнять команды, которые будут манипулировать вашей машиной.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Создаем provision:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Vagrant&lt;/strong&gt; предоставляет функциональность &lt;strong&gt;provisioning&lt;/strong&gt;. С помощью этой фичи вы можете манипулировать машиной используя &lt;strong&gt;puppet&lt;/strong&gt;, &lt;strong&gt;chef&lt;/strong&gt; или просто &lt;strong&gt;shell&lt;/strong&gt; скрипты. Я покажу пример с использованием &lt;strong&gt;shell&lt;/strong&gt; скриптов. Допустим, вы хотите, чтобы при старте машины у вас устанавливалась java. Вы можете, конечно, каждый раз выполнять одни и те же команды, а можете поступить следующим образом. Открываем &lt;strong&gt;Vagrantfile&lt;/strong&gt; и ищем раздел:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;# Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision &quot;shell&quot;, inline: &amp;lt;&amp;lt;-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если такого нету (а такое бывает), то добавляем этот кусок в наш файл и сохряняем. Для того, чтобы использовать provision для нашего случая с установкой java, мы прописываем следующее:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;config.vm.provision &quot;shell&quot;, path: &quot;java.sh&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Файл &lt;strong&gt;java.sh&lt;/strong&gt; должен лежать в папке vagrant_box рядом с Vagrantfile. Содержание файла java.sh:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;#! /usr/bin/env bash
echo &quot;Installing java 7&quot;
sudo apt-get install -y python-software-properties
sudo add-apt-repository -y ppa:webupd8team/java
sudo apt-get update

# Enable silent install
echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections
echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections

sudo apt-get install -y oracle-java7-installer

# Not always necessary, but just in case...
sudo update-java-alternatives -s java-7-oracle

# Setting Java environment variables
sudo apt-get install -y oracle-java7-set-default
echo &quot;Java 7 installation finished&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если наша машина была запущена, то нужно выполнить команду:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;vagrant reload --provision&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для случая с выключенной машиной выполняем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;vagrant up --provision&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь при запуске машины будет произведена установка oracle-java-7. Нужно отметить, что существует и другой подход написания скриптов для provision. Можно писать их прямо в &lt;strong&gt;Vagrantfile&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;config.vm.provision &quot;shell&quot;, inline: &amp;lt;&amp;lt;-SHELL
    echo &quot;Start nodejs installation&quot;
    sudo apt-get install -y curl
    curl -sL https://deb.nodesource.com/setup | sudo bash -
    sudo apt-get install -y nodejs
    sudo apt-get install build-essential
    sudo apt-get install -y npm
SHELL&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этот скрипт установит nodejs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Таким образом вы можете легко и быстро получать виртуальные машины с предустановленным ПО. В целом, поигравшись с Vagrant, могу сказать, что мне эта штука очень понравилась. На моем текущем проекте мы не нуждаемся в виртуальных машинах, но, как только мне выпадет шанс, я обязательно буду его использовать.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              EPAM IT Week Summer 2015
          </title>
          <link>http://automation-remarks.com/it-week-summer-2015/index.html</link>
          <pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">it-week-summer-2015/index.html</guid>
          <description>
                        Заметка, которая носит чисто информационный характер.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, которая носит чисто информационный характер. Хочу поделиться записью выступления на EPAM IT Week Summer 2015. Во второй раз принял участие в данном мероприятии как спикер. В прошлом году рассказывал о том, как мне удалось улучшить CI на нашем проекте. В этом году решил выступить с не техническим докладом и поговорить о том, как можно построить автоматизацию на проекте с самого начала. Решил провести интересные параллели и выстроить ассоциации.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/it-week.jpg&quot; alt=&quot;it week&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Перед выступлением и в самом его начале я немного нервничал, так как слайды доделывал буквально за пару часов до старта. Плюс ко всему, у людей была возможность не только присутствовать во время выступления, но и смотреть онлайн. В целом получилось очень хорошо, я доволен. После выступления я получил много положительных отзывов и лайков.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Собственно, вот запись выступления:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/6o3aox0RAWQ?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Создаем виртуальную машину в три шага
          </title>
          <link>http://automation-remarks.com/vagrant/index.html</link>
          <pubDate>Sun, 9 Aug 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">vagrant/index.html</guid>
          <description>
                        Заметка о том, как можно coздавать виртуалки.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хоу-хоу. Новая заметка не заставила себя ждать. Наверняка всем автоматизаторам известна проблема создания тестровых окружений для прогона тестов. Большинство из нас использует для прогона автотестов виртуальные машины. Я зачастую использую &lt;strong&gt;VirtualBox&lt;/strong&gt;. Если вы хоть раз пробовали создать виртуалку с нуля, то, вероятно, знаете, что это требует затрат времени и сил. В этой заметке я покажу, как просто и быстро создавать тестовые окружения с помощью инструмента &lt;strong&gt;Vagrant&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Идея вагранта очень проста: он основывается на наличии готовых базовых образов. В оригинале они называются - &lt;strong&gt;box&lt;/strong&gt;. The Tao of Vagrant содержит несколько простых принципов, которые гарантируют то, что созданная вами виртуальная машина будет работать на любой операционной системе: Mac OS, Windows, Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начнем работать с &lt;strong&gt;Vagrant&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Шаг 1: Установка&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Нам потребуется установить &lt;strong&gt;VirtualBox&lt;/strong&gt; и собственно &lt;strong&gt;Vagrant&lt;/strong&gt;. Скачиваем нужный инсталятор и устанавливаем. Инструкция по установке VirtualBox &lt;a href=&quot;http://www.windxp.com.ru/article9.htm&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Шаг 2: Скачиваем готовый box&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Открываем консоль и выполняем команды:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;mkdir vm
cd vm
vagrant box add hashicorp/precise32
vagrant init hashicorp/precise32&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Шаг 3: Запускаем виртуальную машину:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;vagrant up&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Через несколько секунд у вас поднимется готовая виртуальная машина.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так, затратив всего 10 минут, вы получаете полностью готовую к работе виртуальную машину. Попробуйте - вам понравится. В следующих заметках я покажу, как продолжить настройку созданной машины. Как создавать свои машины, запаковывать их и делиться ими с коллегами по команде. Подписывайтесь, чтобы держать руку на пульсе.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Делаем тесты читабельнее. Кастомный Matcher
          </title>
          <link>http://automation-remarks.com/custom-matcher/index.html</link>
          <pubDate>Sun, 2 Aug 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">custom-matcher/index.html</guid>
          <description>
                        Новая заметка о том, как сделать тесты читабельнее.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Новая заметка о том, как сделать тесты читабельнее. Я уже писал &lt;a href=&quot;http://automation-remarks.com/davaitie-poghovorim-pro-asserty/&quot;&gt;заметку&lt;/a&gt; про библиотеки, которые помогают писать простые ассерты. Зачастую функциональности, которую предоставляют эти библиотеки, хватает для написания читабельных тестов. Но мы же идем путем улучшения. Бывают случаи, когда нужно написать свой собственный матчер, чтобы упростить ассерт или сделать его читабельнее.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://automation-remarks.com/content/images/2015/08/debrief.gif&quot; alt=&quot;debrief&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Зачем вообще это нужно? Скажем, у вас есть инстанс HttpResponse и вам нужно проверить его параметры.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
public void testSpeller() throws Exception {
        ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.getForEntity(&quot;http://speller.yandex.net/services/spellservice.json/checkText?text=синхрафазатрон+в+дубне&quot;, String.class);

//typical
assertThat(response.getStatusCode(),equalTo(HttpStatus.OK));

//custom
assertThat(response,code(OK));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этот пример наглядно показывает, что с применением кастомных матчеров код становится читабельнее. Нужно отметить, что существует определенное количество библиотек, которые позволяют использовать готовые матчеры. К примеру, набор матчеров от &lt;strong&gt;Yandex&lt;/strong&gt;. Брать чужое и пользоваться - это хорошо, но еще лучше уметь написать свой матчер. Приступим к написанию &lt;strong&gt;hamcrest&lt;/strong&gt; матчера.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

/**
 * Created by sergey on 02.08.15.
 */
public class HttpResponseCodeMatcher extends TypeSafeMatcher&amp;lt;ResponseEntity&amp;lt;String&amp;gt;&amp;gt; {

     private HttpStatus status;

    public HttpResponseCodeMatcher(HttpStatus status) {
        this.status = status;
    }

    @Override
    protected boolean matchesSafely(ResponseEntity&amp;lt;String&amp;gt; response) {
        return response.getStatusCode().equals(status);
    }

    @Override
    public void describeTo(Description description) {
        description.appendText(&quot;status code: &quot;).appendValue(status);
    }

    @Override
    protected void describeMismatchSafely(ResponseEntity&amp;lt;String&amp;gt; item, Description mismatchDescription) {
        mismatchDescription.appendText(&quot;was: &quot;).appendValue(item.getStatusCode());
    }

    public static Matcher&amp;lt;ResponseEntity&amp;lt;String&amp;gt;&amp;gt; code(HttpStatus status) {
        return new HttpResponseCodeMatcher(status);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все, что нам нужно, - это просто наследовать класс &lt;strong&gt;TypeSafeMatcher&lt;/strong&gt; и реализовать три метода. Нужно быть внимательным: третий метод &lt;strong&gt;describeMismatchSafely&lt;/strong&gt; не является абстрактным, по умолчанию он будет выводить результат, просто вызывая на объекте &lt;strong&gt;toString()&lt;/strong&gt;. Мы же переопределили этот метод и в результате у нас получается такой вот код:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
public void testSpeller() throws Exception {
   ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.getForEntity(&quot;http://speller.yandex.net/services/spellservice.json/checkText?text=синхрафазатрон+в+дубне&quot;, String.class);
   assertThat(response, code(ACCEPTED));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И такое сообщение об ошибке:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;java.lang.AssertionError:
Expected: status code: &lt;b class=&quot;conum&quot;&gt;(202)&lt;/b&gt;
     but: was: &lt;b class=&quot;conum&quot;&gt;(200)&lt;/b&gt;
    at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
    at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)
    at com.matcher.MatcherTest.testSpeller(MatcherTest.java:62)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот, очень легко и просто мы написали свой матчер и улучшили читабельность наших тестов. Более того, кастомные матчеры очень хороши при использовании &lt;strong&gt;Spock Framework&lt;/strong&gt; в качестве тест ранера. Но это уже история следующей заметки. Подписывайтесь, чтобы получать заметки первыми. До встреч&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Пишем Allure Jbehave адаптер
          </title>
          <link>http://automation-remarks.com/allure-jbehave-adapter/index.html</link>
          <pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">allure-jbehave-adapter/index.html</guid>
          <description>
                        Заметка о том, как я писал свой адаптер для интеграции Allure Yandex и JBehave.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка о том, как я писал свой адаптер для интеграции &lt;strong&gt;Allure Yandex&lt;/strong&gt; и &lt;strong&gt;JBehave&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://hsto.org/getpro/habr/post_images/c43/a4d/cf7/c43a4dcf7aa2837e5136db9abd9b919a.jpg&quot; alt=&quot;c43a4dcf7aa2837e5136db9abd9b919a&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для начала определим суть проблемы. Allure позволяет интегрироваться практически со всеми известными тест-ранерами. Примеры можно найти здесь. &lt;strong&gt;Jbehave&lt;/strong&gt; в качестве тест-ранера использует &lt;strong&gt;JUnit&lt;/strong&gt;. Вы можете без особых проблем использовать Allure и JBehave, ничего не изобретая. Но есть пару неудобств. Allure отображает в отчете текст шагов или имена методов, отмеченных аннотацией &lt;strong&gt;@Step&lt;/strong&gt;. Меньше слов - пример:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@When(&quot;I perform some action&quot;)
@Step
public void shouldPerformSomeAction(){
//some code
}

@Then(&quot;I check that action completed&quot;)
@Step(&quot;I check that action completed&quot;)
public void shouldBeComplitedAction(){
//some code
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как вы можете заметить, в первом случае имя метода не совсем совпадает со Step definition, а во втором присутствует дублирование, что еще хуже. Конечно, можно использовать первый подход, но имя метода писать &lt;strong&gt;whenIperformSomeAction&lt;/strong&gt;, но, как по мне, можно попробовать сделать лучше.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Идем на страничку Wiki сюда и пытаемся понять, как написать свой адаптер. Далее, как специалисты высоко полета, понимаем, что все реализуется через листенеры (так реализоваы практически все адаптеры, если посмотреть их сорс коды). Ищем такой листенер для JBehave. Он называется &lt;strong&gt;org.jbehave.core.reporters.StoryReporter&lt;/strong&gt;. Если мы реализуем этот интерфейс, то получим кучу методов, см пример здесь. Вот собственно здесь мы и зацепимся. Подключаем &lt;strong&gt;allure-java-adaptor-api&lt;/strong&gt; и реализовываем методы. Важно помнить: чтобы &lt;strong&gt;Allure&lt;/strong&gt; сгенерировал &lt;strong&gt;xml&lt;/strong&gt; файлы, из которых будет собираться отчет, нужно обязательно в методе, который отвечает за окончание тестового прогона, указать TestSuiteFinishedEvent. Мой листенер называется &lt;strong&gt;AllureReporter&lt;/strong&gt;. Для того, чтобы подключить его к JBehave и начать получать отчеты, нужно просто пойти в класс-раннер (пример того, как выглядит, см здесь) и прописать там одну простую строку:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  @Override
  public Configuration configuration() {
    return new MostUsefulConfiguration()
            .useStoryReporterBuilder(new StoryReporterBuilder().withReporters(new AllureReporter())
   ...
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот и все, после запуска тестов в папке target/allure-results будут находиться сгенерированные xml файлы. Затем нужно просто собрать отчет.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Пишем видео во время прогона тестов
          </title>
          <link>http://automation-remarks.com/pishiem-vidieo-vo-vriemia-proghona-tiestov/index.html</link>
          <pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">pishiem-vidieo-vo-vriemia-proghona-tiestov/index.html</guid>
          <description>
                        В этой заметке показан пример того, как можно реализовать запись видео во время прогона Selenium тестов.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой заметке показан пример того, как можно реализовать запись видео во время прогона Selenium тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://it-112.ru/olderfiles/1/videofail.jpg&quot; alt=&quot;videofail&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Да-да, вы не ошиблись, будем рассматривать именно запись видео. Зачем? Бывают ситуации, когда скриншотов не достаточно. К тому же, скриншоты есть у всех, а вот видео - это уже интересно. Реализовать такую киллер-фичу в вашем фреймворке можно разными способами. Я покажу пример с использованием библиотеки &lt;strong&gt;Monte Screen Recorder&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Информацию об этой библиотеке можно почитать на сайте. На главной странице, в разделе &lt;strong&gt;Downloads&lt;/strong&gt;, скачиваем &lt;a href=&quot;http://www.randelshofer.ch/monte/files/demos/MonteScreenRecorder.jar&quot;&gt;MonteScreenRecorder.jar&lt;/a&gt; Этой библиотеки нету в центральном &lt;strong&gt;Maven&lt;/strong&gt; репозитории, поэтому, если у вас Maven проект, придётся добавить библиотеку самостоятельно. Пример команды, которая в этом поможет, приведен ниже. Просто нужно открыть консоль и там набрать команду:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;mvn install:install-file -Dfile=MonteScreenRecorder.jar -DgroupId=org.monte -DartifactId=monte-screen-recorder -Dversion=0.7.7 -Dpackaging=jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь можно подключить &lt;strong&gt;monte-screen-recorder&lt;/strong&gt; как простую зависимость. Идем в &lt;strong&gt;pom.xml&lt;/strong&gt; и прописываем там следующие строки:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.monte&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;monte-screen-recorder&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;0.7.7&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создадим класс &lt;strong&gt;VideoRecord&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.pages.recorder;

import java.awt.*;
import org.monte.screenrecorder.ScreenRecorder;

public class VideoRecord {
    private static ScreenRecorder screenRecorder;

    public static void startRecording() throws Exception {
        GraphicsConfiguration gc = GraphicsEnvironment
                .getLocalGraphicsEnvironment().getDefaultScreenDevice()
                .getDefaultConfiguration();

        screenRecorder = new ScreenRecorder(gc);
        screenRecorder.start();
    }

    public static void stopRecording() throws Exception {
        screenRecorder.stop();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом классе у нас есть два метода &lt;strong&gt;startRecording&lt;/strong&gt; и &lt;strong&gt;stopRecording&lt;/strong&gt;. Их-то мы и будем использовать для управления записью видео.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Before
    public void setUpMethod() throws Exception {
        VideoRecord.startRecording();
    }

    @Test
    public void shouldBeErrorMessage() {
        mainPage.open();
        mainPage.login(&quot;adasd&quot;, &quot;asdasd&quot;);
        String err = mainPage.getErrorMsg();
        assertThat(err, equalTo(&quot;Не вірний логін або пароль. Спробуйте знову.&quot;));
    }

    @After
    public void stop() throws Exception {
        VideoRecord.stopRecording();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По умолчанию записи будут сохраняться в папку &lt;strong&gt;${user.dir}/Movies(Мои Видеозаписи)&lt;/strong&gt;. Собственно, на этом все. Хороших вам роликов и до встреч =)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Получаем больше логов от Selenium
          </title>
          <link>http://automation-remarks.com/selenium-logs/index.html</link>
          <pubDate>Sun, 5 Jul 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">selenium-logs/index.html</guid>
          <description>
                        Заметка о том, как залогировать действия Selenium Webdriver.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка о том, как залогировать действия &lt;strong&gt;Selenium Webdriver&lt;/strong&gt;. Вероятнее всего, вы всегда хотели получать больше информации от &lt;strong&gt;WebDriver&lt;/strong&gt; так, чтобы было легко дебажить скрипты или просто получать больше информации о тестах. Теперь это стало возможным благодаря EventFiringWebDriver и  &lt;strong&gt;WebDriverEventListner&lt;/strong&gt;. &lt;strong&gt;EventFiringWebDriver&lt;/strong&gt; это класс, который используется как обертка над webDriver. &lt;strong&gt;WebDriverEventListner&lt;/strong&gt; - интерфейс, который нужно реализовать, чтобы получить доступ к действиям webdriver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.hurricanesoftwares.com/wp-content/uploads/2013/04/selenium-webdriver.jpg&quot; alt=&quot;selenium webdriver&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Поговорим чуть больше o классе &lt;strong&gt;EventFiringWebDriver&lt;/strong&gt;. Этот класс реализует интерфейс WebDriver. Это означает, что в дополнение ко всем стандартным методам, появляется еще два метода:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;register(WebDriverEventListener eventListener)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unregister(WebDriverEventListener eventListener)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Метод &lt;strong&gt;register&lt;/strong&gt; позволяет зарегистрировать вашу реализацию &lt;strong&gt;WebDriverEventListner&lt;/strong&gt; для того, чтобы слушать все действия webdriver и метод unregister позволяет прервать работу метода register.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Шаг 1: Реализуем интерфейс WebDriverEventListener&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем класс &lt;strong&gt;EventHandler&lt;/strong&gt; и реализуем &lt;strong&gt;WebDriverEventListener&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.custom.listeners;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.events.WebDriverEventListener;

public class EventHandler implements WebDriverEventListener {

    private static final Logger LOG = LogManager.getLogger(EventHandler.class);

    @Override
    public void beforeNavigateTo(String url, WebDriver driver) {

    }

    @Override
    public void afterNavigateTo(String url, WebDriver driver) {

    }

    @Override
    public void beforeNavigateBack(WebDriver driver) {

    }

    @Override
    public void afterNavigateBack(WebDriver driver) {

    }

    @Override
    public void beforeNavigateForward(WebDriver driver) {

    }

    @Override
    public void afterNavigateForward(WebDriver driver) {

    }

    @Override
    public void beforeFindBy(By by, WebElement element, WebDriver driver) {
        LOG.debug(&quot;Should be &quot; + by);
    }

    @Override
    public void afterFindBy(By by, WebElement element, WebDriver driver) {
        LOG.debug(&quot;Element found&quot;);
    }

    @Override
    public void beforeClickOn(WebElement element, WebDriver driver) {
        LOG.debug(&quot;Should click &quot; + element.getTagName());
    }

    @Override
    public void afterClickOn(WebElement element, WebDriver driver) {
        LOG.debug(&quot;Clicked successfull&quot;);
    }

    @Override
    public void beforeChangeValueOf(WebElement element, WebDriver driver) {

    }

    @Override
    public void afterChangeValueOf(WebElement element, WebDriver driver) {

    }

    @Override
    public void beforeScript(String script, WebDriver driver) {

    }

    @Override
    public void afterScript(String script, WebDriver driver) {

    }

    @Override
    public void onException(Throwable throwable, WebDriver driver) {

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Шаг 2: Регистрируем слушателя&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем простой объект webdriver:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;WebDriver driver = new FirefoxDriver();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем объект &lt;strong&gt;EventFiringWebDriver&lt;/strong&gt; и передаем ему созданный объект driver:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;EventFiringWebDriver eventDriver = new EventFiringWebDriver(driver);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Регистрируем &lt;strong&gt;EventHandler&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;eventDriver.register(new EventHandler());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все, теперь мы можем спокойно писать тесты, как мы это делали раньше и при этом логировать действия драйвера.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.events.EventFiringWebDriver;

public class Demo {
    public static void main(String[] args) {
                EventFiringWebDriver eventDriver = new EventFiringWebDriver(new FirefoxDriver());
        EventHandler handler = new EventHandler();
        eventDriver.register(handler);
        eventDriver.get(&quot;http://automation-remarks.com&quot;);
        WebElement element = eventDriver.findElement(By.id(&quot;target&quot;));
        element.click();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В результате запуска у нас получится такой вот лог:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;DEBUG com.home.custom.listeners.WDriverEventListener beforeFindBy - Should be By.name: banner
DEBUG com.home.custom.listeners.WDriverEventListener beforeFindBy - Should be By.name: banner
DEBUG com.home.custom.listeners.WDriverEventListener afterFindBy - Element found
DEBUG com.home.custom.listeners.WDriverEventListener beforeFindBy - Should be By.id: ibm-banner-welcome
DEBUG com.home.custom.listeners.WDriverEventListener beforeFindBy - Should be By.id: ibm-banner-welcome
DEBUG com.home.custom.listeners.WDriverEventListener afterFindBy - Element found&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так просто можно улучшить логирование в вашем тестовом фреймворке. Читабельных вам логов и удачи. Подписывайтесь на нашу рассылку;)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Введение в Selenium для мануальных тестировщиков
          </title>
          <link>http://automation-remarks.com/selenium-for-manual/index.html</link>
          <pubDate>Sat, 4 Jul 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">selenium-for-manual/index.html</guid>
          <description>
                        Одна из лекций под одноименным названием.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Одна из лекций под одноименным названием. Полезно для людей без опыта работы с Selenium webdriver. В лекции показан пример написания самого простого теста. Основное внимание уделено ожиданиям. Показан пример организации кода в проекте.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/oHqHXFklXww?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/Qrqr53X4XMg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Cucumber плюс Spring и Selenium или жирное BDD
          </title>
          <link>http://automation-remarks.com/cucumber/index.html</link>
          <pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">cucumber/index.html</guid>
          <description>
                        Заметка с громким названием на достаточно спорную тему - BDD.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка с громким названием на достаточно спорную тему - BDD. Многие используют Behavior-Driven Development у себя на проектах, многие его ругают. Но, я уверен, есть люди, которые не видели и не пробовали, как это работает. О том, что такое BDD, в чем его основной смысл, вы можете посмотреть &lt;a href=&quot;http://automation-remarks.com/bdd-in-test-automation-lecture/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Дальше я покажу, как настроить проект, показанный на видео по ссылке выше, с использованием &lt;strong&gt;Cucumber&lt;/strong&gt;, &lt;strong&gt;Spring Framework&lt;/strong&gt; и &lt;strong&gt;Selenium&lt;/strong&gt;. Традиционно пример будет реализован на Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак начнем. Создаем простой Maven проект и добавляем зависимости в &lt;strong&gt;pom.xml&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;CucumberDemo&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;CucumberDemo&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;cucumber-core.version&amp;gt;1.1.8&amp;lt;/cucumber-core.version&amp;gt;
        &amp;lt;cucumber-html.version&amp;gt;0.2.3&amp;lt;/cucumber-html.version&amp;gt;
        &amp;lt;cucumber-java.version&amp;gt;1.1.8&amp;lt;/cucumber-java.version&amp;gt;
        &amp;lt;cucumber-junit.version&amp;gt;1.1.8&amp;lt;/cucumber-junit.version&amp;gt;
        &amp;lt;cucumber-jvm-deps.version&amp;gt;1.0.3&amp;lt;/cucumber-jvm-deps.version&amp;gt;
        &amp;lt;cucumber-spring.version&amp;gt;1.1.8&amp;lt;/cucumber-spring.version&amp;gt;
        &amp;lt;gherkin.version&amp;gt;2.12.2&amp;lt;/gherkin.version&amp;gt;
        &amp;lt;hamcrest-all.version&amp;gt;1.3&amp;lt;/hamcrest-all.version&amp;gt;
        &amp;lt;junit.version&amp;gt;4.11&amp;lt;/junit.version&amp;gt;
        &amp;lt;selenium-server.version&amp;gt;2.46.0&amp;lt;/selenium-server.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cucumber-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cucumber-core.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cucumber-html&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cucumber-html.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cucumber-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cucumber-java.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cucumber-junit&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cucumber-junit.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cucumber-jvm-deps&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cucumber-jvm-deps.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cucumber-spring&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cucumber-spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;info.cukes&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;gherkin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${gherkin.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.hamcrest&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;hamcrest-all&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${hamcrest-all.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${junit.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;selenium-server&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${selenium-server.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.1.5.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.1.5.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее нам нужно создать класс CucumberRunner, который будет запускать наши сценарии. Сейчас вы удивитесь краткости настроек:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@RunWith(Cucumber.class)
@CucumberOptions(tags = {},format = {&quot;pretty&quot;, &quot;json:target/cucumber.json&quot;,&quot;html:target/cucumber.html&quot;}, features = {&quot;src/main/java/com/features/&quot;})
public class CucumberRunner {

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Здесь мы указали формат вывода результатов, формат отчета и путь к папке, где лежат наши &lt;strong&gt;feature&lt;/strong&gt; файлы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь создадим непосредственно сам feature файл &lt;strong&gt;pc.feature&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Feature: PC Feature

  @1
  Scenario: Verify that user can open PC page
    Given I open pn.com.ua
    When I select category &quot;Компьютеры&quot;
    Then I should see page url &quot;http://pn.com.ua/computers/&quot;

  @2
  Scenario: Verify that user can open PC page
    Given I open pn.com.ua
    When I select category &quot;Компьютеры&quot;
    Then verify that has sub-column:
    |name|
    |Ноутбуки, планшеты|&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теги &lt;strong&gt;@1&lt;/strong&gt; и &lt;strong&gt;@2&lt;/strong&gt; - это аннотации, с помощью которых мы можем фильтровать сценарии при запуске, указав параметр в CucumberRunner, к примеру &lt;strong&gt;tags{&quot;@2&quot;}&lt;/strong&gt;. Ну вот, с настройкой &lt;strong&gt;Cucumber&lt;/strong&gt; мы справились, теперь приступим к настройке &lt;strong&gt;Spring&lt;/strong&gt;, который будет управлять зависимостями в нашем фреймворке. Создаем в папке &lt;strong&gt;src/java/resources&lt;/strong&gt; файл &lt;strong&gt;cucumber.xml&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&amp;gt;

    &amp;lt;context:annotation-config/&amp;gt;

    &amp;lt;context:component-scan base-package=&quot;com.cucumber&quot;/&amp;gt;

    &amp;lt;import resource=&quot;classpath*:/applicationContext.xml&quot;/&amp;gt;
    &amp;lt;bean id=&quot;driver&quot; class=&quot;org.openqa.selenium.firefox.FirefoxDriver&quot; destroy-method=&quot;quit&quot;/&amp;gt;
&amp;lt;/beans&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь приступим к ComponentObject. Создаем класс Page, от которого будем наследовать все наши классы-компоненты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Page {

    @Autowired
    WebDriver driver;

    @PostConstruct
    public void setUp() {
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
    }

    protected void open(String url) {
        driver.get(url);
    }


    protected WebElement $(String xpath, String... args) {
        return driver.findElement(By.xpath(String.format(xpath, args)));
    }


    protected List&amp;lt;WebElement&amp;gt; $$(By by) {
        return driver.findElements(by);
    }

    protected WebElement $(By by) {
        return driver.findElement(by);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем класс-компонент &lt;strong&gt;Home&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Component
public class Home extends Page{

    private static final String URl = &quot;http://pn.com.ua/&quot;;

    public void open(){
        open(URl);
    }

    public WebElement getCategoty(String name){
        return $(&quot;//a[contains(.,&apos;%s&apos;)]&quot;,name);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Аннотация &lt;strong&gt;@Component&lt;/strong&gt; говорит &lt;strong&gt;Spring&lt;/strong&gt; о том, что нужно создать инстанс этого класса.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем класс &lt;strong&gt;HomeSteps&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class HomeSteps {

    @Autowired
    Home home;

    @Given(&quot;^I open pn\\.com\\.ua$&quot;)
    public void shouldOpenMainPage() throws Throwable {
        home.open();
    }

    @When(&quot;^I select category \&quot;(.*?)\&quot;$&quot;)
    public void shoulSelectCategory(String cat) throws Throwable {
        home.getCategoty(cat).click();
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот она магия &lt;strong&gt;Spring&lt;/strong&gt; - не нужно никаких конструкторов и прочей лишней чепухи, ставим аннотацию @&lt;strong&gt;Autowired&lt;/strong&gt; и все. На этом, собственно, вся настройка заканчивается. Остается создать оставшиеся классы-компоненты, реализовать шаги и запустить тесты. В конце получается красивенький HTML - отчет о результатах прохождения тестов, смотреть его в папке &lt;strong&gt;\target\cucumber.html&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Полный код примера вы можете посмотреть в репозитории &lt;a href=&quot;https://bitbucket.org/Semen4ik20/cucmberspringdemo/src&quot;&gt;bitbucket&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Качайте, пробуйте, подписывайтесь на email рассылку, чтобы получать свежие заметки первыми. Спасибо&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Используем Selenium Grid
          </title>
          <link>http://automation-remarks.com/ispolzuiem-nastroiennyi-selenium-grid/index.html</link>
          <pubDate>Tue, 23 Jun 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">ispolzuiem-nastroiennyi-selenium-grid/index.html</guid>
          <description>
                        Заметка, в которой я покажу, как использовать настроенный Selenium grid в тестовом фреймворке.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка, в которой я покажу, как использовать настроенный Selenium grid в тестовом фреймворке. О том, как настроить grid, я писал в предыдущей &lt;a href=&quot;http://automation-remarks.com/nastraivaiem-selenium-grid-za-5-minut/&quot;&gt;заметке&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.guru99.com/images/AdvanceSelenium/071514_0700_CrossBrowse1.png&quot; alt=&quot;071514 0700 CrossBrowse1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начнем с самого простого. Создаем &lt;strong&gt;Maven&lt;/strong&gt; проект, подключаем две зависимости &lt;strong&gt;TestNG&lt;/strong&gt; и &lt;strong&gt;Selenium-java&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.testng&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;testng&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;6.8.8&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;selenium-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.46.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;TestNG&lt;/strong&gt; приведен не случайно: именно его проще всего использовать для распараллеливания тестов. Почему? Попробуйте - и вы поймете сами =)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этом примере показан тест для страницы поиска Google. Но это не столь важно, следуя примеру, можно создать инфраструктуру для тестирования любого web-приложения.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем общий класс, от которого будут наследоваться все классы тестов. В него помещаем методы фикстуры и другие методы, общие для всех классов тестов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.grid.shedule.core.WebDriverInstansiator;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;

public class BaseTestGrid {

    @Parameters({&quot;browserName&quot;, &quot;browserVersion&quot;})
    @BeforeClass
    public void setUp(@Optional String browserName, String browserVersion){
        WebDriverInstansiator.setDriver(browserName, browserVersion);
    }

    @AfterClass
    public void tearDown() throws Exception{
        WebDriverInstansiator.getDriver().quit();
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самое важное в коде, приведенном выше - класс &lt;strong&gt;WebDriverInstantiator&lt;/strong&gt;. Этот класс будет служить менеджером веб-драйверов для наших тестов. Самое важное в этом классе - ThreadLocal переменная webdriver. Она вводится для того, чтобы на каждый новый поток создавать свой веб-драйвер.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.openqa.selenium.WebDriver;

public class WebDriverInstansiator {

    private static InheritableThreadLocal&amp;lt;WebDriver&amp;gt; webDriver = new InheritableThreadLocal&amp;lt;WebDriver&amp;gt;();
    private static WebDriverFactory factory;

    public static void setDriver(String browserName, String browserVersion){
        factory = new WebDriverFactory();
        webDriver.set(factory.getWebDriver(browserName, browserVersion));
    }

    public static WebDriver getDriver(){
        return webDriver.get();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Внутри класса &lt;strong&gt;WebDriverInstansiator&lt;/strong&gt; находится &lt;strong&gt;PageFactory&lt;/strong&gt;, его цель - упростить создание новых инстансов веб-драйверов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем &lt;strong&gt;Page object&lt;/strong&gt; и класс тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

/**
 * Created by Serhii_Pirohov on 23.06.2015.
 */
public class GooglePage extends Page{

    private static final String URL = &quot;http://google.com/&quot;;

    private static final By SEARCH_INPUT = By.name(&quot;q&quot;);
    private static final By SEARCH_BTN = By.name(&quot;btnK&quot;);


    public GooglePage(WebDriver driver) {
       super(driver);
    }

    public void search(String name){
        $(SEARCH_INPUT).sendKeys(name);
        $(SEARCH_BTN).click();
    }

    public void open() {
        toPage(URL);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Класс тестов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.grid.shedule.core.WebDriverInstansiator;
import com.grid.shedule.pages.GooglePage;
import org.testng.annotations.*;

/**
 * Created by Serhii_Pirohov on 23.06.2015.
 */
public class TestGoogleSearch extends BaseTestGrid {

    GooglePage googlePage;

    @BeforeMethod
    public void setUp() {
        googlePage = new GooglePage(WebDriverInstansiator.getDriver());
    }

    @Test
    public void shouldBeBlogTitle() {
        googlePage.open();
        googlePage.search(&quot;automation remarks&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;И самая последняя часть: нужно настроить &lt;strong&gt;TestNG&lt;/strong&gt; xml, в котором указать, какие тесты и в каких браузерах нужно запускать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
 &amp;lt;!DOCTYPE suite SYSTEM &quot;http://testng.org/testng-1.0.dtd&quot;&amp;gt;
&amp;lt;suite name=&quot;ScheduleBusTest&quot; parallel=&quot;tests&quot; thread-count=&quot;5&quot;&amp;gt;
    &amp;lt;test name=&quot;ChromeTest&quot; verbose=&quot;1&quot; parallel=&quot;true&quot;&amp;gt;
        &amp;lt;parameter name=&quot;browserName&quot; value=&quot;chrome&quot; /&amp;gt;
        &amp;lt;parameter name=&quot;browserVersion&quot; value=&quot;&quot; /&amp;gt;
        &amp;lt;classes&amp;gt;
            &amp;lt;class name=&quot;com.grid.shedule.test.TestGoogleSearch&quot; /&amp;gt;
        &amp;lt;/classes&amp;gt;
    &amp;lt;/test&amp;gt;
    &amp;lt;test name=&quot;InternetExplorerTest&quot; verbose=&quot;1&quot; parallel=&quot;true&quot;&amp;gt;
        &amp;lt;parameter name=&quot;browserName&quot; value=&quot;internet explorer&quot; /&amp;gt;
        &amp;lt;parameter name=&quot;browserVersion&quot; value=&quot;8&quot; /&amp;gt;
        &amp;lt;classes&amp;gt;
            &amp;lt;class name=&quot;com.grid.shedule.test.TestGoogleSearch&quot; /&amp;gt;
        &amp;lt;/classes&amp;gt;
    &amp;lt;/test&amp;gt;
&amp;lt;/suite&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот, на этом настройка закончена. Для того, чтобы запустить тесты, нужно сначала стартовать наш Grid Hub с подключенными Node. Приведу пример скрипта с json файлом конфигурации:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;NodeConfig.json&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;capabilities&quot;:
      [
        {
            &quot;browserName&quot;: &quot;chrome&quot;,
            &quot;platform&quot;: &quot;WINDOWS&quot;,
            &quot;maxInstances&quot;: 13,
            &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;,
            &quot;nodeName&quot;: &quot;simpleNode&quot;
        },
        {
            &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;,
            &quot;browserName&quot;: &quot;internet explorer&quot;,
            &quot;version&quot;: &quot;8&quot;,
            &quot;maxInstances&quot;: 13,
            &quot;platform&quot; : &quot;WINDOWS&quot;,
            &quot;nodeName&quot;: &quot;simpleNode&quot;
        },
        {
          &quot;browserName&quot;: &quot;firefox&quot;,
          &quot;version&quot;: &quot;22&quot;,
          &quot;platform&quot;: &quot;WINDOWS&quot;,
          &quot;firefox_binary&quot;:&quot;FirefoxExe/ff22/firefox.exe&quot;,
          &quot;maxInstances&quot;: 25,
          &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;,
          &quot;nodeName&quot;: &quot;simpleNode&quot;
        },
        {
          &quot;browserName&quot;: &quot;firefox&quot;,
          &quot;version&quot;: &quot;24&quot;,
          &quot;platform&quot;: &quot;WINDOWS&quot;,
          &quot;maxInstances&quot;: 25,
          &quot;firefox_binary&quot;:&quot;FirefoxExe/ff24/firefox.exe&quot;,
          &quot;seleniumProtocol&quot;: &quot;WebDriver&quot;,
          &quot;nodeName&quot;: &quot;simpleNode&quot;
        }
      ],
  &quot;configuration&quot;:
    {
        &quot;nodeTimeout&quot;:120,
        &quot;nodePolling&quot;:2000,
        &quot;registerCycle&quot;:10000,
        &quot;register&quot;:true,
        &quot;cleanUpCycle&quot;:2000,
        &quot;timeout&quot;:30000,
        &quot;maxSession&quot;:25,
        &quot;nodeStatusCheckTimeout&quot;:10000,
        &quot;downPollingLimit&quot;:360000
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Код самого &lt;strong&gt;.bat&lt;/strong&gt; или &lt;strong&gt;.sh&lt;/strong&gt; файла, который я использую для запуска сервера:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;StartGrid.bat(.sh)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;cmd /C start/MIN java -jar selenium-server-standalone-2.46.0.jar -role hub -port 4445 -timeout 300 -browserTimeout 360
cmd /C start/MIN java -jar selenium-server-standalone-2.46.0.jar -role node -port 5599 -hub http://localhost:4445/grid/register -nodeConfig NodeConfig.json -Dwebdriver.chrome.driver=Drivers\chromedriver.exe -Dwebdriver.ie.driver=Drivers\IEDriverServer.exe&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот, теперь можно запускать тест. Должны открыться два браузера IE и Chrome, в которых параллельно будет выполняться наш единственный тест.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Надеюсь, вам понравилась заметка и вы нашли в ней что-то полезное. Подписывайтесь на мой блог, присылайте идеи, делитесь опытом. До новых встреч!..&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Настраиваем Selenium Grid за 5 минут
          </title>
          <link>http://automation-remarks.com/nastraivaiem-selenium-grid-za-5-minut/index.html</link>
          <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">nastraivaiem-selenium-grid-za-5-minut/index.html</guid>
          <description>
                        Заметка о том, как правильно настроить Selenium-Grid.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка о том, как правильно настроить &lt;strong&gt;Selenium-Grid&lt;/strong&gt;. Многие делали это неоднократно, а некоторые даже не знают, что это такое. Ориентируюсь на обе части аудитории: если у вас есть опыт, заметка будет служить такой себе справкой - вдруг чего забыли; если вы не пробовали, но очень хотели - это прекрасный шанс начать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак &lt;strong&gt;Selenium-Grid&lt;/strong&gt; позволяет запускать тесты на разных машинах в разных браузерах параллельно.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://cdn.guru99.com/images/hub_and_nodes.jpg&quot; alt=&quot;hub and nodes&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В основном Selenium Grid используют по нескольким причинам:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для распараллеливания запуска тестов на различных операционных системах, в различных браузерах;
Для того, чтобы уменьшить общее время прогона тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Selenium Grid оперирует такими составляющими, как Hub и Node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что такое Hub?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hub - центральная точка, которая принимает запросы и направляет их к Node. Такой себе командный пункт.
В гриде может быть только один Hub.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Что такое Node?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Node - Selenium инстанс, который будет запускать команды, загружаемые в Hub.
Node может быть много в гриде.
Node - может запускаться на разных операционных системах с разными браузерами.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Начало настройки:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Скачать &lt;strong&gt;Selenium Server Standalone&lt;/strong&gt; &lt;a href=&quot;http://docs.seleniumhq.org/download/&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создайте папку &lt;strong&gt;seleniumgrid&lt;/strong&gt; и скопируйте в нее скачанный &lt;strong&gt;selenium_server_x.xx.x.jar&lt;/strong&gt; файл.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Стартуем Hub.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Открываем окно команд и выполняем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -jar selenium_server_standalone_2.46.0.jar -role hub&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Должно появиться что-то подобное этому:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://cdn.guru99.com/images/launch_hub.jpg&quot; alt=&quot;launch hub&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для того, чтобы проверить, что все стартовало правильно, нужно набрать в браузере&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;http://localhost:4444/grid/console&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Стартуем Node.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В моем случае и &lt;strong&gt;Hub&lt;/strong&gt; и &lt;strong&gt;Node&lt;/strong&gt; расположены на одном компьютере, но это не сильно меняет ситуацию.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Открываем консоль и пишем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Node для браузера &lt;strong&gt;FireFox&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -jar selenium-server-standalone-2.46.0.jar -role webdriver -hub http://localhost:4444/grid/register -port 5556 -browser browserName=firefox&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для браузеров Chrome и Internet Explorer настройка немного отличается. Нужно дописать путь к драйверам соответствующих браузеров -Dwebdriver.ie.driver=IEDriverServer.exe и -Dwebdriver.chrome.driver=chromedriver.exe. Скачать драйверы можно на сайте selenium.org&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Полные команды выглядят так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;strong&gt;Internet Explorer&lt;/strong&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -Dwebdriver.ie.driver=IEDriverServer.exe -jar selenium-server-standalone-2.46.0.jar -role webdriver -hub
http://localhost:4444/grid/register -port 5558 -browser browserName=iexplorer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для Internet explorer я уже описывал, как можно использовать драйвер, написанный самим Майкрософт.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -Dwebdriver.chrome.driver=chromedriver.exe -jar selenium-server-standalone-2.46.0.jar -role webdriver -hub
http://localhost:4444/grid/register -port 5558 -browser browserName=chrome&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Для того, чтобы проверить, что все настроено корректно, нужно открыть все тот же &lt;a href=&quot;http://localhost:4444/grid/console&quot; class=&quot;bare&quot;&gt;http://localhost:4444/grid/console&lt;/a&gt; и убедиться, что там отображается один истанс IE и один Chrome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Следует добавить, конфигурировать Hub и Node можно с помощью JSON файлов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пример для &lt;strong&gt;Hub&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -jar selenium-server-standalone.jar -role hub -hubConfig hubconfig.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пример для &lt;strong&gt;Node&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java -jar selenium-server-standalone.jar -role node -nodeConfig nodeconfig.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот и все, в следующих заметках я покажу, как пользоваться настроенным гридом и запускать тесты. Если вам интересно, подписывайтесь,чтобы получать обновления первым.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Магия Groovy и SQL
          </title>
          <link>http://automation-remarks.com/maghiia-groovy-i-sql/index.html</link>
          <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">maghiia-groovy-i-sql/index.html</guid>
          <description>
                        Новая заметка, о том как можно упростить и ускорить тестирование баз данных.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Новая заметка, о том как можно упростить и ускорить тестирование баз данных.
Начну с описания примерной ситуации, в которой может пригодиться данный подход. Скажем, есть у вас схема базы данных и вы перед стартом приложения, хотите проверить целостность базы данных и находящихся в ней данных. Для этого можно использовать различные подходы, я покажу один из них. В показаном примере используется Groovy. Лично для меня, он привлекателен тем, что некоторые вещи можно делать проще и быстрее. К примеру я уже показывал здесь как быстро и просто прочитать данные из url.
Итак приступим к делу, в примере ниже, я покажу как соедениться с базой данных SQLite. Итак открываем Groovy Console и пишем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Grapes([
 @Grab(group=&apos;org.xerial&apos;,module=&apos;sqlite-jdbc&apos;,version=&apos;3.7.2&apos;),
 @GrabConfig(systemClassLoader=true)
])

import java.sql.*
import org.sqlite.SQLite
import groovy.sql.Sql

//Class.forName(&quot;org.sqlite.JDBC&quot;)

def sql = Sql.newInstance(&quot;jdbc:sqlite:sample.db&quot;, &quot;org.sqlite.JDBC&quot;)

sql.execute(&quot;drop table if exists person&quot;)
sql.execute(&quot;create table person (id integer, name string)&quot;)

def people = sql.dataSet(&quot;person&quot;)
people.add(id:1, name:&quot;leo&quot;)
people.add(id:2,name:&apos;yui&apos;)

sql.eachRow(&quot;select * from person&quot;) {
  println(&quot;id=${it.id}, name= ${it.name}&quot;)
}

result:
id=1, name= leo
id=2, name= yui&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так вот, всего пару строк, котрые позволяют создать таблицу, заполнить ее данными и извлечь их.
Пойдем еще дальше, так как груви консоль - это инструмент &quot;поиграться&quot;.
Берем более серъезные инструменты &lt;strong&gt;Groovy + Spock Framework&lt;/strong&gt;.Базы данных &lt;strong&gt;H2&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создаем тестовый класс:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;import groovy.sql.Sql
import spock.lang.Shared
import spock.lang.Specification

class DatabaseDrivenSpec extends Specification {
    @Shared
            sql = Sql.newInstance(&quot;jdbc:h2:mem:&quot;, &quot;org.h2.Driver&quot;)

    // insert data (usually the database would already contain the data)
    def setupSpec() {
        sql.execute(&quot;&quot;&quot;
                        CREATE TABLE employees
                        ( employee_number number(10) not null,
                          employee_name varchar2(50) not null,
                          salary number(6),
                          CONSTRAINT employees_pk PRIMARY KEY (employee_number)
                        );
                    &quot;&quot;&quot;
        );

sql.execute(&quot;INSERT INTO employees (employee_number, employee_name, salary) VALUES (1001, &apos;Sally Johnson&apos;, 32000);&quot;)
    }


    def &quot;employees test&quot;() {
        expect:
        employee_number == 1001
        employee_name == &quot;Sally Johnson&quot;
        salary == 32000

        where:
        [employee_number, employee_name, salary] &amp;lt;&amp;lt; sql.rows(&quot;select * from employees&quot;)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Можно очень легко читать .sql файлы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String query = new File(&apos;insert.sql&apos;).text
sql.execute(query)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот так вот, мы очень легко и понятно можем обращаться с данными используя Groovy SQL.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Достойная замена проперти файлам
          </title>
          <link>http://automation-remarks.com/zamienitie-property-faily-na-ghruvi-skripty/index.html</link>
          <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">zamienitie-property-faily-na-ghruvi-skripty/index.html</guid>
          <description>
                        Этой заметкой я продолжу когда-то уже начатый разговор о груви.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этой заметкой я продолжу когда-то уже начатый разговор о груви. Сегодня хочу предложить подход, который я испробовал лично, а именно - заменить проперти файл в проекте на груви скрипт.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Итак у нас есть стандартный Java проект со стандартной структурой. Создадим в папке &lt;strong&gt;resources&lt;/strong&gt; файл &lt;strong&gt;config.groovy&lt;/strong&gt; со следующим содержанием:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;environments{
    local{
        mail = &quot;localhost&quot;
        servers{
            linux = &quot;0.0.0.0&quot;
            solaris = &quot;192.168.1.1&quot;
        }
    }
    prod{
        mail = &quot;prodhost&quot;
        servers = [&quot;1.1.1.1&quot;,&quot;2.2.2.2.2&quot;]
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Стандартная ситуация: у нас есть несколько инвайроментов, на которых мы можем запускать тесты. Теперь начнется магия груви. Создаем класс:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Config.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class Config {

    final String CONFIG_FILE = &apos;src/test/resources/config.groovy&apos;
    final String ENVIRONMENTS = &apos;environments&apos;

    def read() {
        new File(CONFIG_FILE).text
    }

    def getEnv(String envName) {
        def config = new ConfigSlurper(envName)
        config.registerConditionalBlock(ENVIRONMENTS, envName)
        config.parse(read())
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сердцем этого класса является метод &lt;strong&gt;getEnv&lt;/strong&gt;, который использует &lt;strong&gt;ConfigSlurper&lt;/strong&gt;. ConfigSlurper может парсить груфи файлы, что даст нам возможность использовать скрипты вместо стандартных Java проперти файлов. Ну и теперь нам остается попробовать класс в действии:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class ConfigTest {
    public static void main(String[] args) {
        def local= new Config().getEnv(&apos;local&apos;)
        println &quot;Local&quot;
        println local.mail
        println local.servers.linux
        println local.servers.solaris

        def prod = new Config().getEnv(&apos;prod&apos;)
        println &quot;Production&quot;
        println prod.mail
        println prod.servers
    }
}

Console output:
Local
localhost
0.0.0.0
192.168.1.1

Production
prodhost
[1.1.1.1, 2.2.2.2.2]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Собственно, результат говорит сам за себя. Лично мое мнение: груви скрипты могут полностью заменить проперти файлы, к тому же скрипт обладает большими возможностями, чем проперти файл. А как вы считаете, применим ли такой подход на вашем проекте?&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              SQL для мануальных тестировщиков
          </title>
          <link>http://automation-remarks.com/sql-dlia-manualnykh-tiestirovshchikov/index.html</link>
          <pubDate>Sun, 10 May 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">sql-dlia-manualnykh-tiestirovshchikov/index.html</guid>
          <description>
                        Лекция предназначенная для мануальных тестироовщиков. Речь будет идти про SQL.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лекция предназначенная для мануальных тестироовщиков. Речь будет идти про SQL. Полезно тем, кто хотел бы изучить основыи научиться писать запросы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/JfhtwAyQbT4?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/83VuI7aTVZo?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/5XjyHjzbLEo?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              4 библиотеки, о которых должен знать каждый Автоматизатор
          </title>
          <link>http://automation-remarks.com/davaitie-poghovorim-pro-asserty/index.html</link>
          <pubDate>Tue, 5 May 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">davaitie-poghovorim-pro-asserty/index.html</guid>
          <description>
                        Самая выразительная часть хорошо написанного теста - хорошо написанный Assert.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самая выразительная часть хорошо написанного теста - хорошо написанный assert (acсершин, ассерт далее). Assert подтверждает поведение системы, которое вы ожидаете. Хороший assert должен с первого взгляда показывать, что делает тест. Ни в коем случае в ваших тестах не должно быть циклов, в недрах которых будет спрятан assert, и вам нужно будет потратить уйму времени, чтобы разобраться с тем, что происходит. Более того, любая не тривиальная логика в тест кейсе повышает риск того, что тест сам по себе неправильный.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.itshouldjustworktm.com/wp-content/uploads/2012/03/assert-sign-photoshopped.jpg&quot; alt=&quot;assert sign photoshopped&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В последние годы значительно увеличилось количество подходов, инструментов и библиотек, которые позволяют просто и быстро писать легко читаемый код. Это касается как кода программы, так и кода тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В области написания тестов существует много библиотек, которые поддерживают понятные ассершины на любом языке. Вы можете спросить: &quot;А зачем оно нужно?&quot;. Легко читаемые ассершины - это самый простой путь написания утверждений в более естественной, более доступной и более экспрессивной манере.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Существует два подхода для написания ассертов. Первый - используя ключевое слово &quot;assert&quot;, второй же - используя такие слова как &lt;strong&gt;&quot;should&quot;&lt;/strong&gt; или &lt;strong&gt;&quot;expect&quot;&lt;/strong&gt;. Первый берет свое начало из более традиционного стиля написания юнит тестов и фокусируется на тестировании и верификации. Второй - более BDD - ориентирован - слова &quot;should&quot; и &quot;expect&quot; описывают поведение, которое вы ожидаете от системы. В этой заметке я предлагаю рассмотреть несколько библиотек, которые помогут в написании понятных ассертов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Аssertions in JavaScript.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JavaScript обладает большим количеством библиотек, которые помогают делать ассерты более выразительными. Jasmine имеет встроенную функцию &lt;code&gt;expect()&lt;/code&gt;. Такие библиотеки как &lt;strong&gt;Should.js&lt;/strong&gt; и &lt;strong&gt;Chai&lt;/strong&gt; поддерживают схожие функции.
Я покажу пару примеров из библиотеки &lt;strong&gt;Chai&lt;/strong&gt;, так как она является самой гибкой и поддерживает оба формата: как &lt;code&gt;expect()&lt;/code&gt; и &lt;code&gt;should()&lt;/code&gt;, так и старый формат - assert. &lt;strong&gt;Chai&lt;/strong&gt; фокусируется на использовании цепочек для того, чтобы сделать утверждения более читабельными и выразительными.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var expect = require(&apos;chai&apos;).expect

var medal = &quot;Bronze&quot;;
...
expect(medal).to.equal(&apos;Bronze&apos;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chai поддерживает богатый набор ассертов для коллекций:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var obtainableStatuses = [&apos;Silver&apos;,&apos;Gold&apos;,&apos;Platinum&apos;]
...
expect(obtainableStatuses).to.have.length(3).and.to.include(&apos;Gold&apos;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну и наконец assert в стиле BDD:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var expect = require(&apos;chai&apos;).should();

medal.should.equal(&apos;Bronze&apos;);
obtainableStatuses.should.have.length(3).and.include(&apos;Silver&apos;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Следует отметить, что оба подхода одинаково выразительны. Таким образом выбор стиля написания зависит от персональных предпочтений. Лично мой выбор в пользу &lt;strong&gt;should&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Assertions in Java.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Буду немного Капитаном Очевидностью и скажу, что библиотеки для написания внятных утверждений существуют и в Java. Они менее выразительны, чем их динамический эквивалент. В Java существуют стандартные утверждения, которые можно получить, используя такие всем известные библиотеки, как &lt;strong&gt;JUnit&lt;/strong&gt; и &lt;strong&gt;TestNG&lt;/strong&gt;. Но ассершины, которые они предоставляют, как по мне, бедноваты и слишком просты по сравнению с теми, о которых далее пойдет речь.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Я приведу пример нескольких библиотек, которые, по моему мнению, могут быть полезными.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;1. Hamcrest&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пожалуй, самая известная библиотека из этой области. Основной метод, который в ней используется, называется &lt;strong&gt;assertThat()&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

import junit.framework.TestCase;

public class BiscuitTest extends TestCase {
  public void testEquals() {
    Biscuit theBiscuit = new Biscuit(&quot;Ginger&quot;);
    Biscuit myBiscuit = new Biscuit(&quot;Ginger&quot;);
    assertThat(theBiscuit, equalTo(myBiscuit));
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самое приятное, что она предоставляет большой выбор матчеров:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Core
    anything - always matches, useful if you don&apos;t care what the object under test is
    describedAs - decorator to adding custom failure description
    is - decorator to improve readability - see &quot;Sugar&quot;, below
Logical
    allOf - matches if all matchers match, short circuits (like Java &amp;amp;&amp;amp;)
    anyOf - matches if any matchers match, short circuits (like Java ||)
    not - matches if the wrapped matcher doesn&apos;t match and vice versa
Object
    equalTo - test object equality using Object.equals
    hasToString - test Object.toString
    instanceOf, isCompatibleType - test type
    notNullValue, nullValue - test for null
    sameInstance - test object identity
Beans
    hasProperty - test JavaBeans properties
Collections
    array - test an array&apos;s elements against an array of matchers
    hasEntry, hasKey, hasValue - test a map contains an entry, key or value
    hasItem, hasItems - test a collection contains elements
    hasItemInArray - test an array contains an element
Number
    closeTo - test floating point values are close to a given value
    greaterThan, greaterThanOrEqualTo, lessThan, lessThanOrEqualTo - test ordering
Text
    equalToIgnoringCase - test string equality ignoring case
    equalToIgnoringWhiteSpace - test string equality ignoring differences in runs of whitespace
    containsString, endsWith, startsWith - test string matching&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Более подробно можно посмотреть на их &lt;a href=&quot;https://code.google.com/p/hamcrest/wiki/Tutorial&quot;&gt;сайте&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично я пользуюсь этой библиотекой.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2. FestAssert&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как утрверждают сами разработчики:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
FEST Assertions 2.0 is a Java library that provides a fluent interface for writing assertions. Its main goal is to improve test code readability and make maintenance of tests easier.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Парочка примеров использования:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import static org.fest.assertions.api.Assertions.*;

// common assertions
assertThat(yoda).isInstanceOf(Jedi.class);
assertThat(frodo.getName()).isEqualTo(&quot;Frodo&quot;);
assertThat(frodo).isNotEqualTo(sauron);
assertThat(frodo).isIn(fellowshipOfTheRing);
assertThat(sauron).isNotIn(fellowshipOfTheRing);

// String specific assertions
assertThat(frodo.getName()).startsWith(&quot;Fro&quot;).endsWith(&quot;do&quot;)
                           .isEqualToIgnoringCase(&quot;frodo&quot;);

// collection specific assertions
assertThat(fellowshipOfTheRing).hasSize(9)
                               .contains(frodo, sam)
                               .excludes(sauron);
// throwable specific assertions
try {
  fellowshipOfTheRing.get(9); // argggl !
} catch (Exception e) {
  assertThat(e).isInstanceOf(IndexOutOfBoundsException.class)
               .hasMessage(&quot;Index: 9, Size: 9&quot;)
               .hasNoCause();
}

// map specific assertions (One ring and elves ring bearers initialized before)
assertThat(ringBearers).hasSize(4)
                       .includes(entry(oneRing, frodo), entry(nenya, galadriel))
                       .excludes(entry(oneRing, aragorn));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Лично я на проектах активно не использовал эту библиотеку, но меня она привлекла тем, что есть готовые ассершины для &lt;strong&gt;Joda Time&lt;/strong&gt;, &lt;strong&gt;Guava&lt;/strong&gt;. Также есть возможность использования компараттора для утверждений.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// frodo and sam are instances of Character with Hobbit race (obviously :), they are not equal ...
assertThat(frodo).isNotEqualTo(sam);
// ... but if we compare race only, they are (raceComparator implements Comparator&amp;lt;Character&amp;gt;)
assertThat(frodo).usingComparator(raceComparator).isEqualTo(sam);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Более подробно можно посмотреть и скачать &lt;a href=&quot;https://github.com/alexruiz/fest-assert-2.x&quot;&gt;здесь&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Обе эти библиотеки очень похожи, они предлагают большой набор матчеров. Например для того, чтобы проверить, что список содержит элементы. В хамкресте это делается так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;assertThat(member.getUnachievedStatuses(), hasItems(GOLD,PLATINUM));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В &lt;strong&gt;FestAssert&lt;/strong&gt; это будет выглядеть так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;assertThat(member.getUnachievedStatuses()).contains(GOLD,PLATINUM);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;К сожалению, FestAssert больше не активен, поэтому взамен этой библиотеки предлагаю посмотреть на следующую в списке.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;3. AssertJ&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;AssertJ&lt;/strong&gt; - форк библиотеки Fest Assert, предоставляет большой набор утверждений, сообщений об ошибках и позволяет улучшить читабельность тестового кода.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// unique entry point to get access to all assertThat methods and utility methods (e.g. entry)
import static org.assertj.core.api.Assertions.*;

// common assertions
assertThat(frodo.getName()).isEqualTo(&quot;Frodo&quot;);
assertThat(frodo).isNotEqualTo(sauron)
                 .isIn(fellowshipOfTheRing);

// String specific assertions
assertThat(frodo.getName()).startsWith(&quot;Fro&quot;)
                           .endsWith(&quot;do&quot;)
                           .isEqualToIgnoringCase(&quot;frodo&quot;);

// collection specific assertions
assertThat(fellowshipOfTheRing).hasSize(9)
                               .contains(frodo, sam)
                               .doesNotContain(sauron);

// using extracting magical feature to check fellowshipOfTheRing characters name :)
assertThat(fellowshipOfTheRing).extracting(&quot;name&quot;).contains(&quot;Boromir&quot;, &quot;Gandalf&quot;, &quot;Frodo&quot;, &quot;Legolas&quot;)
                                                  .doesNotContain(&quot;Sauron&quot;, &quot;Elrond&quot;);

// map specific assertions, ringBearers initialized with the elves rings and the one ring bearers.
assertThat(ringBearers).hasSize(4)
                       .contains(entry(oneRing, frodo), entry(nenya, galadriel))
                       .doesNotContainEntry(oneRing, aragorn);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Больше примеров и документации можно найти на их &lt;a href=&quot;http://joel-costigliola.github.io/assertj/&quot;&gt;сайте&lt;/a&gt;. Лично я в своем следующем проекте обязательно буду использовать &lt;strong&gt;AssertJ&lt;/strong&gt;, так как он, по моему личному мнению, лучше и проще, чем &lt;strong&gt;Hamcrest&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;4.Google Truth&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Еще одна библиотечка от одноименной компании с очень приятным именем.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Set&amp;lt;Foo&amp;gt; foo = ...;
assertTrue(foo.isEmpty()); // or, shudder, foo.size() == 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Дает непонятное и нечитабельное исключение:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:92)
    at org.junit.Assert.assertTrue(Assert.java:43)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;С применением Truth читабельность и понятность гораздо выше:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Set&amp;lt;Foo&amp;gt; foo = ...;
assertThat(foo).isEmpty()


org.truth0.FailureStrategy$ThrowableAssertionError: Not true that  is empty
    at org.truth0.FailureStrategy.fail(FailureStrategy.java:33)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Хотите узнать больше и попробовать, смотрите здесь &lt;a href=&quot;http://google.github.io/truth/&quot;&gt;cайт&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ну вот собственно и все.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Небольшой итог об этих монстрах:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Hamcrest&lt;/strong&gt; и &lt;strong&gt;FestAssert&lt;/strong&gt; играют подобные роли в Java-based BDD. Hamcrest более гибкий и легко расширяемый, но FestAssert обладает более простым синтаксисом и более прост в использовании. &lt;strong&gt;AssertJ&lt;/strong&gt; - улучшенная версия &lt;strong&gt;FestAssert&lt;/strong&gt;, которая обладает уймой полезных фишек.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В целом все библиотеки предназначены для того, чтобы сделать юнит тесты проще и понятнее. Хороших вам assertов =)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              CI &amp; Build tools for newbies
          </title>
          <link>http://automation-remarks.com/ci-build-tools-for-newbies/index.html</link>
          <pubDate>Fri, 1 May 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">ci-build-tools-for-newbies/index.html</guid>
          <description>
                        Привет! Новый пост - лекция про билд тулы и континиус интегрейшин.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Новый пост - лекция про билд тулы и континиус интегрейшин.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/XpVNDRRjtsw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/dacqCkdFbP8?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/CVItdJV_cqM?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Свое АОP в JDK
          </title>
          <link>http://automation-remarks.com/svoie-aop/index.html</link>
          <pubDate>Sun, 29 Mar 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">svoie-aop/index.html</guid>
          <description>
                        Заметка о том, как можно реализовать AOP без Spring и AspectJ.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Заметка о том, как можно реализовать &lt;strong&gt;AOP&lt;/strong&gt; без &lt;strong&gt;Spring&lt;/strong&gt; и &lt;strong&gt;AspectJ&lt;/strong&gt;. Для тех, кто не особо в курсе, что такое AOP смотреть суда. Итак, приступим. Создадим нашу мини программу:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public interface Calculator {
    public int calculate( int a , int b);
}

public class CalculatorImpl implements Calculator {
    @Override
    public int calculate(int a, int b) {
        System.out.println(&quot;**********Actual Method Execution**********&quot;);
        return a/b;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Класс &lt;strong&gt;Calculator&lt;/strong&gt; будет имеенно тем классом, который мы будем проксировать. В java есть такой интересный интерфейс &lt;strong&gt;InvocationHandler&lt;/strong&gt;, его мы и будем использовать для нашей реализации &lt;strong&gt;AOP&lt;/strong&gt;. Создадим абстрактный &lt;strong&gt;Handler&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public abstract class AbstractHandler implements InvocationHandler {

    private Object targetObject;

    public void setTargetObject(Object targetObject) {
        this.targetObject = targetObject;
    }

    public Object getTargetObject() {
        return targetObject;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создадим &lt;strong&gt;ProxyFactory&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class ProxyFactory {

public static Object getProxy(Object targetObject,
        List&amp;lt;AbstractHandler&amp;gt; handlers) {
    Object proxyObject = null;
    if (handlers.size() &amp;gt; 0) {
        proxyObject = targetObject;
        for (int i = 0; i &amp;lt; handlers.size(); i++) {
            handlers.get(i).setTargetObject(proxyObject);
            proxyObject = Proxy.newProxyInstance(targetObject.getClass()
                    .getClassLoader(), targetObject.getClass()
                    .getInterfaces(), handlers.get(i));
        }
        return proxyObject;
    } else {
        return targetObject;
    }
}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В AOP существует несколько срезов: &lt;strong&gt;Before&lt;/strong&gt;, &lt;strong&gt;After&lt;/strong&gt;, &lt;strong&gt;AfterThrowing&lt;/strong&gt;, &lt;strong&gt;AfterReturning&lt;/strong&gt; и &lt;strong&gt;Around&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Так как реализации каждого среза могут быть разными, для разных случаев, создадим для них абстрактные классы:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пример для &lt;strong&gt;AfterHandler&lt;/strong&gt; и &lt;strong&gt;BeforeHandler&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public abstract class AfterHandler extends AbstractHandler {

    /**
     * Handles after the execution of method.
     *
     * @param proxy the proxy
     * @param method the method
     * @param args the args
     */
    public abstract void handleAfter(Object proxy, Method method, Object[] args);

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

        Object result = method.invoke(getTargetObject(), args);
        handleAfter(proxy, method, args);
        return result;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;AbstractBeforeHandler:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public abstract class BeforeHandler extends AbstractHandler {

    /**
     * Handles before execution of actual method.
     *
     * @param proxy the proxy
     * @param method the method
     * @param args the args
     */
    public abstract void handleBefore(Object proxy, Method method, Object[] args);

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        handleBefore(proxy, method, args);
        return method.invoke(getTargetObject(), args);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь нам нужно сделать конкретные реализации для каждого из срезов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class AfterHandlerImpl extends AfterHandler {

    @Override
    public void handleAfter(Object proxy, Method method, Object[] args) {
        //Provide your own cross cutting concern
        System.out.println(method.getName() + Arrays.toString(args));
        System.out.println(&quot;Handling after actual method execution ........&quot;);
    }
}

public class BeforeHandlerImpl extends BeforeHandler {

    @Override
    public void handleBefore(Object proxy, Method method, Object[] args) {
        //Provide your own cross cutting concern
        System.out.println(&quot;Handling before actual method execution ........&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь мы можем легко проксировать наш &lt;strong&gt;Calculator&lt;/strong&gt; класс:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class TestAopInJDK {

    public static void main(String[] args) {
        CalculatorImpl calcImpl = new CalculatorImpl();
        BeforeHandler before = new BeforeHandlerImpl();
        AfterHandler after = new AfterHandlerImpl();
        List&amp;lt;AbstractHandler&amp;gt; handlers = new ArrayList&amp;lt;AbstractHandler&amp;gt;();
        handlers.add(before);
        handlers.add(after);
        Calculator proxy = (Calculator) ProxyFactory.getProxy(calcImpl,
                handlers);
        int result = proxy.calculate(20, 10);
        System.out.println(&quot;FInal Result :::&quot; + result);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После запуска вывод в консоль оказывается таким:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Handling before actual method execution ........
**********Actual Method Execution**********
calculate[20, 10]
Handling after actual method execution ........
Final Result :::2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как вы можете заметить срабатывает Before, затем идет работа метода и затем срабатывает After.
&lt;strong&gt;P.S.&lt;/strong&gt;
Многие кто не сильно в теме могут сказать, что такое же можно было реализовать просто написав перед вызовом и после вызова sysout. Да, можно было, но AOP предназначено немного для других целей.Я уже описывал то как мы используем логер для действий вебдрайвера здесь. В своих фреймворках, я дополнительно логирую имена методов и параметры которые он принимают используя AOP. Это позволяет хранить весь код логирования в одном месте,а не розмазывать его по всем классам.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              А как вы логируете?
          </title>
          <link>http://automation-remarks.com/a-kak-vy-loghiruietie/index.html</link>
          <pubDate>Sat, 28 Mar 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">a-kak-vy-loghiruietie/index.html</guid>
          <description>
                        Данной статьей хотелось бы поделиться тем, как я переизобрел велосипед и перестал писать логер после каждой строки кода.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Данной статьей хотелось бы поделиться тем, как я переизобрел велосипед и перестал писать логер после каждой строки кода.
Итак, начну с предыстории. Есть у меня проект который организован на основе &lt;strong&gt;Spring + Jbehave + Selenium&lt;/strong&gt;, все вроде как хорошо, тесты бегают, тесты падают. Но вот бывает такое, что тест идет и в одном методе выполняется пару действий - понять какое именно действие вызывает фейл, бывает очень сложно. Что в таком случае делать? Правильно - начинать логировать. А как логировать? Очень просто берем &lt;strong&gt;Slf4j&lt;/strong&gt; делаем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class SomePage {
    private static final Logger LOG = LoggerManager.getLoggger(SomePage.class);

    public void someMethod(){
        LOG.info(&quot;something happens&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как любит говорить один мой знакомый: &quot;казалось бы&quot;. Но здесь всего один метод. При увеличении строк кода, логер будет пропорционально захламлять код. В дополнение не всегда хочеться писать вот эту вот строку в каждом классе:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private static final Logger LOG = LoggerManager.getLoggger(SomePage.class);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Да, можно использовать &lt;strong&gt;Lombook&lt;/strong&gt;, но не все положительно относятся к библиотекам такого рода.
Передем к более насущной проблеме, скажем есть у вас метод:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void login(User user){
    driver.find(By.id(&quot;login&quot;)).sendKeys(user.name);
    driver.find(By.id(&quot;pass&quot;)).sendKeys(user.pass);
    driver.find(By.id(&quot;login_btn&quot;)).click();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как здесь залогировать то, что я заполнил два поля и тыцнул на кнопку? Первое что приходит на ум - просто добавить логер. А куда добавлять? Перед действием или после? А если я хочу и там и там? Давайте посмотрим:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void login(User user){
    LOG.info(&quot;Type login {}&quot;,user.name);
    driver.find(By.id(&quot;login&quot;)).sendKeys(user.name);
    LOG.info(&quot;Type password {}&quot;,user.pass);
    driver.find(By.id(&quot;pass&quot;)).sendKeys(user.pass);
    LOG.info(&quot;Click login btn);
    driver.find(By.id(&quot;login_btn&quot;)).click();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Последний кусок кода выглядит просто ужасно. В таких ситуациях очень кстати приходиться &lt;strong&gt;Selenium WebDriver Event Listener Interface&lt;/strong&gt;. Этот интерфейс предоставляет доступ ко всем основным действиям драйвера:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class EventHandler implements WebDriverEventListener{

    public void afterChangeValueOf(WebElement arg0, WebDriver arg1) {
    // TODO Auto-generated method stub
    }

    public void afterClickOn(WebElement arg0, WebDriver arg1) {
    // TODO Auto-generated method stub
    }

    public void afterFindBy(By arg0, WebElement arg1, WebDriver arg2) {
    // TODO Auto-generated method stub
    }

    public void afterNavigateBack(WebDriver arg0) {
    // TODO Auto-generated method stub
    }
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все что нужно сделать, просто реализовать методы, затем зарегистрировать ваш листенер и начать наслаждаться происходящим:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.events.EventFiringWebDriver;

public class Main {

    public static void main(String[] args) {

        FirefoxDriver driver = new FirefoxDriver();
        EventFiringWebDriver eventDriver = new EventFiringWebDriver(driver);

        EventHandler handler = new EventHandler();
        eventDriver.register(handler);
        eventDriver.get(&quot;http://www.toolsqa.com/automation-practice-switch-windows/&quot;);
        WebElement element = eventDriver.findElement(By.id(&quot;target&quot;));
        element.click();

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Используя такой подход можно легко и просто залогировать все действия драйвера.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              BDD In Test Automation lecture
          </title>
          <link>http://automation-remarks.com/bdd-in-test-automation-lecture/index.html</link>
          <pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">bdd-in-test-automation-lecture/index.html</guid>
          <description>
                        Моя лекция, которую я проводил в компании, для студентов.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Моя лекция, которую я проводил в компании, для студентов. В лекции попытался доступным языком рассказать о том, что такое BDD и как его имплеменитровать в жизнь. Сделал небольше овервью таких иснтрументов как &lt;strong&gt;Cucumber&lt;/strong&gt;, &lt;strong&gt;JBehave&lt;/strong&gt;, &lt;strong&gt;Spock&lt;/strong&gt;, &lt;strong&gt;Lettuce&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/9_Ij3ux7l0Y?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/tL9Yavmv0nM?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/PtGkytbbS2o?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/GJFvMQ_IW1Y?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Lettuce Python
          </title>
          <link>http://automation-remarks.com/lettuce-python/index.html</link>
          <pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">lettuce-python/index.html</guid>
          <description>
                        О BDD для Python
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Готовился я как-то к презентации по Behaviour Driven Development, готовил практические примеры по различным тулам и решил показать пример того как можно реализовать BDD с помощью Python. Посмотрел на Behave и на Lettuce см тут. Мой выбор пал на второй инструмент, не знаю почему, видимо потому что тесты писать проще и быстрее. Дабы не быть голословным приведу пример. Начнем с установки. Ставим Python &lt;strong&gt;2.7 (Это ВАЖНО - на Python 3 работать не будет)&lt;/strong&gt;. Ставим lettuce и selenium:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;pip install lettuce
pip install selenium
pip install PyHumcrest&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Создадим иерархию папок:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;lettuce_demo
    | features&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В корневом каталоге создадим файлик &lt;strong&gt;terrain.py&lt;/strong&gt;, он будет содержать команды, которые будут выполнять на разных стадиях исполнения тестов, в данном случае файл имеет такое содержание:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from lettuce import before, after, world
from selenium import webdriver
from mapping import site_mapping


@before.each_feature
def setup(server):
    world.browser = webdriver.Firefox()
    world.mapping = site_mapping


@after.all
def tear_down(total):
    world.browser.close()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем, в корне,создаем файл &lt;strong&gt;mapping.py&lt;/strong&gt;. Этой файл содержит локаторы элементов, такой себе &lt;strong&gt;PageObject&lt;/strong&gt;, только необычный:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;host_url = &quot;http://pn.com.ua&quot;

site_mapping = {
    &quot;pc_search&quot;: {
        &quot;url&quot;: host_url,
        &quot;computers&quot;: &quot;.//*[@id=&apos;page-content-wrap&apos;]/div/div[1]/div/h1[1]/a&quot;,
        &quot;notebook&quot;: &quot;.//*[@id=&apos;page-content-wrap&apos;]/div[3]/div[1]/div/div[2]/a&quot;,
        &quot;model_number&quot;: &quot;.//*[@id=&apos;page-content-wrap&apos;]/div[3]/div[1]/div[1]/div/div[2]/div[1]/b&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В локаторых можно использовать как &lt;strong&gt;XPath&lt;/strong&gt; так и СSS Selectors.
В папке features создаем &lt;strong&gt;pc.feature&lt;/strong&gt; - этот файл содержит описание теста.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Feature: search
  Scenario: Search pc
    Open &quot;pc_search&quot; page
    Click &quot;computers&quot;
    Click &quot;notebook&quot;
    See &quot;2703&quot; in &quot;model_number&quot;

  Scenario: Search pc fail
    Open &quot;pc_search&quot; page
    Click &quot;computers&quot;
    Click &quot;notebook&quot;
    See &quot;27012&quot; in &quot;model_number&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В создаем &lt;strong&gt;features/steps.py&lt;/strong&gt; - файл содержит описания шагов, используемых в &lt;strong&gt;*.feature&lt;/strong&gt; файлах&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from lettuce import step, world
from hamcrest import *

@step(r&apos;Open &quot;(.*)&quot; page&apos;)
def should_open_main_page(step, page):
    world.current_page = world.mapping[page]
    world.browser.get(world.current_page[&apos;url&apos;])

@step(u&apos;Click &quot;([^&quot;]*)&quot;&apos;)
def click_group1(step, element):
    el = world.browser.find_element_by_xpath(world.current_page[element])
    el.click()

@step(u&apos;See &quot;([^&quot;]*)&quot; in &quot;([^&quot;]*)&quot;&apos;)
def see_group1_in_group2(step, text, element):
    el = world.browser.find_element_by_xpath(world.current_page[element])
    assert_that(el.text, equal_to(text))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот и все. В консоли в корне проекта пишем: &lt;strong&gt;lettuce&lt;/strong&gt; - вуаля видим как запускается браузер и проходят тесты.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Вывод:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lettuce могут использовать как тестировщики так и разработчики.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Высокая устойчивость к изменениям в верстке и структуре сайта в целом благодоря mapping.py&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Выведите ваши тесты на новый уровень!
          </title>
          <link>http://automation-remarks.com/vyvieditie-vashi-tiesty-na-novyi-urovien/index.html</link>
          <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">vyvieditie-vashi-tiesty-na-novyi-urovien/index.html</guid>
          <description>
                        Пару месяцев назад, я задумался - вот есть у меня пару сотен тестов, фреймворк там да, все как положенно!
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Пару месяцев назад, я задумался - вот есть у меня пару сотен тестов, фреймворк там да, все как положенно! Тесты бегают 24\7 с 98% пасс результатом, отчет собирается и успешно уходит всем манагерам. Казалось бы - жизнь удалась. Но, за всем прекрасным всегда скрывается, что то ужасное. Решил я попробовать прогнать проект через &lt;strong&gt;Sonar&lt;/strong&gt;. Собственно таким введением я хотел начать рассказ о том стоит ли применять статические анализаторы кода для фреймворка и тестов. Статический анализатор предназначен для того, чтобы следить за чистотой кода и отслеживать ошибки типа переполнение буфера или возможный &lt;em&gt;NullPointerException&lt;/em&gt;. Устанавливается сонар очень просто: скачиваем архив, распаковываем, ставим &lt;strong&gt;MySQL&lt;/strong&gt;, прописываем в пропертях сонара путь к базе, стартуем батник и все. Несколько простых шагов и у нас есть сервер. Далее нам нужно просканировать проект. Если проект на &lt;strong&gt;Maven&lt;/strong&gt;, то просто в pom нужно вписать:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;project&amp;gt;
  ...
  &amp;lt;build&amp;gt;
    &amp;lt;!-- To define the plugin version in your parent POM --&amp;gt;
    &amp;lt;pluginManagement&amp;gt;
      &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
          &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;sonar-maven-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;
        &amp;lt;/plugin&amp;gt;
        ...
      &amp;lt;/plugins&amp;gt;
    &amp;lt;/pluginManagement&amp;gt;
    &amp;lt;!-- To use the plugin goals in your POM or parent POM --&amp;gt;
    &amp;lt;plugins&amp;gt;
      &amp;lt;plugin&amp;gt;
        &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;sonar-maven-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;
      &amp;lt;/plugin&amp;gt;
      ...
    &amp;lt;/plugins&amp;gt;
  &amp;lt;/build&amp;gt;
  ...
&amp;lt;/project&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Далее в Maven setting.xml добавляем:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;profile&amp;gt;
    &amp;lt;id&amp;gt;sonar&amp;lt;/id&amp;gt;
    &amp;lt;activation&amp;gt;
       &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;
    &amp;lt;/activation&amp;gt;
&amp;lt;properties&amp;gt;
&amp;lt;sonar.jdbc.url&amp;gt;jdbc:postgresql://localhost/sonar&amp;lt;;/sonar.jdbc.url&amp;gt;
&amp;lt;sonar.jdbc.driver&amp;gt;org.postgresql.Driver&amp;lt;/sonar.jdbc.driver&amp;gt;
&amp;lt;sonar.jdbc.username&amp;gt;user&amp;lt;/sonar.jdbc.username&amp;gt;
&amp;lt;sonar.jdbc.password&amp;gt;password&amp;lt;/sonar.jdbc.password&amp;gt;
&amp;lt;!-- SERVER ON A REMOTE HOST --&amp;gt;
&amp;lt;sonar.host.url&amp;gt;http://localhost:9000&amp;lt;/sonar.host.url&amp;gt;
   &amp;lt;/properties&amp;gt;
&amp;lt;/profile&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот и все! При запущенном сервере - выполняем &lt;strong&gt;mvn sonar:sonar&lt;/strong&gt; ждем завершения сканирования. Далее отрываем в браузере адрес, который мы прописывали:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;sonar.host.url&amp;gt;http://localhost:9000&amp;lt;/sonar.host.url&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Проделав все эти действия, я был шокирован. В проекте был ужжаасный код. Сделав выводы, на новом проете, я начал применять Sonar с самого первого дня. Спустя три месяца, мы создали 300 тестов. Техникал дебт равен 0.1. А сложность кода - 1.2. Вы можете себе представить такое? Разработчики даже подшучивают иногда, что тесты &quot;чище&quot; чем сам проект. Вот так вот Sonar помог повыситься качество кода тестов. А вы используете статические анализаторы кода?&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              WebDriver factory без IF-ELSE
          </title>
          <link>http://automation-remarks.com/webdriver-factory-biez-if-else/index.html</link>
          <pubDate>Sat, 7 Mar 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">webdriver-factory-biez-if-else/index.html</guid>
          <description>
                        В этой заметке покажу, как можно написать WebDriver factory без применения IF-ELSE.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В этой заметке покажу, как можно написать WebDriver factory без применения IF-ELSE.
Зачастую во фреймворках в случае кросс-браузерного тестирования приходится писать драйвер фэктори. Большинство реализаций, которые мне приходилось видеть, выглядели так:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;BrowserFactory.class&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class BrowserFactory{
    public static final WebDriver DEFAULT_FF = new FirefoxDriver();

 public static WebDriver getDriver(String name){
     WebDriver driver = null;
     if(&quot;FIREFOX&quot;.equalsIgnoreCase(name)){
        driver= new FirefoxDriver();
     }else if(&quot;CHROME&quot;.equalsIgnoreCase(name)){
         driver = new ChromeDriver();
     }else if(&quot;IE&quot;.equalsIgnoreCase(name)){
         driver = new InternetExplorerDriver();
     }else {
         driver = DEFAULT_FF;
     }
     return driver;
 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Но такая реализация, скажем так, не самая хорошая: читабельность кода страдает, человеку приходится гадать, как же правильно задать имя браузера, ну и самое неприятное - куча if-else. Давайте посмотрим, как можно улучшить ситуацию.
Объектно-ориентированные языки программирования обладают мощнейщим принципом - полиморфизмом. Его мы и будем использовать, чтобы удалить if-else в коде. В результате читабельность кода значительно повысится.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Рефлексия&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Первое &quot;топорное&quot; решение (я назвал бы его &quot;решением для реальных пацанов&quot;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Browsers{
    public static WebDriver newBrowser(String name){
        return Class.forName(name).newInstance();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Смотрится очень просто, НО сложность заключается в том, что человек должен помнить полное имя класса. К тому же, использование рефлексии повышает степень брутальности в пару раз. Поэтому таких решений следует избегать.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Map&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Второе решение более приемлемое - использование Map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Browsers{
    private static Map&amp;lt;String,WebDriver&amp;gt; drivers = new HashMap&amp;lt;&amp;gt;(){
        put(&quot;CHROME&quot;,new ChromeDriver());
        put(&quot;FIREFOX&quot;,new FirefoxDriver());
        put(&quot;IE&quot;,new InternetExplorerDriver());
    }

    public static WebDriver newDriver(String name){
        return drivers.get(name);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Это решение обладает недостатком: нужно знать правильное имя драйвера, которое задано в Map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Switch&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;switch (name) {
    case &quot;FIREFOX&quot;: return new FirefoxDriver();
    case &quot;CHROME&quot;: return new ChromeDriver();
    case &quot;IE&quot;: return new InternetExplorerDriver();
    default: return DEFAULT_FF;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Enum&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Самое элегантное решение:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public enum Browsers {
    CHROME {
        public WebDriver create(){
            return new ChromeDriver();
        }
    },
    IE {
        public WebDriver create(){
            return new InternetExplorerDriver();
        }
    },
    FIREFOX {
        public WebDriver create() {
            return new FirefoxDriver();
        }
    };

    public WebDriver create(){
        return null;
    }
}

class Test {
    public static void main(String[] args) {
       WebDriver driver = Browsers.FIREFOX.create();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Классно, не правда ли? Нету надоедливых if-else, нету строк, которые нужно помнить - просто вызываем нужный нам тип драйвера и все. Лично я предпочитаю этот метод.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;P.S. Конструкция if-else делает код сложным для чтения, поэтому нужно стараться избегать их использования.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Замечательный каталог рефакторинга
          </title>
          <link>http://automation-remarks.com/zamiechatielnyi-katalogh-riefaktoringha/index.html</link>
          <pubDate>Sun, 1 Mar 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">zamiechatielnyi-katalogh-riefaktoringha/index.html</guid>
          <description>
                        Совсем недавно решил окунуться в мир &quot;правильного&quot; рефакторинга.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Совсем недавно решил окунуться в мир &quot;правильного&quot; рефакторинга. Зачастую так бывает: люди думают, что они умеют рефакторить правильно. Изменил пару строк, переименовал пару переменных - зарефакторил. Порешал как царь =). Но на самом деле по сравнению с настоящим рефакторингом - это всего лишь махание руками и трата драгоценного времени. Чтобы научиться рефакторить и узнать, зачем это делать, можно почитать книгу Фаулера - &quot;Рефакторинг - улучшение существующего кода&quot;. А еще можно зайти на этот замечательный ресурс, в котором описаны основные проблемы - &quot;запахи кода&quot;, а также советы по их устранению и улучшению существующего кода.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;http://refactoring.guru/ru/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Удачного рефакторинга!&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Gradle run single TestNG method
          </title>
          <link>http://automation-remarks.com/gradle-run-single-test-method/index.html</link>
          <pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">gradle-run-single-test-method/index.html</guid>
          <description>
                        This is the shortest remark ever. Just a few word and a few lines of code.
          </description>
          <content:encoded>
                        &lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://kaczanowscy.pl/tomek/sites/default/files/2012_04_uncle_sam_170.png&quot; alt=&quot;2012 04 uncle sam 170&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the shortest remark ever. Just a few word and a few lines of code. So to run single test with &lt;strong&gt;Gradle&lt;/strong&gt; and &lt;strong&gt;TestNG&lt;/strong&gt; you can use one of this approaches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run someSpecificFeature method from &lt;strong&gt;SomeTest&lt;/strong&gt; in specific &lt;strong&gt;arg.gradle&lt;/strong&gt; package:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;gradle test --tests org.gradle.SomeTest.someSpecificFeature&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run &lt;strong&gt;someSpecificFeature&lt;/strong&gt; method from &lt;strong&gt;SomeTest&lt;/strong&gt; in any package:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;gradle test --tests *SomeTest.someSpecificFeature&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run all methods in SomeSpecificTest class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;gradle test --tests *SomeSpecificTest&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run all in specific package:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;gradle test --tests all.in.specific.package*&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run all in classes which name starts with IntegTest:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;gradle test --tests *IntegTest

gradle test --tests *IntegTest*ui*&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run &lt;strong&gt;someTestTask&lt;/strong&gt; from any &lt;strong&gt;UiTest&lt;/strong&gt; and &lt;strong&gt;someTestTask&lt;/strong&gt; from any &lt;strong&gt;WebTest*ui&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;gradle someTestTask --tests *UiTest someOtherTestTask --tests *WebTest*ui&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cheers! Thats all;)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Мощь Groovy: Reading URL Content
          </title>
          <link>http://automation-remarks.com/groovy-power-reading-url-content/index.html</link>
          <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">groovy-power-reading-url-content/index.html</guid>
          <description>
                        Groovy adds some methods to the URL class which make reading data from an URL easy.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Groovy adds some methods to the URL class which make reading data from an URL easy. For example the text property returns the complete contents of the document that is identified by the URL. Or we can use the &lt;strong&gt;eachLine()&lt;/strong&gt; method to loop through each line of the document. Groovy also adds a &lt;strong&gt;toURL()&lt;/strong&gt; to the String class to make a URL object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def url = &quot;http://www.mrhaki.com/url.html&quot;.toURL()

assert &apos;&apos;&apos;\
     Simple test document
     for testing URL extensions
     in Groovy.
&apos;&apos;&apos; == url.text

def result = []
    url.eachLine {
        if (it =~ /Groovy/) {
        result &amp;lt;&amp;lt; it
    }
}
assert [&apos;in Groovy.&apos;] == result

url.withReader { reader -&amp;gt;
    assert &apos;Simple test document&apos; == reader.readLine()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s all, just simple.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              &quot;Правильный&quot; тестовый фреймворк
          </title>
          <link>http://automation-remarks.com/pravilnyi-tiestovyi-frieimvork/index.html</link>
          <pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">pravilnyi-tiestovyi-frieimvork/index.html</guid>
          <description>
                        Несколько мыслей о том, каким должен быть &quot;правильный&quot; тестовый фреймворк.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Несколько мыслей о том, каким должен быть &quot;правильный&quot; тестовый фреймворк.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.ymag.it/wp-content/uploads/2014/11/robot_in_movimento.jpg&quot; alt=&quot;robot in movimento&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По моему мнению, степень правильности определяется исходя из требований и задач, которые должен будет выполнять фреймворк. К примеру, если на проекте есть и веб-сервисы и UI часть, то при написании фреймворка для UI тестирования следовало бы изначально закладывать возможность создавать предусловия для тестов используя веб-серввисы. Если же возможности такой нету, то просто делайте архитектуру для UI тестирования.
Чаще всего начинающие автоматизаторы совершают большую ошибку - делаем, как получается, а потом будем рефакторить. Зачастую это самое &quot;потом&quot; не наступает. Но все же давайте мыслить структурировано: фреймворк должен быть модульным. Если вы пишите фреймворк на объектно-ориентированном языке ( &lt;strong&gt;Java,C#,Python&lt;/strong&gt; ), то вы обязаны выделять функциональности и &quot;отделять мух от котлет&quot;. В противном случае будет &quot;макаронный код&quot;, а к нему в придачу большие затраты на поддержку тестов и всей инфраструктуры. Модульный фреймворк можно сравнить с конструктором лего.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.euromag.ru/storage/c/2010/09/15/1284538112,397574_86.jpg&quot; alt=&quot;1284538112,397574 86&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Когда есть такие маленкие блоки, как &lt;strong&gt;PageObject&lt;/strong&gt;, &lt;strong&gt;DataProvider&lt;/strong&gt;,&lt;strong&gt;DAO&lt;/strong&gt;, &lt;strong&gt;BaseTest&lt;/strong&gt; class, собрать из этого всего фреймворк может даже джуниор, который пришел к вам на проект пару недель назад. Еще одно преимущество модульности в том, что вы легко можете заменить один элемент на другой, поменяв реализацию либо инструмент. Модульность дает вам гораздо больший радиус поворота. Скажем, когда у вас на проекте 15 - 20 тестовых сценариев, то вы можете не задумываясь в них ковыряться и тратить по 15-20 минут в день на поддержку, а вот когда их становится 1500-2000, то тут начинаются пляски с бубном, сопли и визги: &quot;какой же хреновый у нас фреймворк, че ж мы раньше-то не делали хорошо, сейчас уже поздно&amp;#8230;&amp;#8203;&quot; Так вот, чтобы избежать такой ситуации, мой вам совет перед началом разработки фреймворка: подумайте, выделите основные части, запрограммируйте их в виде модулей, напишите пару тестов на конкретные функциональности, поэкспериментируйте, найдите свой рецепт успеха. Лично мой опыт показывает, что модульный фреймворк выигрывает у &quot;макаронного кода&quot; по всем параметрам.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Небольшой видосик про Jenkins
          </title>
          <link>http://automation-remarks.com/niebolshoi-vidosik-pro-jenkins/index.html</link>
          <pubDate>Sat, 14 Feb 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">niebolshoi-vidosik-pro-jenkins/index.html</guid>
          <description>
                        Решил поделиться одним из первых своих выступлений! Enjoy;)
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Решил поделиться одним из первых своих выступлений! Enjoy;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/tXFENp-RFWs?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Java Simple REST Client
          </title>
          <link>http://automation-remarks.com/java-rest-client/index.html</link>
          <pubDate>Sat, 7 Feb 2015 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">java-rest-client/index.html</guid>
          <description>
                        Привет! Новая статейка о том, как можно сваять клиент на Java для работы с REST API.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Новая статейка о том, как можно сваять клиент на Java для работы с REST API.
Я покажу два способа, как можно добиться желаемого результата быстро и качественно. Оба способа предусматривают использование сторонних библиотек.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Способ первый - Apache HTTPClient&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Библиотека &lt;code&gt;Apache HttpClient&lt;/code&gt; значительно упрощает обработку HTTP запросов. Для того, чтобы ею воспользоваться, можно пойти на сайт Apache и там почитать, поковыряться, но я использую &lt;code&gt;Maven&lt;/code&gt; - поэтому у меня просто дэпэнденси:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;4.3.6&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ниже показаны примеры запросов GET:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
public class Test {
    public static void main(String[] args) throws ClientProtocolException,IOException {
        HttpClient client = new DefaultHttpClient();
        HttpGet request = new HttpGet(&quot;http://restUrl&quot;);
        HttpResponse response = client.execute(request);
        BufferedReader rd = new BufferedReader (new InputStreamReader(response.getEntity().getContent()));
        String line = &quot;&quot;;
        while ((line = rd.readLine()) != null) {
          System.out.println(line);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;POST:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
public class Test {
    public static void main(String[] args) throws ClientProtocolException, IOException {
        HttpClient client = new DefaultHttpClient();
        HttpPost post = new HttpPost(&quot;http://restUrl&quot;);
        StringEntity input = new StringEntity(&quot;product&quot;);
        post.setEntity(input);
        HttpResponse response = client.execute(post);
        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line = &quot;&quot;;
        while ((line = rd.readLine()) != null) {
            System.out.println(line);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Существует возможность отправлять несколько параметрос с помощью POST:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
public class Test {
    public static void main(String[] args) throws ClientProtocolException, IOException {
        HttpClient client = new DefaultHttpClient();
        HttpPost post = new HttpPost(&quot;http://restUrl&quot;);
        List nameValuePairs = new ArrayList(1);
        nameValuePairs.add(new BasicNameValuePair(&quot;name&quot;, &quot;value&quot;)); //you can as many name value pair as you want in the list.
        post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
        HttpResponse response = client.execute(post);
        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line = &quot;&quot;;
        while ((line = rd.readLine()) != null) {
            System.out.println(line);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Способ второй - Jersey&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jersey - это имплементация для &lt;strong&gt;JSR-311&lt;/strong&gt; в &lt;strong&gt;Java&lt;/strong&gt;. Jersey содержит в себе REST сервер и REST client.
Пример GET запроса:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import java.io.IOException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;
import org.apache.http.client.ClientProtocolException;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
public class Test {
    public static void main(String[] args) throws ClientProtocolException, IOException {
        ClientConfig config = new DefaultClientConfig();
        Client client = Client.create(config);
        WebResource service = client.resource(UriBuilder.fromUri(&quot;http://restUrl&quot;).build());
        // getting XML data
        System.out.println(service. path(&quot;restPath&quot;).path(&quot;resourcePath&quot;).accept(MediaType.APPLICATION_JSON).get(String.class));
        // getting JSON data
        System.out.println(service. path(&quot;restPath&quot;).path(&quot;resourcePath&quot;).accept(MediaType.APPLICATION_XML).get(String.class));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;POST запрос c несколькими параметрами:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import java.io.IOException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.UriBuilder;
import org.apache.http.client.ClientProtocolException;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.core.util.MultivaluedMapImpl;
public class Test {
    public static void main(String[] args) throws ClientProtocolException, IOException {
        ClientConfig config = new DefaultClientConfig();
        Client client = Client.create(config);
        WebResource webResource = client.resource(UriBuilder.fromUri(&quot;http://restUrl&quot;).build());
        MultivaluedMap formData = new MultivaluedMapImpl();
        formData.add(&quot;name1&quot;, &quot;val1&quot;);
        formData.add(&quot;name2&quot;, &quot;val2&quot;);
        ClientResponse response = webResource.type(MediaType.APPLICATION_FORM_URLENCODED_TYPE).post(ClientResponse.class, formData);
        System.out.println(&quot;Response &quot; + response.getEntity(String.class));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Существует возможность использовать свой собственный класс для POST:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;ClientResponse response = webResource.path(&quot;restPath&quot;).path(&quot;resourcePath&quot;).
type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class, myPojo);
System.out.println(&quot;Response &quot; + response.getEntity(String.class));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как вы можете заметить, обе представленные здесь библиотеки позволяют достаточно легко создать запросы и получить ответы от сервера, обработать их и вывести результат. Лично мне больше нравится Jersey - просто из-за того, что он не такой брутальный, как Apache, но выбирать Вам =)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Что такое Flaky тест?
          </title>
          <link>http://automation-remarks.com/chto-takoie-flacky-tiest/index.html</link>
          <pubDate>Tue, 2 Dec 2014 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">chto-takoie-flacky-tiest/index.html</guid>
          <description>
                        Если у вас нету Flacky тестов - значит вы занимаетесь чем-то нереальным :). Flacky тесты - это зло!
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;image::http://cdn.meme.am/instances/500x/52587305.jpg&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если у вас нету &lt;strong&gt;Flacky&lt;/strong&gt; тестов - значит вы занимаетесь чем-то нереальным :). &lt;strong&gt;Flacky&lt;/strong&gt; тесты - это зло! Это то, с чем приходится бороться днями, а бывает - и неделями.
Жизненный пример: написали вы свой &lt;strong&gt;Selenium&lt;/strong&gt; тест, прогнали его, отладили, закомитили - все прекрасно! Приходите на следующий день, ну или через пару-тройку дней, смотрите: он зеленый. &quot;Ну прекрасно&quot;, - думаете, смотрите еще через время - он упал (по никому не понятной причине), ведь код не менялся и приложение работает нормально. Перезапускаете тест - он проходит, все хорошо. Видимо, планеты в небе так встали, и он свалился :). Спустя несколько билдов вы замечаете, что этот тест ведет себя, как лампочка на новогодней елке - мигает: &lt;strong&gt;FAIL, PASS,FAIL,PASS&lt;/strong&gt;&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Как с этим бороться? Ответ как всегда очень прост - нужно разбираться. Как говорится, у любой проблемы есть имя, фамилия и отчество. Большинство Flaky тестов случается из-за банальной невнимательности. Некоторые из них найти легко, над некоторыми же нужно пораскинуть мозгами. Приведу пример: был у меня тест, который должен был открыть модальный диалог и в нем продолжить работу.
Задача достаточно простая, решается за 5 (нет, 10 минут) :). Я написал метод:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private void switchToRiskFactorDialog(String title) {
            String targetWindow = waitForWindowTitle(title);
            switchTo().window(targetWindow);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Все просто: метод ждал, пока появится окно с нужным title и затем делал switch в новое окно. Все работало прекрасно, пока я не заметил, что у меня тест два раза проходит, а один раз валится с &lt;em&gt;NullPointerException&lt;/em&gt;. Оказалось, что подставил меня метод waitForWindowTitle. Один раз он дожидался, пока окно появится, а в другой принимал решение, что окно появилось, хотя на самом деле его еще не было. Вот и все, таким образом я избавился от &lt;strong&gt;Flaky&lt;/strong&gt; теста.&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              О TestNG, Excel и DataProvider
          </title>
          <link>http://automation-remarks.com/smart-excel-reader-for-testng-dataprovided/index.html</link>
          <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">smart-excel-reader-for-testng-dataprovided/index.html</guid>
          <description>
                        Велкам!Второй пост не задержался.Как и обещал, расскажу о том, как мне удалось, казалось бы, из невозможного сделать возможное (изобрести свой велосипед).
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Сегодня пост о том, как справиться с чтением Excel файлов, а именно - написать &quot;умный DataReader&quot;.
Excel файлы удобно использовать для храннения тестовых данных в тестовых фреймворках, что позволяет вынести данные из тестов. Так сказать: &lt;strong&gt;&quot;Долой хардкод!&quot;&lt;/strong&gt;.
Такой подход называют D&lt;strong&gt;ata-Driven Testing&lt;/strong&gt;. Это очень удобно, потому что любой человек (даже не технарь) может изменить данные требуемые для теста: вам не нужно лезть в код и что-то там менять. В качестве тестового фреймворка будем использовать &lt;strong&gt;TestNG&lt;/strong&gt;, потому что у него есть много преимуществ, среди которых - DataProvider. Для чтения Excel файлов я использую библиотеку - &lt;strong&gt;Apache POI&lt;/strong&gt;.
Задача состоит в том, чтобы написать ридер, который будет находить строку, соответствующую имени тестового метода, извлекать данные и передавать в тест. Итак, начнем по порядку: создаем класс &lt;strong&gt;ExcelReader&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;ExcelReader.class&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class ExcelReader {

private XSSFSheet excelWSheet;
private XSSFWorkbook excelWBook;
private XSSFCell cell;

// This method is to set the File path and to open the Excel file
public void setExcelFile(String Path, String SheetName) {
    try {
        // Open the Excel file
        FileInputStream ExcelFile = new FileInputStream(Path);
        // Access the required test data sheet
        excelWBook = new XSSFWorkbook(ExcelFile);
        excelWSheet = excelWBook.getSheet(SheetName);
    } catch (Exception e) {
        System.out.println(&quot;Exception &quot; + e.getMessage());
    }
}
    // Add all below described methods here
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь начинается самое интересное! Нам нужен метод, который будет в столбце искать строку с нужным нам именем.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public List getRowContains(String testCaseName, int colNum){
     List list = new ArrayList&amp;lt;&amp;lt;&amp;gt;&amp;gt;();
     int rowCount = getRowUsed();
     for (int i = 0; i &amp;lt;&amp;lt;= rowCount; i++) {
        String cellData = getCellData(i, colNum);
        if (cellData.equalsIgnoreCase(testCaseName)) {
                    list.add(i);
            }
        }
        return list;
}

public int getRowUsed(){
   return excelWSheet.getLastRowNum();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Метод возвращает лист с номерами строк на случай, если у нас один тест нужно перезапустить несколько раз с разными данными.
Напишем еще пару вспомогательных методов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public String getCellData(int rowNum, int colNum) {
    cell = excelWSheet.getRow(rowNum).getCell(colNum);
    return Cell.getStringCellValue();
}

public List[] getRowData(int rowNo) {
        List[] arr = new List[1];
        List list = new ArrayList();
        int startCol = 1;
        int totalCols = excelWSheet.getRow(rowNo)
        .getPhysicalNumberOfCells();
        for (int i = startCol; i &amp;lt; totalCols; i++) {
           String cellData = getCellData(rowNo, i);
           list.add(cellData);
        }
        arr[0] = list;
        return arr;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Здесь следовало бы обратить внимание на метод getRowData, возвращающий массив листов. Звучит немного странно, но таким способом мы можем считывать данные из строк с различным количеством колонок. Ну и наконец последний метод:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public Object[][] getTableArray(List&amp;lt;Integer&amp;gt; rowsNo) {
        Object[][] tabArray = new Object[rowsNo.size()][];
        for (int i = 0; i &amp;lt; rowsNo.size(); i++) {
            tabArray[i] = getRowData(rowsNo.get(i));
        }
        return tabArray;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По требованию &lt;strong&gt;DataProvider&lt;/strong&gt; должен возвращать двухмерный массив обджектов, что и делает &lt;em&gt;getTableArray&lt;/em&gt;. Теперь мы легко можем создавать в тестовых классах метод и использовать его в качетве источника данных для тестов:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TestClass.class&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class TestClass{

   @DataProvider
   public Object[][] testData(Method method,String sheet){
        ExcelReader excelReader = new ExcelReader();
        excelReader.setExcelFile(config.getProperty(&quot;TestData.xlsx&quot;), sheet);
        List rowsNo = excelReader.getRowContains(method.getName(), COL_NUM);
        return excelReader.getTableArray(rowsNo);
  }

  @Test(dataProvider = &quot;testData&quot;)
  public void userLogin(List data) {
        data.get(0);
        data.get(1);
        ...
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот и вступил в силу наш массив листов: вместо того, чтобы передавать ОГРОМНОЕ количество параметров, мы передаем элегантный список, с которым легко и просто работать. Создаем Excel файл, заполняем данными, запускаем тесты и наслаждаемся, попивая чаек:)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Как я изобрел свой Jenkins Emailer
          </title>
          <link>http://automation-remarks.com/jenkins-emailer/index.html</link>
          <pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">jenkins-emailer/index.html</guid>
          <description>
                        Велкам!Второй пост не задержался.Как и обещал, расскажу о том, как мне удалось, казалось бы, из невозможного сделать возможное (изобрести свой велосипед).
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Велкам!
Второй пост не задержался. Как и обещал, расскажу о том, как мне удалось, казалось бы, из невозможного сделать возможное (изобрести свой велосипед).
Применив хитрость с &lt;strong&gt;Jenkins API&lt;/strong&gt;, как было показано в предыдущем посте, я не только добыл нужную мне информацию из недр этого чУдного инструмента, но и заставил ее приносить пользу проекту.
Итак, по порядку. Если Jenkins предоставляет возможность получать данные в формате &lt;strong&gt;JSON&lt;/strong&gt; - значит мы можем легко и просто обрабатывать эти данные.
Я буду приводить в пример некоторые куски кода, которые являются ключевыми.
Так вот! Вернемся к нашим баранам. Имея URL к &lt;strong&gt;JSON&lt;/strong&gt; файлу, скачать его можно так (осторожно: &lt;strong&gt;Java&lt;/strong&gt; code detected :)) :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static String callURL(URL url) {
        StringBuilder sb = new StringBuilder();
        URLConnection urlConn = null;
        InputStreamReader in = null;
        try {
            urlConn = url.openConnection();
            if (urlConn != null)
                urlConn.setReadTimeout(60 * 1000);
            if (urlConn != null &amp;amp;&amp;amp; urlConn.getInputStream() != null) {
                in = new InputStreamReader(urlConn.getInputStream(),
                        Charset.defaultCharset());
                BufferedReader bufferedReader = new BufferedReader(in);
                if (bufferedReader != null) {
                    int cp;
                    while ((cp = bufferedReader.read()) != -1) {
                        sb.append((char) cp);
                    }
                    bufferedReader.close();
                }
            }
            in.close();
        } catch (Exception e) {
            LOG.error(&quot;Exception while calling URL:&quot;
                    + url.toString());
        }
        return sb.toString();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Метод принимает адрес (URL), а возвращает непосредственно содержание JSON файла в строковом представлении.
Далее нам нужно дессериализовать &lt;strong&gt;JSON&lt;/strong&gt; в объект &lt;strong&gt;JobObject&lt;/strong&gt;. Это очень просто сделать с помощью библиотеки &lt;strong&gt;Google GSON&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static Object jsonToObject(String json, Class c) {
        Gson gson = new Gson();
        Object obj = gson.fromJson(json, c);
        return obj;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В данном случае был создал класс JobObject, в котором я сохранял интересующую меня информацию:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class JobObject {
    private long duration;
    private long estimatedDuration;
    private String fullDisplayName;
    private int number;
    private String result;
    private long timestamp;
    private String url;
    private String builtOn;
    private String RUNNING_STATUS = &quot;RUNNING&quot;;
    private BuildInfo buildInfo;
    private ArrayList actions;
    // Getters  and setters

    public String getStatus() {
        if (result == null) {
            return RUNNING_STATUS;
        }
        return result;
    }

    public boolean finished() {
        return !getStatus().equals(RUNNING_STATUS);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Таким образом, имея набор &lt;strong&gt;JsonObject&lt;/strong&gt;, я написал еще пару классов хелперов и обработчиков, с помощью которых отбирал для себя только те &lt;strong&gt;JobObject&lt;/strong&gt;, которые имели статус &lt;strong&gt;finished&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static List getFinishedJobs(List jobs) {
        List finishedJobs = new ArrayList();
        for (JobObject job : jobs) {
            if (job.finished()) {
                finishedJobs.add(job);
            }
        }
        return finishedJobs;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Имея на руках все козыри, я преобразовал (переопределил метод toString) JobObject в тесктовое представление.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Job 4.9.1.1_Tests #91 is FINISHED.
Job Status - SUCCESS.
Build info: PRE-RELEASE BUILD 12dev.0228.zip
You can find detailed information by the following link:
http://host:port/job/4.9.1.1_Branch_Tests/91/
Failed: 24 Total: 480&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В итоге: использовав &lt;a href=&quot;http://commons.apache.org/proper/commons-email/&quot;&gt;Apache Commons Email&lt;/a&gt;, я отправляю данные на почтовые ящики, тем самым оповещая всех о результатах наших тестов. Хотите и вам одно сброшу ;)&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Как приручить Jenkins API
          </title>
          <link>http://automation-remarks.com/kak-prruchit-jenkins-api/index.html</link>
          <pubDate>Wed, 19 Nov 2014 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">kak-prruchit-jenkins-api/index.html</guid>
          <description>
                        Небольшой пост о том, как можно добраться до внутренностей Jenkins.
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Небольшой пост о том, как можно добраться до внутренностей &lt;a href=&quot;https://jenkins.io/index.html&quot;&gt;Jenkins&lt;/a&gt;.
Бывают ситуации, когда СI сервер установлен где-то на удаленной машине, доступ к которой осуществляется через VPN. В общем ситуация сложная, а информацию о джобах и письма от дженкинса получать хотелось бы.
В таком случае в помощь приходит &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API&quot;&gt;Jenkins API&lt;/a&gt;.
API позволяет извлекать информацию в трех форматах XML, JSON и Python.
Как это работает? Очень просто: все что нужно - вбить в браузере в строке адреса:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;http://&amp;lt;jenkins host&amp;gt;/api/json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вуаля! Круто, не правда ли? Но текст не читабелен. Решается это просто: нужно добавить pretty формат:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;http://9.21.103.66:8255/jenkins/api/json?pretty=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Теперь на экране в &lt;strong&gt;JSON&lt;/strong&gt; формате отображается информация обо всех джобах. Для того, чтобы опуститься на уровень одного &lt;strong&gt;Job&lt;/strong&gt;, необходимо просто указать имя:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;http://&amp;lt;JENKINS_HOST&amp;gt;/job/&amp;lt;JOB_NAME&amp;gt;/api/json?pretty=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;А чтобы получить информацию о какой-либо сборке, нужно всего лишь указать ее номер:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;http://&amp;lt;JENKINS_HOST&amp;gt;/job/&amp;lt;JOB_NAME&amp;gt;/&amp;lt;BUILD_NUMBER&amp;gt;/api/json?pretty=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После получения информации ее можно использовать в благих целях. Но об этом я расскажу в следующий раз&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>
        <item>
          <title>
              Welcome!
          </title>
          <link>http://automation-remarks.com/first-post/index.html</link>
          <pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate>
          <guid isPermaLink="false">first-post/index.html</guid>
          <description>
                        Начало...
          </description>
          <content:encoded>
                        &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Привет! Случилось: блог для автоматизторов от автоматизатора!&lt;/p&gt;
&lt;/div&gt;
          </content:encoded>
        </item>

  </channel> 
</rss>
